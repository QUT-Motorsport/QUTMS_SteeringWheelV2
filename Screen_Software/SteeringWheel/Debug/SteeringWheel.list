
SteeringWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004380  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003020  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007524  08007524  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800752c  0800752c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800752c  0800752c  0001752c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000080  080075b4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080075b4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a19a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe9  00000000  00000000  0002a243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002c230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021072  00000000  00000000  0002d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c601  00000000  00000000  0004e54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be93a  00000000  00000000  0005ab4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119485  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  001194d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000080 	.word	0x20000080
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080044ec 	.word	0x080044ec

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000084 	.word	0x20000084
 80001c0:	080044ec 	.word	0x080044ec

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4603      	mov	r3, r0
 80004dc:	817b      	strh	r3, [r7, #10]
 80004de:	460b      	mov	r3, r1
 80004e0:	813b      	strh	r3, [r7, #8]
 80004e2:	4613      	mov	r3, r2
 80004e4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <Paint_NewImage+0xa4>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80004ec:	4a20      	ldr	r2, [pc, #128]	; (8000570 <Paint_NewImage+0xa4>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <Paint_NewImage+0xa4>)
 80004f4:	897b      	ldrh	r3, [r7, #10]
 80004f6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <Paint_NewImage+0xa4>)
 80004fa:	893b      	ldrh	r3, [r7, #8]
 80004fc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <Paint_NewImage+0xa4>)
 8000500:	8b3b      	ldrh	r3, [r7, #24]
 8000502:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <Paint_NewImage+0xa4>)
 8000506:	2202      	movs	r2, #2
 8000508:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800050a:	897b      	ldrh	r3, [r7, #10]
 800050c:	f003 0307 	and.w	r3, r3, #7
 8000510:	b29b      	uxth	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d103      	bne.n	800051e <Paint_NewImage+0x52>
 8000516:	897b      	ldrh	r3, [r7, #10]
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	b29b      	uxth	r3, r3
 800051c:	e004      	b.n	8000528 <Paint_NewImage+0x5c>
 800051e:	897b      	ldrh	r3, [r7, #10]
 8000520:	08db      	lsrs	r3, r3, #3
 8000522:	b29b      	uxth	r3, r3
 8000524:	3301      	adds	r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <Paint_NewImage+0xa4>)
 800052a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <Paint_NewImage+0xa4>)
 800052e:	893b      	ldrh	r3, [r7, #8]
 8000530:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <Paint_NewImage+0xa4>)
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <Paint_NewImage+0xa4>)
 800053a:	2200      	movs	r2, #0
 800053c:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <Paint_NewImage+0x7e>
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	2bb4      	cmp	r3, #180	; 0xb4
 8000548:	d106      	bne.n	8000558 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <Paint_NewImage+0xa4>)
 800054c:	897b      	ldrh	r3, [r7, #10]
 800054e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <Paint_NewImage+0xa4>)
 8000552:	893b      	ldrh	r3, [r7, #8]
 8000554:	80d3      	strh	r3, [r2, #6]
 8000556:	e006      	b.n	8000566 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <Paint_NewImage+0xa4>)
 800055a:	893b      	ldrh	r3, [r7, #8]
 800055c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <Paint_NewImage+0xa4>)
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	80d3      	strh	r3, [r2, #6]
    }
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	2000009c 	.word	0x2000009c

08000574 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <Paint_SelectImage+0x18>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	2000009c 	.word	0x2000009c

08000590 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d118      	bne.n	80005d2 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <Paint_SetScale+0xc8>)
 80005a6:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <Paint_SetScale+0xc8>)
 80005aa:	891b      	ldrh	r3, [r3, #8]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d104      	bne.n	80005c0 <Paint_SetScale+0x30>
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <Paint_SetScale+0xc8>)
 80005b8:	891b      	ldrh	r3, [r3, #8]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	e005      	b.n	80005cc <Paint_SetScale+0x3c>
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <Paint_SetScale+0xc8>)
 80005c2:	891b      	ldrh	r3, [r3, #8]
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	3301      	adds	r3, #1
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <Paint_SetScale+0xc8>)
 80005ce:	8253      	strh	r3, [r2, #18]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
		}else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 7\r\n");
    }
}
 80005d0:	e03d      	b.n	800064e <Paint_SetScale+0xbe>
    }else if(scale == 4){
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d118      	bne.n	800060a <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <Paint_SetScale+0xc8>)
 80005de:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <Paint_SetScale+0xc8>)
 80005e2:	891b      	ldrh	r3, [r3, #8]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d104      	bne.n	80005f8 <Paint_SetScale+0x68>
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <Paint_SetScale+0xc8>)
 80005f0:	891b      	ldrh	r3, [r3, #8]
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	e005      	b.n	8000604 <Paint_SetScale+0x74>
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <Paint_SetScale+0xc8>)
 80005fa:	891b      	ldrh	r3, [r3, #8]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	b29b      	uxth	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b29b      	uxth	r3, r3
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <Paint_SetScale+0xc8>)
 8000606:	8253      	strh	r3, [r2, #18]
}
 8000608:	e021      	b.n	800064e <Paint_SetScale+0xbe>
    }else if(scale == 7){//Only applicable with 5in65 e-Paper
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d118      	bne.n	8000642 <Paint_SetScale+0xb2>
				Paint.Scale = scale;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <Paint_SetScale+0xc8>)
 8000616:	82da      	strh	r2, [r3, #22]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <Paint_SetScale+0xc8>)
 800061a:	891b      	ldrh	r3, [r3, #8]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b29b      	uxth	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d104      	bne.n	8000630 <Paint_SetScale+0xa0>
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <Paint_SetScale+0xc8>)
 8000628:	891b      	ldrh	r3, [r3, #8]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	b29b      	uxth	r3, r3
 800062e:	e005      	b.n	800063c <Paint_SetScale+0xac>
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <Paint_SetScale+0xc8>)
 8000632:	891b      	ldrh	r3, [r3, #8]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	b29b      	uxth	r3, r3
 8000638:	3301      	adds	r3, #1
 800063a:	b29b      	uxth	r3, r3
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <Paint_SetScale+0xc8>)
 800063e:	8253      	strh	r3, [r2, #18]
}
 8000640:	e005      	b.n	800064e <Paint_SetScale+0xbe>
        Debug("Set Scale Input parameter error\r\n");
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <Paint_SetScale+0xcc>)
 8000644:	f003 f826 	bl	8003694 <puts>
        Debug("Scale Only support: 2 4 7\r\n");
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <Paint_SetScale+0xd0>)
 800064a:	f003 f823 	bl	8003694 <puts>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000009c 	.word	0x2000009c
 800065c:	08004548 	.word	0x08004548
 8000660:	08004570 	.word	0x08004570

08000664 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	460b      	mov	r3, r1
 8000670:	80bb      	strh	r3, [r7, #4]
 8000672:	4613      	mov	r3, r2
 8000674:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000676:	4b9f      	ldr	r3, [pc, #636]	; (80008f4 <Paint_SetPixel+0x290>)
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	88fa      	ldrh	r2, [r7, #6]
 800067c:	429a      	cmp	r2, r3
 800067e:	d804      	bhi.n	800068a <Paint_SetPixel+0x26>
 8000680:	4b9c      	ldr	r3, [pc, #624]	; (80008f4 <Paint_SetPixel+0x290>)
 8000682:	88db      	ldrh	r3, [r3, #6]
 8000684:	88ba      	ldrh	r2, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	d903      	bls.n	8000692 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800068a:	489b      	ldr	r0, [pc, #620]	; (80008f8 <Paint_SetPixel+0x294>)
 800068c:	f003 f802 	bl	8003694 <puts>
        return;
 8000690:	e12d      	b.n	80008ee <Paint_SetPixel+0x28a>
    }
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000692:	4b98      	ldr	r3, [pc, #608]	; (80008f4 <Paint_SetPixel+0x290>)
 8000694:	89db      	ldrh	r3, [r3, #14]
 8000696:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800069a:	d02b      	beq.n	80006f4 <Paint_SetPixel+0x90>
 800069c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80006a0:	f300 8122 	bgt.w	80008e8 <Paint_SetPixel+0x284>
 80006a4:	2bb4      	cmp	r3, #180	; 0xb4
 80006a6:	d016      	beq.n	80006d6 <Paint_SetPixel+0x72>
 80006a8:	2bb4      	cmp	r3, #180	; 0xb4
 80006aa:	f300 811d 	bgt.w	80008e8 <Paint_SetPixel+0x284>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <Paint_SetPixel+0x54>
 80006b2:	2b5a      	cmp	r3, #90	; 0x5a
 80006b4:	d005      	beq.n	80006c2 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80006b6:	e117      	b.n	80008e8 <Paint_SetPixel+0x284>
        X = Xpoint;
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006c0:	e022      	b.n	8000708 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80006c2:	4b8c      	ldr	r3, [pc, #560]	; (80008f4 <Paint_SetPixel+0x290>)
 80006c4:	891a      	ldrh	r2, [r3, #8]
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3b01      	subs	r3, #1
 80006ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006d4:	e018      	b.n	8000708 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80006d6:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <Paint_SetPixel+0x290>)
 80006d8:	891a      	ldrh	r2, [r3, #8]
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80006e4:	4b83      	ldr	r3, [pc, #524]	; (80008f4 <Paint_SetPixel+0x290>)
 80006e6:	895a      	ldrh	r2, [r3, #10]
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3b01      	subs	r3, #1
 80006f0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006f2:	e009      	b.n	8000708 <Paint_SetPixel+0xa4>
        X = Ypoint;
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 80006f8:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <Paint_SetPixel+0x290>)
 80006fa:	895a      	ldrh	r2, [r3, #10]
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	b29b      	uxth	r3, r3
 8000702:	3b01      	subs	r3, #1
 8000704:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000706:	bf00      	nop
    }

    switch(Paint.Mirror) {
 8000708:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <Paint_SetPixel+0x290>)
 800070a:	8a1b      	ldrh	r3, [r3, #16]
 800070c:	2b03      	cmp	r3, #3
 800070e:	f200 80ed 	bhi.w	80008ec <Paint_SetPixel+0x288>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <Paint_SetPixel+0xb4>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000767 	.word	0x08000767
 800071c:	08000729 	.word	0x08000729
 8000720:	08000739 	.word	0x08000739
 8000724:	08000749 	.word	0x08000749
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000728:	4b72      	ldr	r3, [pc, #456]	; (80008f4 <Paint_SetPixel+0x290>)
 800072a:	891a      	ldrh	r2, [r3, #8]
 800072c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8000736:	e017      	b.n	8000768 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000738:	4b6e      	ldr	r3, [pc, #440]	; (80008f4 <Paint_SetPixel+0x290>)
 800073a:	895a      	ldrh	r2, [r3, #10]
 800073c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b29b      	uxth	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000746:	e00f      	b.n	8000768 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000748:	4b6a      	ldr	r3, [pc, #424]	; (80008f4 <Paint_SetPixel+0x290>)
 800074a:	891a      	ldrh	r2, [r3, #8]
 800074c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b29b      	uxth	r3, r3
 8000752:	3b01      	subs	r3, #1
 8000754:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000756:	4b67      	ldr	r3, [pc, #412]	; (80008f4 <Paint_SetPixel+0x290>)
 8000758:	895a      	ldrh	r2, [r3, #10]
 800075a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	3b01      	subs	r3, #1
 8000762:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000764:	e000      	b.n	8000768 <Paint_SetPixel+0x104>
        break;
 8000766:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000768:	4b62      	ldr	r3, [pc, #392]	; (80008f4 <Paint_SetPixel+0x290>)
 800076a:	891b      	ldrh	r3, [r3, #8]
 800076c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800076e:	429a      	cmp	r2, r3
 8000770:	d804      	bhi.n	800077c <Paint_SetPixel+0x118>
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <Paint_SetPixel+0x290>)
 8000774:	895b      	ldrh	r3, [r3, #10]
 8000776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000778:	429a      	cmp	r2, r3
 800077a:	d903      	bls.n	8000784 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800077c:	485e      	ldr	r0, [pc, #376]	; (80008f8 <Paint_SetPixel+0x294>)
 800077e:	f002 ff89 	bl	8003694 <puts>
        return;
 8000782:	e0b4      	b.n	80008ee <Paint_SetPixel+0x28a>
    }

    if(Paint.Scale == 2){
 8000784:	4b5b      	ldr	r3, [pc, #364]	; (80008f4 <Paint_SetPixel+0x290>)
 8000786:	8adb      	ldrh	r3, [r3, #22]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d139      	bne.n	8000800 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	b29b      	uxth	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000796:	4a57      	ldr	r2, [pc, #348]	; (80008f4 <Paint_SetPixel+0x290>)
 8000798:	8a52      	ldrh	r2, [r2, #18]
 800079a:	fb02 f303 	mul.w	r3, r2, r3
 800079e:	440b      	add	r3, r1
 80007a0:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80007a2:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <Paint_SetPixel+0x290>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80007ae:	887b      	ldrh	r3, [r7, #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80007b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	fa42 f303 	asr.w	r3, r2, r3
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4013      	ands	r3, r2
 80007cc:	b259      	sxtb	r1, r3
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <Paint_SetPixel+0x290>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	e088      	b.n	80008ee <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80007dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	fa42 f303 	asr.w	r3, r2, r3
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b259      	sxtb	r1, r3
 80007f2:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <Paint_SetPixel+0x290>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4413      	add	r3, r2
 80007fa:	b2ca      	uxtb	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e076      	b.n	80008ee <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <Paint_SetPixel+0x290>)
 8000802:	8adb      	ldrh	r3, [r3, #22]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d137      	bne.n	8000878 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	b29b      	uxth	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000812:	4a38      	ldr	r2, [pc, #224]	; (80008f4 <Paint_SetPixel+0x290>)
 8000814:	8a52      	ldrh	r2, [r2, #18]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	440b      	add	r3, r1
 800081c:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <Paint_SetPixel+0x290>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	75fb      	strb	r3, [r7, #23]

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	22c0      	movs	r2, #192	; 0xc0
 800083c:	fa42 f303 	asr.w	r3, r2, r3
 8000840:	b25b      	sxtb	r3, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	b25a      	sxtb	r2, r3
 8000846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800084a:	4013      	ands	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	019a      	lsls	r2, r3, #6
 8000854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa42 f303 	asr.w	r3, r2, r3
 8000860:	b25a      	sxtb	r2, r3
 8000862:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000866:	4313      	orrs	r3, r2
 8000868:	b259      	sxtb	r1, r3
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <Paint_SetPixel+0x290>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e03a      	b.n	80008ee <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <Paint_SetPixel+0x290>)
 800087a:	8adb      	ldrh	r3, [r3, #22]
 800087c:	2b07      	cmp	r3, #7
 800087e:	d136      	bne.n	80008ee <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000882:	085b      	lsrs	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <Paint_SetPixel+0x290>)
 800088c:	8a52      	ldrh	r2, [r2, #18]
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	440b      	add	r3, r1
 8000894:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <Paint_SetPixel+0x290>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80008a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	22f0      	movs	r2, #240	; 0xf0
 80008ac:	fa42 f303 	asr.w	r3, r2, r3
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	b25a      	sxtb	r2, r3
 80008b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008ba:	4013      	ands	r3, r2
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	011a      	lsls	r2, r3, #4
 80008c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	fa42 f303 	asr.w	r3, r2, r3
 80008d0:	b25a      	sxtb	r2, r3
 80008d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b259      	sxtb	r1, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <Paint_SetPixel+0x290>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	4413      	add	r3, r2
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e002      	b.n	80008ee <Paint_SetPixel+0x28a>
        return;
 80008e8:	bf00      	nop
 80008ea:	e000      	b.n	80008ee <Paint_SetPixel+0x28a>
        return;
 80008ec:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	0800462c 	.word	0x0800462c

080008fc <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <Paint_Clear+0xd0>)
 8000908:	8adb      	ldrh	r3, [r3, #22]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <Paint_Clear+0x1a>
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <Paint_Clear+0xd0>)
 8000910:	8adb      	ldrh	r3, [r3, #22]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d125      	bne.n	8000962 <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000916:	2300      	movs	r3, #0
 8000918:	82fb      	strh	r3, [r7, #22]
 800091a:	e01c      	b.n	8000956 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800091c:	2300      	movs	r3, #0
 800091e:	82bb      	strh	r3, [r7, #20]
 8000920:	e011      	b.n	8000946 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000922:	8aba      	ldrh	r2, [r7, #20]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	4929      	ldr	r1, [pc, #164]	; (80009cc <Paint_Clear+0xd0>)
 8000928:	8a49      	ldrh	r1, [r1, #18]
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	4413      	add	r3, r2
 8000930:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <Paint_Clear+0xd0>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000940:	8abb      	ldrh	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	82bb      	strh	r3, [r7, #20]
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <Paint_Clear+0xd0>)
 8000948:	8a5b      	ldrh	r3, [r3, #18]
 800094a:	8aba      	ldrh	r2, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3e8      	bcc.n	8000922 <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000950:	8afb      	ldrh	r3, [r7, #22]
 8000952:	3301      	adds	r3, #1
 8000954:	82fb      	strh	r3, [r7, #22]
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <Paint_Clear+0xd0>)
 8000958:	8a9b      	ldrh	r3, [r3, #20]
 800095a:	8afa      	ldrh	r2, [r7, #22]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3dd      	bcc.n	800091c <Paint_Clear+0x20>
 8000960:	e02f      	b.n	80009c2 <Paint_Clear+0xc6>
			}
		}
	}else if(Paint.Scale == 7){
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <Paint_Clear+0xd0>)
 8000964:	8adb      	ldrh	r3, [r3, #22]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d12b      	bne.n	80009c2 <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800096a:	2300      	movs	r3, #0
 800096c:	827b      	strh	r3, [r7, #18]
 800096e:	e022      	b.n	80009b6 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000970:	2300      	movs	r3, #0
 8000972:	823b      	strh	r3, [r7, #16]
 8000974:	e017      	b.n	80009a6 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000976:	8a3a      	ldrh	r2, [r7, #16]
 8000978:	8a7b      	ldrh	r3, [r7, #18]
 800097a:	4914      	ldr	r1, [pc, #80]	; (80009cc <Paint_Clear+0xd0>)
 800097c:	8a49      	ldrh	r1, [r1, #18]
 800097e:	fb01 f303 	mul.w	r3, r1, r3
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b25a      	sxtb	r2, r3
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b259      	sxtb	r1, r3
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <Paint_Clear+0xd0>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	b2ca      	uxtb	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80009a0:	8a3b      	ldrh	r3, [r7, #16]
 80009a2:	3301      	adds	r3, #1
 80009a4:	823b      	strh	r3, [r7, #16]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <Paint_Clear+0xd0>)
 80009a8:	8a5b      	ldrh	r3, [r3, #18]
 80009aa:	8a3a      	ldrh	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3e2      	bcc.n	8000976 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80009b0:	8a7b      	ldrh	r3, [r7, #18]
 80009b2:	3301      	adds	r3, #1
 80009b4:	827b      	strh	r3, [r7, #18]
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <Paint_Clear+0xd0>)
 80009b8:	8a9b      	ldrh	r3, [r3, #20]
 80009ba:	8a7a      	ldrh	r2, [r7, #18]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3d7      	bcc.n	8000970 <Paint_Clear+0x74>
			}
		}
	}
}
 80009c0:	e7ff      	b.n	80009c2 <Paint_Clear+0xc6>
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	2000009c 	.word	0x2000009c

080009d0 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4604      	mov	r4, r0
 80009d8:	4608      	mov	r0, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	4623      	mov	r3, r4
 80009e0:	80fb      	strh	r3, [r7, #6]
 80009e2:	4603      	mov	r3, r0
 80009e4:	80bb      	strh	r3, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	807b      	strh	r3, [r7, #2]
 80009ea:	4613      	mov	r3, r2
 80009ec:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	81bb      	strh	r3, [r7, #12]
 80009f2:	e012      	b.n	8000a1a <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	e008      	b.n	8000a0c <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 80009fa:	8c3a      	ldrh	r2, [r7, #32]
 80009fc:	89b9      	ldrh	r1, [r7, #12]
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe2f 	bl	8000664 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	81fb      	strh	r3, [r7, #14]
 8000a0c:	89fa      	ldrh	r2, [r7, #14]
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d3f2      	bcc.n	80009fa <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8000a14:	89bb      	ldrh	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	81bb      	strh	r3, [r7, #12]
 8000a1a:	89ba      	ldrh	r2, [r7, #12]
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3e8      	bcc.n	80009f4 <Paint_ClearWindows+0x24>
        }
    }
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}

08000a2c <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4603      	mov	r3, r0
 8000a36:	81fb      	strh	r3, [r7, #14]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	81bb      	strh	r3, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000a40:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <Paint_DrawChar+0x148>)
 8000a42:	889b      	ldrh	r3, [r3, #4]
 8000a44:	89fa      	ldrh	r2, [r7, #14]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d804      	bhi.n	8000a54 <Paint_DrawChar+0x28>
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <Paint_DrawChar+0x148>)
 8000a4c:	88db      	ldrh	r3, [r3, #6]
 8000a4e:	89ba      	ldrh	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d903      	bls.n	8000a5c <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8000a54:	4848      	ldr	r0, [pc, #288]	; (8000b78 <Paint_DrawChar+0x14c>)
 8000a56:	f002 fe1d 	bl	8003694 <puts>
        return;
 8000a5a:	e087      	b.n	8000b6c <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	3b20      	subs	r3, #32
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	88d2      	ldrh	r2, [r2, #6]
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	8892      	ldrh	r2, [r2, #4]
 8000a6c:	08d2      	lsrs	r2, r2, #3
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	8892      	ldrh	r2, [r2, #4]
 8000a76:	f002 0207 	and.w	r2, r2, #7
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2201      	movne	r2, #1
 8000a82:	2200      	moveq	r2, #0
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440a      	add	r2, r1
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	83fb      	strh	r3, [r7, #30]
 8000a9c:	e061      	b.n	8000b62 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	83bb      	strh	r3, [r7, #28]
 8000aa2:	e04c      	b.n	8000b3e <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000aa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d118      	bne.n	8000adc <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	8bbb      	ldrh	r3, [r7, #28]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	fa42 f303 	asr.w	r3, r2, r3
 8000abc:	400b      	ands	r3, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d031      	beq.n	8000b26 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000ac2:	89fa      	ldrh	r2, [r7, #14]
 8000ac4:	8bbb      	ldrh	r3, [r7, #28]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	89ba      	ldrh	r2, [r7, #12]
 8000acc:	8bfb      	ldrh	r3, [r7, #30]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f7ff fdc5 	bl	8000664 <Paint_SetPixel>
 8000ada:	e024      	b.n	8000b26 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	8bbb      	ldrh	r3, [r7, #28]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	fa42 f303 	asr.w	r3, r2, r3
 8000aee:	400b      	ands	r3, r1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00c      	beq.n	8000b0e <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	8bbb      	ldrh	r3, [r7, #28]
 8000af8:	4413      	add	r3, r2
 8000afa:	b298      	uxth	r0, r3
 8000afc:	89ba      	ldrh	r2, [r7, #12]
 8000afe:	8bfb      	ldrh	r3, [r7, #30]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b06:	4619      	mov	r1, r3
 8000b08:	f7ff fdac 	bl	8000664 <Paint_SetPixel>
 8000b0c:	e00b      	b.n	8000b26 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000b0e:	89fa      	ldrh	r2, [r7, #14]
 8000b10:	8bbb      	ldrh	r3, [r7, #28]
 8000b12:	4413      	add	r3, r2
 8000b14:	b298      	uxth	r0, r3
 8000b16:	89ba      	ldrh	r2, [r7, #12]
 8000b18:	8bfb      	ldrh	r3, [r7, #30]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	f7ff fd9f 	bl	8000664 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000b26:	8bbb      	ldrh	r3, [r7, #28]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	2b07      	cmp	r3, #7
 8000b30:	d102      	bne.n	8000b38 <Paint_DrawChar+0x10c>
                ptr++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000b38:	8bbb      	ldrh	r3, [r7, #28]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	83bb      	strh	r3, [r7, #28]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	889b      	ldrh	r3, [r3, #4]
 8000b42:	8bba      	ldrh	r2, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3ad      	bcc.n	8000aa4 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <Paint_DrawChar+0x130>
            ptr++;
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000b5c:	8bfb      	ldrh	r3, [r7, #30]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	83fb      	strh	r3, [r7, #30]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	88db      	ldrh	r3, [r3, #6]
 8000b66:	8bfa      	ldrh	r2, [r7, #30]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d398      	bcc.n	8000a9e <Paint_DrawChar+0x72>
    }// Write all
}
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	08004790 	.word	0x08004790

08000b7c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4603      	mov	r3, r0
 8000b88:	81fb      	strh	r3, [r7, #14]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000b92:	89bb      	ldrh	r3, [r7, #12]
 8000b94:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	89fa      	ldrh	r2, [r7, #14]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d804      	bhi.n	8000baa <Paint_DrawString_EN+0x2e>
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000ba2:	88db      	ldrh	r3, [r3, #6]
 8000ba4:	89ba      	ldrh	r2, [r7, #12]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d931      	bls.n	8000c0e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8000baa:	481d      	ldr	r0, [pc, #116]	; (8000c20 <Paint_DrawString_EN+0xa4>)
 8000bac:	f002 fd72 	bl	8003694 <puts>
        return;
 8000bb0:	e031      	b.n	8000c16 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000bb2:	8afb      	ldrh	r3, [r7, #22]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	8892      	ldrh	r2, [r2, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000bbc:	8892      	ldrh	r2, [r2, #4]
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	dd06      	ble.n	8000bd0 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88da      	ldrh	r2, [r3, #6]
 8000bca:	8abb      	ldrh	r3, [r7, #20]
 8000bcc:	4413      	add	r3, r2
 8000bce:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000bd0:	8abb      	ldrh	r3, [r7, #20]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	88d2      	ldrh	r2, [r2, #6]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000bda:	88d2      	ldrh	r2, [r2, #6]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	dd03      	ble.n	8000be8 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	8ab9      	ldrh	r1, [r7, #20]
 8000bee:	8af8      	ldrh	r0, [r7, #22]
 8000bf0:	8c3b      	ldrh	r3, [r7, #32]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f7ff ff17 	bl	8000a2c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	889a      	ldrh	r2, [r3, #4]
 8000c08:	8afb      	ldrh	r3, [r7, #22]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1cd      	bne.n	8000bb2 <Paint_DrawString_EN+0x36>
    }
}
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000009c 	.word	0x2000009c
 8000c20:	080047d0 	.word	0x080047d0

08000c24 <Screen_Static_Init>:

extern UBYTE *STATIC_CANVAS;
extern UBYTE *DYNAMIC_CANVAS;

void Screen_Static_Init(UBYTE *Canvas)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	6078      	str	r0, [r7, #4]
	Screen_4Gray_Init();
 8000c2c:	f000 f9ee 	bl	800100c <Screen_4Gray_Init>
	Screen_4Gray_Clear();
 8000c30:	f000 fb40 	bl	80012b4 <Screen_4Gray_Clear>
	Screen_Delay_ms(500);
 8000c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c38:	f001 f94a 	bl	8001ed0 <HAL_Delay>
	Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_ORIENTATION, NONINVERTED);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	23b4      	movs	r3, #180	; 0xb4
 8000c42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fc3e 	bl	80004cc <Paint_NewImage>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <Static_Display>:

void Static_Display(UBYTE *Canvas)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	Screen_4Gray_Display(Canvas);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fbd3 	bl	800140c <Screen_4Gray_Display>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Screen_Dynamic_Init>:

void Screen_Dynamic_Init(UBYTE *Canvas)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af02      	add	r7, sp, #8
 8000c74:	6078      	str	r0, [r7, #4]
	Screen_1Gray_Init();
 8000c76:	f000 fa73 	bl	8001160 <Screen_1Gray_Init>
	Screen_1Gray_Clear();
 8000c7a:	f000 fb93 	bl	80013a4 <Screen_1Gray_Clear>
	Screen_Delay_ms(500);
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f001 f925 	bl	8001ed0 <HAL_Delay>
	Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_ORIENTATION, NONINVERTED);
 8000c86:	2300      	movs	r3, #0
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	23b4      	movs	r3, #180	; 0xb4
 8000c8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c90:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fc19 	bl	80004cc <Paint_NewImage>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <Dynamic_Display>:

void Dynamic_Display(UBYTE *Canvas)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	Screen_1Gray_Display(Canvas);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 fcc6 	bl	800163c <Screen_1Gray_Display>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <Canvas_Init>:

UBYTE* Canvas_Init()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	UBYTE *canvas;
	UWORD Imagesize = ((SCREEN_WIDTH % 4 == 0)? (SCREEN_WIDTH / 4 ): (SCREEN_WIDTH / 4 + 1)) * SCREEN_HEIGHT;
 8000cbe:	f248 3340 	movw	r3, #33600	; 0x8340
 8000cc2:	80fb      	strh	r3, [r7, #6]
	if((canvas = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fb82 	bl	80033d0 <malloc>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <Canvas_Init+0x22>
		return NULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <Canvas_Init+0x24>
	}
	return canvas;
 8000cda:	683b      	ldr	r3, [r7, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Screen_Startup>:

void Screen_Startup(UBYTE * Canvas)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
	Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_ORIENTATION, NONINVERTED);
 8000cec:	2300      	movs	r3, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	23b4      	movs	r3, #180	; 0xb4
 8000cf2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cf6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fbe6 	bl	80004cc <Paint_NewImage>
	Paint_SelectImage(Canvas);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fc37 	bl	8000574 <Paint_SelectImage>
	Paint_SetScale(4);
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff fc42 	bl	8000590 <Paint_SetScale>
	Paint_Clear(WHITE);
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	f7ff fdf5 	bl	80008fc <Paint_Clear>
	Static_Display(Canvas);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa0 	bl	8000c58 <Static_Display>
	HAL_Delay(2000);
 8000d18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1c:	f001 f8d8 	bl	8001ed0 <HAL_Delay>
	Paint_DrawString_EN(15, 200, "QUT Motorsports", &Font24, WHITE, ClrBlack);
 8000d20:	2300      	movs	r3, #0
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	23ff      	movs	r3, #255	; 0xff
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <Screen_Startup+0x9c>)
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <Screen_Startup+0xa0>)
 8000d2c:	21c8      	movs	r1, #200	; 0xc8
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f7ff ff24 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(25, 225, "Steering Wheel", &Font24, WHITE, ClrBlack);
 8000d34:	2300      	movs	r3, #0
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	23ff      	movs	r3, #255	; 0xff
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <Screen_Startup+0x9c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <Screen_Startup+0xa4>)
 8000d40:	21e1      	movs	r1, #225	; 0xe1
 8000d42:	2019      	movs	r0, #25
 8000d44:	f7ff ff1a 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(35, 250, "Version 1.0", &Font24, WHITE, ClrBlack);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <Screen_Startup+0x9c>)
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <Screen_Startup+0xa8>)
 8000d54:	21fa      	movs	r1, #250	; 0xfa
 8000d56:	2023      	movs	r0, #35	; 0x23
 8000d58:	f7ff ff10 	bl	8000b7c <Paint_DrawString_EN>
	Static_Display(Canvas);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff7b 	bl	8000c58 <Static_Display>
	HAL_Delay(5000);
 8000d62:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d66:	f001 f8b3 	bl	8001ed0 <HAL_Delay>
	Paint_Clear(WHITE);
 8000d6a:	20ff      	movs	r0, #255	; 0xff
 8000d6c:	f7ff fdc6 	bl	80008fc <Paint_Clear>
	Static_Display(Canvas);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff71 	bl	8000c58 <Static_Display>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	0800485c 	.word	0x0800485c
 8000d88:	0800486c 	.word	0x0800486c
 8000d8c:	0800487c 	.word	0x0800487c

08000d90 <Dynamic_Counter>:

void Dynamic_Counter(UBYTE *Canvas, int8_t *VCU_STATES)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	Paint_SelectImage(Canvas);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fbea 	bl	8000574 <Paint_SelectImage>
	Paint_SetScale(2);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fbf5 	bl	8000590 <Paint_SetScale>
	Paint_Clear(WHITE);
 8000da6:	20ff      	movs	r0, #255	; 0xff
 8000da8:	f7ff fda8 	bl	80008fc <Paint_Clear>
	Paint_ClearWindows(20, 20, 260, 460, WHITE);
 8000dac:	23ff      	movs	r3, #255	; 0xff
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	2114      	movs	r1, #20
 8000dba:	2014      	movs	r0, #20
 8000dbc:	f7ff fe08 	bl	80009d0 <Paint_ClearWindows>
	//Paint_DrawNum(50, 50, value, &Font24, ClrBlack, ClrWhite);
	Paint_DrawString_EN(25, 50, "QUT MS VCU STATUS", &Font20, WHITE, ClrBlack);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	23ff      	movs	r3, #255	; 0xff
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000dca:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <Dynamic_Counter+0xd4>)
 8000dcc:	2132      	movs	r1, #50	; 0x32
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f7ff fed4 	bl	8000b7c <Paint_DrawString_EN>
	char text[15];
	sprintf(text, "CTRL: 0x%02X", VCU_STATES[0]);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4921      	ldr	r1, [pc, #132]	; (8000e68 <Dynamic_Counter+0xd8>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fc6e 	bl	80036c4 <siprintf>
	Paint_DrawString_EN(75, 100, text, &Font20, WHITE, ClrBlack);
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	2300      	movs	r3, #0
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	23ff      	movs	r3, #255	; 0xff
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	204b      	movs	r0, #75	; 0x4b
 8000dfa:	f7ff febf 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 150, "DASH: 0x00", &Font20, WHITE, ClrBlack);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	23ff      	movs	r3, #255	; 0xff
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <Dynamic_Counter+0xdc>)
 8000e0a:	2196      	movs	r1, #150	; 0x96
 8000e0c:	204b      	movs	r0, #75	; 0x4b
 8000e0e:	f7ff feb5 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 200, "EBS:  0x00", &Font20, WHITE, ClrBlack);
 8000e12:	2300      	movs	r3, #0
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	23ff      	movs	r3, #255	; 0xff
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <Dynamic_Counter+0xe0>)
 8000e1e:	21c8      	movs	r1, #200	; 0xc8
 8000e20:	204b      	movs	r0, #75	; 0x4b
 8000e22:	f7ff feab 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 250, "BMU:  0x00", &Font20, WHITE, ClrBlack);
 8000e26:	2300      	movs	r3, #0
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	23ff      	movs	r3, #255	; 0xff
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e30:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <Dynamic_Counter+0xe4>)
 8000e32:	21fa      	movs	r1, #250	; 0xfa
 8000e34:	204b      	movs	r0, #75	; 0x4b
 8000e36:	f7ff fea1 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 300, "DVL:  0x00", &Font20, WHITE, ClrBlack);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	23ff      	movs	r3, #255	; 0xff
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <Dynamic_Counter+0xe8>)
 8000e46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e4a:	204b      	movs	r0, #75	; 0x4b
 8000e4c:	f7ff fe96 	bl	8000b7c <Paint_DrawString_EN>
	Dynamic_Display(Canvas);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff26 	bl	8000ca2 <Dynamic_Display>
//	HAL_Delay(100);
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000004 	.word	0x20000004
 8000e64:	08004888 	.word	0x08004888
 8000e68:	0800489c 	.word	0x0800489c
 8000e6c:	080048ac 	.word	0x080048ac
 8000e70:	080048b8 	.word	0x080048b8
 8000e74:	080048c4 	.word	0x080048c4
 8000e78:	080048d0 	.word	0x080048d0

08000e7c <Screen_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void Screen_Reset(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <Screen_Reset+0x3c>)
 8000e84:	2010      	movs	r0, #16
 8000e86:	f000 fc29 	bl	80016dc <Screen_Digital_Write>
    Screen_Delay_ms(300);
 8000e8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e8e:	f001 f81f 	bl	8001ed0 <HAL_Delay>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <Screen_Reset+0x3c>)
 8000e96:	2010      	movs	r0, #16
 8000e98:	f000 fc20 	bl	80016dc <Screen_Digital_Write>
    Screen_Delay_ms(3);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f001 f817 	bl	8001ed0 <HAL_Delay>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <Screen_Reset+0x3c>)
 8000ea6:	2010      	movs	r0, #16
 8000ea8:	f000 fc18 	bl	80016dc <Screen_Digital_Write>
    Screen_Delay_ms(300);
 8000eac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eb0:	f001 f80e 	bl	8001ed0 <HAL_Delay>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020800 	.word	0x40020800

08000ebc <Screen_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void Screen_SendCommand(UBYTE Reg)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <Screen_SendCommand+0x38>)
 8000eca:	2040      	movs	r0, #64	; 0x40
 8000ecc:	f000 fc06 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <Screen_SendCommand+0x38>)
 8000ed4:	2010      	movs	r0, #16
 8000ed6:	f000 fc01 	bl	80016dc <Screen_Digital_Write>
    Screen_WriteByte(Reg);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fbe7 	bl	80016b0 <Screen_WriteByte>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4903      	ldr	r1, [pc, #12]	; (8000ef4 <Screen_SendCommand+0x38>)
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f000 fbf8 	bl	80016dc <Screen_Digital_Write>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <Screen_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void Screen_SendData(UBYTE Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	490a      	ldr	r1, [pc, #40]	; (8000f30 <Screen_SendData+0x38>)
 8000f06:	2040      	movs	r0, #64	; 0x40
 8000f08:	f000 fbe8 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <Screen_SendData+0x38>)
 8000f10:	2010      	movs	r0, #16
 8000f12:	f000 fbe3 	bl	80016dc <Screen_Digital_Write>
    Screen_WriteByte(Data);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fbc9 	bl	80016b0 <Screen_WriteByte>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4903      	ldr	r1, [pc, #12]	; (8000f30 <Screen_SendData+0x38>)
 8000f22:	2010      	movs	r0, #16
 8000f24:	f000 fbda 	bl	80016dc <Screen_Digital_Write>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020000 	.word	0x40020000

08000f34 <Screen_ReadBusy_HIGH>:

static void Screen_ReadBusy_HIGH(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <Screen_ReadBusy_HIGH+0x34>)
 8000f3c:	f002 fbaa 	bl	8003694 <puts>
    UBYTE busy;
    do {
        busy = Screen_Digital_Read(SBUSY_Pin, SBUSY_GPIO_Port);
 8000f40:	490a      	ldr	r1, [pc, #40]	; (8000f6c <Screen_ReadBusy_HIGH+0x38>)
 8000f42:	2008      	movs	r0, #8
 8000f44:	f000 fbe2 	bl	800170c <Screen_Digital_Read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
    } while(busy);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f6      	bne.n	8000f40 <Screen_ReadBusy_HIGH+0xc>
    Screen_Delay_ms(200);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f000 ffbc 	bl	8001ed0 <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <Screen_ReadBusy_HIGH+0x3c>)
 8000f5a:	f002 fb9b 	bl	8003694 <puts>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	080048dc 	.word	0x080048dc
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	080048f4 	.word	0x080048f4

08000f74 <Screen_Load_LUT>:
/******************************************************************************
function :	set the look-up tables
parameter:
******************************************************************************/
void Screen_Load_LUT(UBYTE lut)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  UWORD i;
  Screen_SendCommand(0x32);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f7ff ff9c 	bl	8000ebc <Screen_SendCommand>
  for (i = 0; i < 105; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	e02d      	b.n	8000fe6 <Screen_Load_LUT+0x72>
  {
    if(lut == 0)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d106      	bne.n	8000f9e <Screen_Load_LUT+0x2a>
        Screen_SendData(lut_4Gray_GC[i]);
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <Screen_Load_LUT+0x84>)
 8000f94:	5cd3      	ldrb	r3, [r2, r3]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffae 	bl	8000ef8 <Screen_SendData>
 8000f9c:	e020      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else if(lut == 1)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d106      	bne.n	8000fb2 <Screen_Load_LUT+0x3e>
        Screen_SendData(lut_1Gray_GC[i]);
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <Screen_Load_LUT+0x88>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffa4 	bl	8000ef8 <Screen_SendData>
 8000fb0:	e016      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else if(lut == 2)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d106      	bne.n	8000fc6 <Screen_Load_LUT+0x52>
        Screen_SendData(lut_1Gray_DU[i]);
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <Screen_Load_LUT+0x8c>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff9a 	bl	8000ef8 <Screen_SendData>
 8000fc4:	e00c      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else if(lut == 3)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d106      	bne.n	8000fda <Screen_Load_LUT+0x66>
        Screen_SendData(lut_1Gray_A2[i]);
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <Screen_Load_LUT+0x90>)
 8000fd0:	5cd3      	ldrb	r3, [r2, r3]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff90 	bl	8000ef8 <Screen_SendData>
 8000fd8:	e002      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else
        Debug("There is no such lut \r\n");
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <Screen_Load_LUT+0x94>)
 8000fdc:	f002 fb5a 	bl	8003694 <puts>
  for (i = 0; i < 105; i++)
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	81fb      	strh	r3, [r7, #14]
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	2b68      	cmp	r3, #104	; 0x68
 8000fea:	d9ce      	bls.n	8000f8a <Screen_Load_LUT+0x16>
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	0800493c 	.word	0x0800493c
 8000ffc:	080049a8 	.word	0x080049a8
 8001000:	08004a14 	.word	0x08004a14
 8001004:	08004a80 	.word	0x08004a80
 8001008:	08004914 	.word	0x08004914

0800100c <Screen_4Gray_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void Screen_4Gray_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    Screen_Reset();
 8001010:	f7ff ff34 	bl	8000e7c <Screen_Reset>

    Screen_SendCommand(0x12);
 8001014:	2012      	movs	r0, #18
 8001016:	f7ff ff51 	bl	8000ebc <Screen_SendCommand>
    Screen_Delay_ms(300);
 800101a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800101e:	f000 ff57 	bl	8001ed0 <HAL_Delay>

    Screen_SendCommand(0x46);
 8001022:	2046      	movs	r0, #70	; 0x46
 8001024:	f7ff ff4a 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 8001028:	20f7      	movs	r0, #247	; 0xf7
 800102a:	f7ff ff65 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 800102e:	f7ff ff81 	bl	8000f34 <Screen_ReadBusy_HIGH>
    Screen_SendCommand(0x47);
 8001032:	2047      	movs	r0, #71	; 0x47
 8001034:	f7ff ff42 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 8001038:	20f7      	movs	r0, #247	; 0xf7
 800103a:	f7ff ff5d 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 800103e:	f7ff ff79 	bl	8000f34 <Screen_ReadBusy_HIGH>

    Screen_SendCommand(0x01); // setting gate number
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff ff3a 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xDF);
 8001048:	20df      	movs	r0, #223	; 0xdf
 800104a:	f7ff ff55 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff ff52 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff4f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x03); // set gate voltage
 800105a:	2003      	movs	r0, #3
 800105c:	f7ff ff2e 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff49 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x04); // set source voltage
 8001066:	2004      	movs	r0, #4
 8001068:	f7ff ff28 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x41);
 800106c:	2041      	movs	r0, #65	; 0x41
 800106e:	f7ff ff43 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xA8);
 8001072:	20a8      	movs	r0, #168	; 0xa8
 8001074:	f7ff ff40 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x32);
 8001078:	2032      	movs	r0, #50	; 0x32
 800107a:	f7ff ff3d 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x11); // set data entry sequence
 800107e:	2011      	movs	r0, #17
 8001080:	f7ff ff1c 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x03);
 8001084:	2003      	movs	r0, #3
 8001086:	f7ff ff37 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x3C); // set border
 800108a:	203c      	movs	r0, #60	; 0x3c
 800108c:	f7ff ff16 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff31 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x0C); // set booster strength
 8001096:	200c      	movs	r0, #12
 8001098:	f7ff ff10 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xAE);
 800109c:	20ae      	movs	r0, #174	; 0xae
 800109e:	f7ff ff2b 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC7);
 80010a2:	20c7      	movs	r0, #199	; 0xc7
 80010a4:	f7ff ff28 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC3);
 80010a8:	20c3      	movs	r0, #195	; 0xc3
 80010aa:	f7ff ff25 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 80010ae:	20c0      	movs	r0, #192	; 0xc0
 80010b0:	f7ff ff22 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 80010b4:	20c0      	movs	r0, #192	; 0xc0
 80010b6:	f7ff ff1f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x18); // set internal sensor on
 80010ba:	2018      	movs	r0, #24
 80010bc:	f7ff fefe 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x80);
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	f7ff ff19 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x2C); // set vcom value
 80010c6:	202c      	movs	r0, #44	; 0x2c
 80010c8:	f7ff fef8 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x44);
 80010cc:	2044      	movs	r0, #68	; 0x44
 80010ce:	f7ff ff13 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x37); // set display option, these setting turn on previous function
 80010d2:	2037      	movs	r0, #55	; 0x37
 80010d4:	f7ff fef2 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff0d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ff0a 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff07 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff04 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff01 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fefe 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fefb 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fef8 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fef5 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fef2 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x44); // setting X direction start/end position of RAM
 8001114:	2044      	movs	r0, #68	; 0x44
 8001116:	f7ff fed1 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff feec 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fee9 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x17);
 8001126:	2017      	movs	r0, #23
 8001128:	f7ff fee6 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff fee3 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x45); // setting Y direction start/end position of RAM
 8001132:	2045      	movs	r0, #69	; 0x45
 8001134:	f7ff fec2 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fedd 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff feda 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xDF);
 8001144:	20df      	movs	r0, #223	; 0xdf
 8001146:	f7ff fed7 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fed4 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x22); // Display Update Control 2
 8001150:	2022      	movs	r0, #34	; 0x22
 8001152:	f7ff feb3 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xCF);
 8001156:	20cf      	movs	r0, #207	; 0xcf
 8001158:	f7ff fece 	bl	8000ef8 <Screen_SendData>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <Screen_1Gray_Init>:
/******************************************************************************
function :  Initialize the e-Paper register
parameter:
******************************************************************************/
void Screen_1Gray_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    Screen_Reset();
 8001164:	f7ff fe8a 	bl	8000e7c <Screen_Reset>

    Screen_SendCommand(0x12);
 8001168:	2012      	movs	r0, #18
 800116a:	f7ff fea7 	bl	8000ebc <Screen_SendCommand>
    Screen_Delay_ms(300);
 800116e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001172:	f000 fead 	bl	8001ed0 <HAL_Delay>

    Screen_SendCommand(0x46);
 8001176:	2046      	movs	r0, #70	; 0x46
 8001178:	f7ff fea0 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 800117c:	20f7      	movs	r0, #247	; 0xf7
 800117e:	f7ff febb 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 8001182:	f7ff fed7 	bl	8000f34 <Screen_ReadBusy_HIGH>
    Screen_SendCommand(0x47);
 8001186:	2047      	movs	r0, #71	; 0x47
 8001188:	f7ff fe98 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 800118c:	20f7      	movs	r0, #247	; 0xf7
 800118e:	f7ff feb3 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 8001192:	f7ff fecf 	bl	8000f34 <Screen_ReadBusy_HIGH>

    Screen_SendCommand(0x01); // setting gaet number
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff fe90 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xDF);
 800119c:	20df      	movs	r0, #223	; 0xdf
 800119e:	f7ff feab 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fea8 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fea5 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x03); // set gate voltage
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff fe84 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fe9f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x04); // set source voltage
 80011ba:	2004      	movs	r0, #4
 80011bc:	f7ff fe7e 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x41);
 80011c0:	2041      	movs	r0, #65	; 0x41
 80011c2:	f7ff fe99 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xA8);
 80011c6:	20a8      	movs	r0, #168	; 0xa8
 80011c8:	f7ff fe96 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x32);
 80011cc:	2032      	movs	r0, #50	; 0x32
 80011ce:	f7ff fe93 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x11); // set data entry sequence
 80011d2:	2011      	movs	r0, #17
 80011d4:	f7ff fe72 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x03);
 80011d8:	2003      	movs	r0, #3
 80011da:	f7ff fe8d 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x3C); // set border
 80011de:	203c      	movs	r0, #60	; 0x3c
 80011e0:	f7ff fe6c 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe87 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x0C); // set booster strength
 80011ea:	200c      	movs	r0, #12
 80011ec:	f7ff fe66 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xAE);
 80011f0:	20ae      	movs	r0, #174	; 0xae
 80011f2:	f7ff fe81 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC7);
 80011f6:	20c7      	movs	r0, #199	; 0xc7
 80011f8:	f7ff fe7e 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC3);
 80011fc:	20c3      	movs	r0, #195	; 0xc3
 80011fe:	f7ff fe7b 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 8001202:	20c0      	movs	r0, #192	; 0xc0
 8001204:	f7ff fe78 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 8001208:	20c0      	movs	r0, #192	; 0xc0
 800120a:	f7ff fe75 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x18); // set internal sensor on
 800120e:	2018      	movs	r0, #24
 8001210:	f7ff fe54 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x80);
 8001214:	2080      	movs	r0, #128	; 0x80
 8001216:	f7ff fe6f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x2C); // set vcom value
 800121a:	202c      	movs	r0, #44	; 0x2c
 800121c:	f7ff fe4e 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x44);
 8001220:	2044      	movs	r0, #68	; 0x44
 8001222:	f7ff fe69 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x37); // set display option, these setting turn on previous function
 8001226:	2037      	movs	r0, #55	; 0x37
 8001228:	f7ff fe48 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);     //can switch 1 gray or 4 gray
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fe63 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f7ff fe60 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001238:	20ff      	movs	r0, #255	; 0xff
 800123a:	f7ff fe5d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 800123e:	20ff      	movs	r0, #255	; 0xff
 8001240:	f7ff fe5a 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001244:	20ff      	movs	r0, #255	; 0xff
 8001246:	f7ff fe57 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x4F);
 800124a:	204f      	movs	r0, #79	; 0x4f
 800124c:	f7ff fe54 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001250:	20ff      	movs	r0, #255	; 0xff
 8001252:	f7ff fe51 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001256:	20ff      	movs	r0, #255	; 0xff
 8001258:	f7ff fe4e 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 800125c:	20ff      	movs	r0, #255	; 0xff
 800125e:	f7ff fe4b 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001262:	20ff      	movs	r0, #255	; 0xff
 8001264:	f7ff fe48 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x44); // setting X direction start/end position of RAM
 8001268:	2044      	movs	r0, #68	; 0x44
 800126a:	f7ff fe27 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fe42 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fe3f 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x17);
 800127a:	2017      	movs	r0, #23
 800127c:	f7ff fe3c 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fe39 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x45); // setting Y direction start/end position of RAM
 8001286:	2045      	movs	r0, #69	; 0x45
 8001288:	f7ff fe18 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe33 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fe30 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xDF);
 8001298:	20df      	movs	r0, #223	; 0xdf
 800129a:	f7ff fe2d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fe2a 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x22); // Display Update Control 2
 80012a4:	2022      	movs	r0, #34	; 0x22
 80012a6:	f7ff fe09 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xCF);
 80012aa:	20cf      	movs	r0, #207	; 0xcf
 80012ac:	f7ff fe24 	bl	8000ef8 <Screen_SendData>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <Screen_4Gray_Clear>:
    Screen_ReadBusy_HIGH();
}


void Screen_4Gray_Clear(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (SCREEN_WIDTH % 8 == 0)? (SCREEN_WIDTH / 8 ): (SCREEN_WIDTH / 8 + 1);
 80012ba:	2323      	movs	r3, #35	; 0x23
 80012bc:	80fb      	strh	r3, [r7, #6]
    Height = SCREEN_HEIGHT;
 80012be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80012c2:	80bb      	strh	r3, [r7, #4]

    Screen_SendCommand(0x49);
 80012c4:	2049      	movs	r0, #73	; 0x49
 80012c6:	f7ff fdf9 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fe14 	bl	8000ef8 <Screen_SendData>
    Screen_SendCommand(0x4E);
 80012d0:	204e      	movs	r0, #78	; 0x4e
 80012d2:	f7ff fdf3 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fe0e 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fe0b 	bl	8000ef8 <Screen_SendData>
    Screen_SendCommand(0x4F);
 80012e2:	204f      	movs	r0, #79	; 0x4f
 80012e4:	f7ff fdea 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fe05 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fe02 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x24);
 80012f4:	2024      	movs	r0, #36	; 0x24
 80012f6:	f7ff fde1 	bl	8000ebc <Screen_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	81fb      	strh	r3, [r7, #14]
 80012fe:	e00f      	b.n	8001320 <Screen_4Gray_Clear+0x6c>
       for (UWORD i = 0; i < Width; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	81bb      	strh	r3, [r7, #12]
 8001304:	e005      	b.n	8001312 <Screen_4Gray_Clear+0x5e>
           Screen_SendData(0xff);
 8001306:	20ff      	movs	r0, #255	; 0xff
 8001308:	f7ff fdf6 	bl	8000ef8 <Screen_SendData>
       for (UWORD i = 0; i < Width; i++) {
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	89ba      	ldrh	r2, [r7, #12]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3f5      	bcc.n	8001306 <Screen_4Gray_Clear+0x52>
    for (UWORD j = 0; j < Height; j++) {
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	3301      	adds	r3, #1
 800131e:	81fb      	strh	r3, [r7, #14]
 8001320:	89fa      	ldrh	r2, [r7, #14]
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3eb      	bcc.n	8001300 <Screen_4Gray_Clear+0x4c>
       }
    }

    Screen_SendCommand(0x4E);
 8001328:	204e      	movs	r0, #78	; 0x4e
 800132a:	f7ff fdc7 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fde2 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fddf 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x4F);
 800133a:	204f      	movs	r0, #79	; 0x4f
 800133c:	f7ff fdbe 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fdd9 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fdd6 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x26);
 800134c:	2026      	movs	r0, #38	; 0x26
 800134e:	f7ff fdb5 	bl	8000ebc <Screen_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001352:	2300      	movs	r3, #0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	e00f      	b.n	8001378 <Screen_4Gray_Clear+0xc4>
       for (UWORD i = 0; i < Width; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	813b      	strh	r3, [r7, #8]
 800135c:	e005      	b.n	800136a <Screen_4Gray_Clear+0xb6>
           Screen_SendData(0xff);
 800135e:	20ff      	movs	r0, #255	; 0xff
 8001360:	f7ff fdca 	bl	8000ef8 <Screen_SendData>
       for (UWORD i = 0; i < Width; i++) {
 8001364:	893b      	ldrh	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	813b      	strh	r3, [r7, #8]
 800136a:	893a      	ldrh	r2, [r7, #8]
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3f5      	bcc.n	800135e <Screen_4Gray_Clear+0xaa>
    for (UWORD j = 0; j < Height; j++) {
 8001372:	897b      	ldrh	r3, [r7, #10]
 8001374:	3301      	adds	r3, #1
 8001376:	817b      	strh	r3, [r7, #10]
 8001378:	897a      	ldrh	r2, [r7, #10]
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3eb      	bcc.n	8001358 <Screen_4Gray_Clear+0xa4>
       }
    }

    Screen_Load_LUT(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fdf7 	bl	8000f74 <Screen_Load_LUT>
    Screen_SendCommand(0x22);
 8001386:	2022      	movs	r0, #34	; 0x22
 8001388:	f7ff fd98 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xC7);
 800138c:	20c7      	movs	r0, #199	; 0xc7
 800138e:	f7ff fdb3 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x20);
 8001392:	2020      	movs	r0, #32
 8001394:	f7ff fd92 	bl	8000ebc <Screen_SendCommand>
    Screen_ReadBusy_HIGH();
 8001398:	f7ff fdcc 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <Screen_1Gray_Clear>:
/******************************************************************************
function :  Clear screen
parameter:
******************************************************************************/
void Screen_1Gray_Clear(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  UWORD i;
  UWORD IMAGE_COUNTER = SCREEN_WIDTH * SCREEN_HEIGHT / 8;
 80013aa:	f244 13a0 	movw	r3, #16800	; 0x41a0
 80013ae:	80bb      	strh	r3, [r7, #4]

  Screen_SendCommand(0x4E);
 80013b0:	204e      	movs	r0, #78	; 0x4e
 80013b2:	f7ff fd83 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fd9e 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fd9b 	bl	8000ef8 <Screen_SendData>
  Screen_SendCommand(0x4F);
 80013c2:	204f      	movs	r0, #79	; 0x4f
 80013c4:	f7ff fd7a 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fd95 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fd92 	bl	8000ef8 <Screen_SendData>

  Screen_SendCommand(0x24);
 80013d4:	2024      	movs	r0, #36	; 0x24
 80013d6:	f7ff fd71 	bl	8000ebc <Screen_SendCommand>
  for (i = 0; i < IMAGE_COUNTER; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	80fb      	strh	r3, [r7, #6]
 80013de:	e005      	b.n	80013ec <Screen_1Gray_Clear+0x48>
  {
    Screen_SendData(0xff);
 80013e0:	20ff      	movs	r0, #255	; 0xff
 80013e2:	f7ff fd89 	bl	8000ef8 <Screen_SendData>
  for (i = 0; i < IMAGE_COUNTER; i++)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	3301      	adds	r3, #1
 80013ea:	80fb      	strh	r3, [r7, #6]
 80013ec:	88fa      	ldrh	r2, [r7, #6]
 80013ee:	88bb      	ldrh	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3f5      	bcc.n	80013e0 <Screen_1Gray_Clear+0x3c>
  }

  Screen_Load_LUT(2);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f7ff fdbd 	bl	8000f74 <Screen_Load_LUT>

  Screen_SendCommand(0x20);
 80013fa:	2020      	movs	r0, #32
 80013fc:	f7ff fd5e 	bl	8000ebc <Screen_SendCommand>
  Screen_ReadBusy_HIGH();
 8001400:	f7ff fd98 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <Screen_4Gray_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void Screen_4Gray_Display(const UBYTE *Image)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    UDOUBLE i,j,k;
    UBYTE temp1,temp2,temp3;

    Screen_SendCommand(0x49);
 8001414:	2049      	movs	r0, #73	; 0x49
 8001416:	f7ff fd51 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fd6c 	bl	8000ef8 <Screen_SendData>


    Screen_SendCommand(0x4E);
 8001420:	204e      	movs	r0, #78	; 0x4e
 8001422:	f7ff fd4b 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fd66 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fd63 	bl	8000ef8 <Screen_SendData>


    Screen_SendCommand(0x4F);
 8001432:	204f      	movs	r0, #79	; 0x4f
 8001434:	f7ff fd42 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fd5d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fd5a 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x24);
 8001444:	2024      	movs	r0, #36	; 0x24
 8001446:	f7ff fd39 	bl	8000ebc <Screen_SendCommand>
    for(i=0;i<16800;i++){
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e060      	b.n	8001512 <Screen_4Gray_Display+0x106>
        temp3=0;
 8001450:	2300      	movs	r3, #0
 8001452:	72bb      	strb	r3, [r7, #10]
        for(j=0; j<2; j++) {
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e051      	b.n	80014fe <Screen_4Gray_Display+0xf2>
            temp1 = Image[i*2+j];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005a      	lsls	r2, r3, #1
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e040      	b.n	80014f2 <Screen_4Gray_Display+0xe6>
                temp2 = temp1&0xC0;
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001476:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)
 8001478:	7a7b      	ldrb	r3, [r7, #9]
 800147a:	2bc0      	cmp	r3, #192	; 0xc0
 800147c:	d104      	bne.n	8001488 <Screen_4Gray_Display+0x7c>
                    temp3 |= 0x01;//white
 800147e:	7abb      	ldrb	r3, [r7, #10]
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	72bb      	strb	r3, [r7, #10]
 8001486:	e009      	b.n	800149c <Screen_4Gray_Display+0x90>
                else if(temp2 == 0x00)
 8001488:	7a7b      	ldrb	r3, [r7, #9]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <Screen_4Gray_Display+0x90>
                    temp3 |= 0x00;  //black
                else if(temp2 == 0x80)
 800148e:	7a7b      	ldrb	r3, [r7, #9]
 8001490:	2b80      	cmp	r3, #128	; 0x80
 8001492:	d003      	beq.n	800149c <Screen_4Gray_Display+0x90>
                    temp3 |= 0x00;  //gray1
                else //0x40
                    temp3 |= 0x01; //gray2
 8001494:	7abb      	ldrb	r3, [r7, #10]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	72bb      	strb	r3, [r7, #10]
                temp3 <<= 1;
 800149c:	7abb      	ldrb	r3, [r7, #10]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	72fb      	strb	r3, [r7, #11]
                temp2 = temp1&0xC0 ;
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ae:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)  //white
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	2bc0      	cmp	r3, #192	; 0xc0
 80014b4:	d104      	bne.n	80014c0 <Screen_4Gray_Display+0xb4>
                    temp3 |= 0x01;
 80014b6:	7abb      	ldrb	r3, [r7, #10]
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	72bb      	strb	r3, [r7, #10]
 80014be:	e009      	b.n	80014d4 <Screen_4Gray_Display+0xc8>
                else if(temp2 == 0x00) //black
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <Screen_4Gray_Display+0xc8>
                    temp3 |= 0x00;
                else if(temp2 == 0x80)
 80014c6:	7a7b      	ldrb	r3, [r7, #9]
 80014c8:	2b80      	cmp	r3, #128	; 0x80
 80014ca:	d003      	beq.n	80014d4 <Screen_4Gray_Display+0xc8>
                    temp3 |= 0x00; //gray1
                else    //0x40
                    temp3 |= 0x01;	//gray2
 80014cc:	7abb      	ldrb	r3, [r7, #10]
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	72bb      	strb	r3, [r7, #10]
                if(j!=1 || k!=1)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <Screen_4Gray_Display+0xd4>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d002      	beq.n	80014e6 <Screen_4Gray_Display+0xda>
                    temp3 <<= 1;
 80014e0:	7abb      	ldrb	r3, [r7, #10]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 80014e6:	7afb      	ldrb	r3, [r7, #11]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d9bb      	bls.n	8001470 <Screen_4Gray_Display+0x64>
        for(j=0; j<2; j++) {
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	3301      	adds	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d9aa      	bls.n	800145a <Screen_4Gray_Display+0x4e>
            }

        }
        Screen_SendData(temp3);
 8001504:	7abb      	ldrb	r3, [r7, #10]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fcf6 	bl	8000ef8 <Screen_SendData>
    for(i=0;i<16800;i++){
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f244 129f 	movw	r2, #16799	; 0x419f
 8001518:	4293      	cmp	r3, r2
 800151a:	d999      	bls.n	8001450 <Screen_4Gray_Display+0x44>
    }
    // new  data
    Screen_SendCommand(0x4E);
 800151c:	204e      	movs	r0, #78	; 0x4e
 800151e:	f7ff fccd 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fce8 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fce5 	bl	8000ef8 <Screen_SendData>


    Screen_SendCommand(0x4F);
 800152e:	204f      	movs	r0, #79	; 0x4f
 8001530:	f7ff fcc4 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fcdf 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fcdc 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x26);
 8001540:	2026      	movs	r0, #38	; 0x26
 8001542:	f7ff fcbb 	bl	8000ebc <Screen_SendCommand>
    for(i=0; i<16800; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e060      	b.n	800160e <Screen_4Gray_Display+0x202>
        temp3=0;
 800154c:	2300      	movs	r3, #0
 800154e:	72bb      	strb	r3, [r7, #10]
        for(j=0; j<2; j++) {
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	e051      	b.n	80015fa <Screen_4Gray_Display+0x1ee>
            temp1 = Image[i*2+j];
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4413      	add	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e040      	b.n	80015ee <Screen_4Gray_Display+0x1e2>
                temp2 = temp1&0xC0 ;
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001572:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	2bc0      	cmp	r3, #192	; 0xc0
 8001578:	d104      	bne.n	8001584 <Screen_4Gray_Display+0x178>
                    temp3 |= 0x01;//white
 800157a:	7abb      	ldrb	r3, [r7, #10]
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	72bb      	strb	r3, [r7, #10]
 8001582:	e009      	b.n	8001598 <Screen_4Gray_Display+0x18c>
                else if(temp2 == 0x00)
 8001584:	7a7b      	ldrb	r3, [r7, #9]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <Screen_4Gray_Display+0x18c>
                    temp3 |= 0x00;  //black
                else if(temp2 == 0x80)
 800158a:	7a7b      	ldrb	r3, [r7, #9]
 800158c:	2b80      	cmp	r3, #128	; 0x80
 800158e:	d103      	bne.n	8001598 <Screen_4Gray_Display+0x18c>
                    temp3 |= 0x01;  //gray1
 8001590:	7abb      	ldrb	r3, [r7, #10]
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	72bb      	strb	r3, [r7, #10]
                else //0x40
                    temp3 |= 0x00; //gray2
                temp3 <<= 1;
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	72fb      	strb	r3, [r7, #11]
                temp2 = temp1&0xC0 ;
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015aa:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)  //white
 80015ac:	7a7b      	ldrb	r3, [r7, #9]
 80015ae:	2bc0      	cmp	r3, #192	; 0xc0
 80015b0:	d104      	bne.n	80015bc <Screen_4Gray_Display+0x1b0>
                    temp3 |= 0x01;
 80015b2:	7abb      	ldrb	r3, [r7, #10]
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	72bb      	strb	r3, [r7, #10]
 80015ba:	e009      	b.n	80015d0 <Screen_4Gray_Display+0x1c4>
                else if(temp2 == 0x00) //black
 80015bc:	7a7b      	ldrb	r3, [r7, #9]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <Screen_4Gray_Display+0x1c4>
                    temp3 |= 0x00;
                else if(temp2 == 0x80)
 80015c2:	7a7b      	ldrb	r3, [r7, #9]
 80015c4:	2b80      	cmp	r3, #128	; 0x80
 80015c6:	d103      	bne.n	80015d0 <Screen_4Gray_Display+0x1c4>
                    temp3 |= 0x01; //gray1
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	72bb      	strb	r3, [r7, #10]
                else    //0x40
                    temp3 |= 0x00;	//gray2
                if(j!=1 || k!=1)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <Screen_4Gray_Display+0x1d0>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d002      	beq.n	80015e2 <Screen_4Gray_Display+0x1d6>
                    temp3 <<= 1;
 80015dc:	7abb      	ldrb	r3, [r7, #10]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d9bb      	bls.n	800156c <Screen_4Gray_Display+0x160>
        for(j=0; j<2; j++) {
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	3301      	adds	r3, #1
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d9aa      	bls.n	8001556 <Screen_4Gray_Display+0x14a>
            }
        }
        Screen_SendData(temp3);
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc78 	bl	8000ef8 <Screen_SendData>
    for(i=0; i<16800; i++) {
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f244 129f 	movw	r2, #16799	; 0x419f
 8001614:	4293      	cmp	r3, r2
 8001616:	d999      	bls.n	800154c <Screen_4Gray_Display+0x140>
    }

    Screen_Load_LUT(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fcab 	bl	8000f74 <Screen_Load_LUT>

    Screen_SendCommand(0x22);
 800161e:	2022      	movs	r0, #34	; 0x22
 8001620:	f7ff fc4c 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xC7);
 8001624:	20c7      	movs	r0, #199	; 0xc7
 8001626:	f7ff fc67 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x20);
 800162a:	2020      	movs	r0, #32
 800162c:	f7ff fc46 	bl	8000ebc <Screen_SendCommand>

    Screen_ReadBusy_HIGH();
 8001630:	f7ff fc80 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <Screen_1Gray_Display>:
/******************************************************************************
function :  Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void Screen_1Gray_Display(const UBYTE *Image)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UWORD i;
  UWORD IMAGE_COUNTER = SCREEN_WIDTH * SCREEN_HEIGHT / 8;
 8001644:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8001648:	81bb      	strh	r3, [r7, #12]

  Screen_SendCommand(0x4E);
 800164a:	204e      	movs	r0, #78	; 0x4e
 800164c:	f7ff fc36 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fc51 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fc4e 	bl	8000ef8 <Screen_SendData>
  Screen_SendCommand(0x4F);
 800165c:	204f      	movs	r0, #79	; 0x4f
 800165e:	f7ff fc2d 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fc48 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fc45 	bl	8000ef8 <Screen_SendData>

  Screen_SendCommand(0x24);
 800166e:	2024      	movs	r0, #36	; 0x24
 8001670:	f7ff fc24 	bl	8000ebc <Screen_SendCommand>
  for (i = 0; i < IMAGE_COUNTER; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	81fb      	strh	r3, [r7, #14]
 8001678:	e009      	b.n	800168e <Screen_1Gray_Display+0x52>
  {
    Screen_SendData(Image[i]);
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fc38 	bl	8000ef8 <Screen_SendData>
  for (i = 0; i < IMAGE_COUNTER; i++)
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	3301      	adds	r3, #1
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	89fa      	ldrh	r2, [r7, #14]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3f1      	bcc.n	800167a <Screen_1Gray_Display+0x3e>
  }

  Screen_Load_LUT(2);
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fc6c 	bl	8000f74 <Screen_Load_LUT>
  Screen_SendCommand(0x20);
 800169c:	2020      	movs	r0, #32
 800169e:	f7ff fc0d 	bl	8000ebc <Screen_SendCommand>
  Screen_ReadBusy_HIGH();
 80016a2:	f7ff fc47 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <Screen_WriteByte>:
#include "stm32f2xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;

void Screen_WriteByte(UBYTE value)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = value;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80016be:	f107 010f 	add.w	r1, r7, #15
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	2201      	movs	r2, #1
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <Screen_WriteByte+0x28>)
 80016ca:	f001 fc74 	bl	8002fb6 <HAL_SPI_Transmit>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000dc 	.word	0x200000dc

080016dc <Screen_Digital_Write>:

void Screen_Digital_Write(uint16_t pin, GPIO_TypeDef* port, uint8_t value) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
 80016e8:	4613      	mov	r3, r2
 80016ea:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(port, pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4619      	mov	r1, r3
 80016fe:	6838      	ldr	r0, [r7, #0]
 8001700:	f000 ff9f 	bl	8002642 <HAL_GPIO_WritePin>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Screen_Digital_Read>:

uint8_t Screen_Digital_Read(uint16_t pin, GPIO_TypeDef* port) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(port, pin);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4619      	mov	r1, r3
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f000 ff79 	bl	8002614 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <Screen_Init>:

int Screen_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <Screen_Init+0x28>)
 8001734:	2040      	movs	r0, #64	; 0x40
 8001736:	f7ff ffd1 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	4905      	ldr	r1, [pc, #20]	; (8001754 <Screen_Init+0x28>)
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff ffcc 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	4904      	ldr	r1, [pc, #16]	; (8001758 <Screen_Init+0x2c>)
 8001748:	2010      	movs	r0, #16
 800174a:	f7ff ffc7 	bl	80016dc <Screen_Digital_Write>
	return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020000 	.word	0x40020000
 8001758:	40020800 	.word	0x40020800

0800175c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f000 fb47 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f84b 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 f8f9 	bl	8001960 <MX_GPIO_Init>
  MX_SPI1_Init();
 800176e:	f000 f8c1 	bl	80018f4 <MX_SPI1_Init>
  MX_CAN1_Init();
 8001772:	f000 f889 	bl	8001888 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	// Initialise the screen
	if (Screen_Init() != 0) {
 8001776:	f7ff ffd9 	bl	800172c <Screen_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <main+0x2e>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001784:	481c      	ldr	r0, [pc, #112]	; (80017f8 <main+0x9c>)
 8001786:	f000 ff74 	bl	8002672 <HAL_GPIO_TogglePin>
	}
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UBYTE *Canvas = Canvas_Init();
 800178a:	f7ff fa95 	bl	8000cb8 <Canvas_Init>
 800178e:	60f8      	str	r0, [r7, #12]
	UBYTE *CountScreen = Canvas_Init();
 8001790:	f7ff fa92 	bl	8000cb8 <Canvas_Init>
 8001794:	60b8      	str	r0, [r7, #8]

	Screen_Static_Init(Canvas);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fa44 	bl	8000c24 <Screen_Static_Init>

	Screen_Startup(Canvas);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff faa1 	bl	8000ce4 <Screen_Startup>
	free(Canvas);
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f001 fe1c 	bl	80033e0 <free>

	HAL_Delay(5000);
 80017a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80017ac:	f000 fb90 	bl	8001ed0 <HAL_Delay>
	Screen_Dynamic_Init(CountScreen);
 80017b0:	68b8      	ldr	r0, [r7, #8]
 80017b2:	f7ff fa5c 	bl	8000c6e <Screen_Dynamic_Init>
	int8_t VCU_STATES[5] = { 0, 2, 3, 4, 5 };
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <main+0xa0>)
 80017b8:	463b      	mov	r3, r7
 80017ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017be:	6018      	str	r0, [r3, #0]
 80017c0:	3304      	adds	r3, #4
 80017c2:	7019      	strb	r1, [r3, #0]
		 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		 HAL_Delay(1000);
		 Screen_1Gray_Clear();
		 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		 */
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80017c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <main+0x9c>)
 80017ca:	f000 ff52 	bl	8002672 <HAL_GPIO_TogglePin>
		Dynamic_Counter(CountScreen, VCU_STATES);
 80017ce:	463b      	mov	r3, r7
 80017d0:	4619      	mov	r1, r3
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f7ff fadc 	bl	8000d90 <Dynamic_Counter>
		if (VCU_STATES[0] < 15) {
 80017d8:	f997 3000 	ldrsb.w	r3, [r7]
 80017dc:	2b0e      	cmp	r3, #14
 80017de:	dc07      	bgt.n	80017f0 <main+0x94>
			VCU_STATES[0]++;
 80017e0:	f997 3000 	ldrsb.w	r3, [r7]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	703b      	strb	r3, [r7, #0]
 80017ee:	e7e9      	b.n	80017c4 <main+0x68>
		} else {
			VCU_STATES[0] = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	703b      	strb	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80017f4:	e7e6      	b.n	80017c4 <main+0x68>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08004934 	.word	0x08004934

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b092      	sub	sp, #72	; 0x48
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	2230      	movs	r2, #48	; 0x30
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f001 fdee 	bl	80033f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182a:	2302      	movs	r3, #2
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800182e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001832:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001834:	2319      	movs	r3, #25
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001838:	23c0      	movs	r3, #192	; 0xc0
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800183c:	2306      	movs	r3, #6
 800183e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001840:	2304      	movs	r3, #4
 8001842:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	4618      	mov	r0, r3
 800184a:	f000 ff2b 	bl	80026a4 <HAL_RCC_OscConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001854:	f000 f91c 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	230f      	movs	r3, #15
 800185a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185c:	2302      	movs	r3, #2
 800185e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f001 f965 	bl	8002b40 <HAL_RCC_ClockConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800187c:	f000 f908 	bl	8001a90 <Error_Handler>
  }
}
 8001880:	bf00      	nop
 8001882:	3748      	adds	r7, #72	; 0x48
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_CAN1_Init+0x64>)
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <MX_CAN1_Init+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_CAN1_Init+0x64>)
 8001894:	2202      	movs	r2, #2
 8001896:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_CAN1_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_CAN1_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_CAN1_Init+0x64>)
 80018a6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80018aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_CAN1_Init+0x64>)
 80018ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_CAN1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_CAN1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_CAN1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_CAN1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_CAN1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_CAN1_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_CAN1_Init+0x64>)
 80018da:	f000 fb1d 	bl	8001f18 <HAL_CAN_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80018e4:	f000 f8d4 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200000b4 	.word	0x200000b4
 80018f0:	40006400 	.word	0x40006400

080018f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <MX_SPI1_Init+0x64>)
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <MX_SPI1_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_SPI1_Init+0x64>)
 8001900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_SPI1_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_SPI1_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_SPI1_Init+0x64>)
 8001914:	2202      	movs	r2, #2
 8001916:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_SPI1_Init+0x64>)
 800191a:	2201      	movs	r2, #1
 800191c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_SPI1_Init+0x64>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_SPI1_Init+0x64>)
 8001928:	2210      	movs	r2, #16
 800192a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <MX_SPI1_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_SPI1_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <MX_SPI1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_SPI1_Init+0x64>)
 8001940:	220a      	movs	r2, #10
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	; (8001958 <MX_SPI1_Init+0x64>)
 8001946:	f001 faad 	bl	8002ea4 <HAL_SPI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001950:	f000 f89e 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200000dc 	.word	0x200000dc
 800195c:	40013000 	.word	0x40013000

08001960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <MX_GPIO_Init+0x120>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a40      	ldr	r2, [pc, #256]	; (8001a80 <MX_GPIO_Init+0x120>)
 8001980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <MX_GPIO_Init+0x120>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <MX_GPIO_Init+0x120>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <MX_GPIO_Init+0x120>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a24      	ldr	r2, [pc, #144]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <MX_GPIO_Init+0x120>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SBUSY_Pin|SCS_Pin|SDC_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2158      	movs	r1, #88	; 0x58
 8001a06:	481f      	ldr	r0, [pc, #124]	; (8001a84 <MX_GPIO_Init+0x124>)
 8001a08:	f000 fe1b 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SRST_GPIO_Port, SRST_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	481d      	ldr	r0, [pc, #116]	; (8001a88 <MX_GPIO_Init+0x128>)
 8001a12:	f000 fe16 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001a1c:	481b      	ldr	r0, [pc, #108]	; (8001a8c <MX_GPIO_Init+0x12c>)
 8001a1e:	f000 fe10 	bl	8002642 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SBUSY_Pin SCS_Pin SDC_Pin */
  GPIO_InitStruct.Pin = SBUSY_Pin|SCS_Pin|SDC_Pin;
 8001a22:	2358      	movs	r3, #88	; 0x58
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4812      	ldr	r0, [pc, #72]	; (8001a84 <MX_GPIO_Init+0x124>)
 8001a3a:	f000 fc4d 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SRST_Pin */
  GPIO_InitStruct.Pin = SRST_Pin;
 8001a3e:	2310      	movs	r3, #16
 8001a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SRST_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_GPIO_Init+0x128>)
 8001a56:	f000 fc3f 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001a5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_GPIO_Init+0x12c>)
 8001a74:	f000 fc30 	bl	80022d8 <HAL_GPIO_Init>

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40021000 	.word	0x40021000

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a98:	e7fe      	b.n	8001a98 <Error_Handler+0x8>
	...

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x48>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <HAL_MspInit+0x48>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_MspInit+0x48>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_MspInit+0x48>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_MspInit+0x48>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_MspInit+0x48>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_CAN_MspInit+0x84>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12c      	bne.n	8001b64 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_CAN_MspInit+0x88>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_CAN_MspInit+0x88>)
 8001b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_CAN_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_CAN_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_CAN_MspInit+0x88>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_CAN_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b54:	2309      	movs	r3, #9
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_CAN_MspInit+0x8c>)
 8001b60:	f000 fbba 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40006400 	.word	0x40006400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400

08001b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_SPI_MspInit+0x84>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d12b      	bne.n	8001bf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bd2:	23a0      	movs	r3, #160	; 0xa0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be2:	2305      	movs	r3, #5
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <HAL_SPI_MspInit+0x8c>)
 8001bee:	f000 fb73 	bl	80022d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40013000 	.word	0x40013000
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020000 	.word	0x40020000

08001c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <NMI_Handler+0x4>

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4e:	f000 f923 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e00a      	b.n	8001c7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c68:	f3af 8000 	nop.w
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	60ba      	str	r2, [r7, #8]
 8001c74:	b2ca      	uxtb	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf0      	blt.n	8001c68 <_read+0x12>
	}

return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e009      	b.n	8001cb6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf1      	blt.n	8001ca2 <_write+0x12>
	}
	return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_close>:

int _close(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cee:	605a      	str	r2, [r3, #4]
	return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <_isatty>:

int _isatty(int file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	return 1;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f001 fb10 	bl	800337c <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20020000 	.word	0x20020000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	20000134 	.word	0x20000134
 8001d90:	20000150 	.word	0x20000150

08001d94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001da6:	490e      	ldr	r1, [pc, #56]	; (8001de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dac:	e002      	b.n	8001db4 <LoopCopyDataInit>

08001dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db2:	3304      	adds	r3, #4

08001db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db8:	d3f9      	bcc.n	8001dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dbc:	4c0b      	ldr	r4, [pc, #44]	; (8001dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc0:	e001      	b.n	8001dc6 <LoopFillZerobss>

08001dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc4:	3204      	adds	r2, #4

08001dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc8:	d3fb      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dca:	f7ff ffe3 	bl	8001d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f001 fadb 	bl	8003388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7ff fcc3 	bl	800175c <main>
  bx  lr
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001de4:	08007534 	.word	0x08007534
  ldr r2, =_sbss
 8001de8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001dec:	2000014c 	.word	0x2000014c

08001df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <HAL_Init+0x40>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_Init+0x40>)
 8001e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_Init+0x40>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 fa27 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	200f      	movs	r0, #15
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fe38 	bl	8001a9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fa31 	bl	80022be <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 fa07 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000018 	.word	0x20000018
 8001e94:	20000014 	.word	0x20000014

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000018 	.word	0x20000018
 8001eb8:	20000138 	.word	0x20000138

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000138 	.word	0x20000138

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffe0 	bl	8001ebc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000018 	.word	0x20000018

08001f18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0ed      	b.n	8002106 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fdd6 	bl	8001ae8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f4c:	f7ff ffb6 	bl	8001ebc <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f52:	e012      	b.n	8001f7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f54:	f7ff ffb2 	bl	8001ebc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b0a      	cmp	r3, #10
 8001f60:	d90b      	bls.n	8001f7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2205      	movs	r2, #5
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0c5      	b.n	8002106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0e5      	beq.n	8001f54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0202 	bic.w	r2, r2, #2
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f98:	f7ff ff90 	bl	8001ebc <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f9e:	e012      	b.n	8001fc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa0:	f7ff ff8c 	bl	8001ebc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b0a      	cmp	r3, #10
 8001fac:	d90b      	bls.n	8001fc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2205      	movs	r2, #5
 8001fbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e09f      	b.n	8002106 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e5      	bne.n	8001fa0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7e1b      	ldrb	r3, [r3, #24]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e007      	b.n	8001ffe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7e5b      	ldrb	r3, [r3, #25]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d108      	bne.n	8002018 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e007      	b.n	8002028 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002026:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7e9b      	ldrb	r3, [r3, #26]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e007      	b.n	8002052 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0220 	bic.w	r2, r2, #32
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7edb      	ldrb	r3, [r3, #27]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d108      	bne.n	800206c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0210 	bic.w	r2, r2, #16
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0210 	orr.w	r2, r2, #16
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7f1b      	ldrb	r3, [r3, #28]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0208 	orr.w	r2, r2, #8
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e007      	b.n	80020a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7f5b      	ldrb	r3, [r3, #29]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d108      	bne.n	80020c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0204 	orr.w	r2, r2, #4
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e007      	b.n	80020d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff90 	bl	8002174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff49 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff5e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff90 	bl	80021c8 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5f 	bl	8002174 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffb0 	bl	800222c <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e6:	e16f      	b.n	80025c8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	4013      	ands	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8161 	beq.w	80025c2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d005      	beq.n	8002318 <HAL_GPIO_Init+0x40>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d130      	bne.n	800237a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800234e:	2201      	movs	r2, #1
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	f003 0201 	and.w	r2, r3, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b03      	cmp	r3, #3
 8002384:	d017      	beq.n	80023b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d123      	bne.n	800240a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	08da      	lsrs	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3208      	adds	r2, #8
 80023ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	2203      	movs	r2, #3
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0203 	and.w	r2, r3, #3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80bb 	beq.w	80025c2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	4a63      	ldr	r2, [pc, #396]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 8002456:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245a:	6453      	str	r3, [r2, #68]	; 0x44
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_GPIO_Init+0x30c>)
 800245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002468:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <HAL_GPIO_Init+0x310>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	220f      	movs	r2, #15
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x314>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d031      	beq.n	80024f8 <HAL_GPIO_Init+0x220>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a56      	ldr	r2, [pc, #344]	; (80025f0 <HAL_GPIO_Init+0x318>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d02b      	beq.n	80024f4 <HAL_GPIO_Init+0x21c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a55      	ldr	r2, [pc, #340]	; (80025f4 <HAL_GPIO_Init+0x31c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d025      	beq.n	80024f0 <HAL_GPIO_Init+0x218>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x320>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d01f      	beq.n	80024ec <HAL_GPIO_Init+0x214>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a53      	ldr	r2, [pc, #332]	; (80025fc <HAL_GPIO_Init+0x324>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d019      	beq.n	80024e8 <HAL_GPIO_Init+0x210>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x328>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <HAL_GPIO_Init+0x20c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_GPIO_Init+0x32c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d00d      	beq.n	80024e0 <HAL_GPIO_Init+0x208>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x330>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d007      	beq.n	80024dc <HAL_GPIO_Init+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4f      	ldr	r2, [pc, #316]	; (800260c <HAL_GPIO_Init+0x334>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_GPIO_Init+0x200>
 80024d4:	2308      	movs	r3, #8
 80024d6:	e010      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024d8:	2309      	movs	r3, #9
 80024da:	e00e      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024dc:	2307      	movs	r3, #7
 80024de:	e00c      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e0:	2306      	movs	r3, #6
 80024e2:	e00a      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e4:	2305      	movs	r3, #5
 80024e6:	e008      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024ec:	2303      	movs	r3, #3
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x222>
 80024f8:	2300      	movs	r3, #0
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800250c:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_GPIO_Init+0x310>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_GPIO_Init+0x338>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800253e:	4a34      	ldr	r2, [pc, #208]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002568:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_GPIO_Init+0x338>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002592:	4a1f      	ldr	r2, [pc, #124]	; (8002610 <HAL_GPIO_Init+0x338>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_GPIO_Init+0x338>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025bc:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_GPIO_Init+0x338>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f ae88 	bne.w	80022e8 <HAL_GPIO_Init+0x10>
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40021400 	.word	0x40021400
 8002604:	40021800 	.word	0x40021800
 8002608:	40021c00 	.word	0x40021c00
 800260c:	40022000 	.word	0x40022000
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	807b      	strh	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002652:	787b      	ldrb	r3, [r7, #1]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002658:	887a      	ldrh	r2, [r7, #2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800265e:	e003      	b.n	8002668 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002684:	887a      	ldrh	r2, [r7, #2]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4013      	ands	r3, r2
 800268a:	041a      	lsls	r2, r3, #16
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43d9      	mvns	r1, r3
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	400b      	ands	r3, r1
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e236      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d050      	beq.n	8002764 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c2:	4b9e      	ldr	r3, [pc, #632]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d00c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ce:	4b9b      	ldr	r3, [pc, #620]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d112      	bne.n	8002700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026da:	4b98      	ldr	r3, [pc, #608]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e6:	d10b      	bne.n	8002700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4b94      	ldr	r3, [pc, #592]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d036      	beq.n	8002762 <HAL_RCC_OscConfig+0xbe>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d132      	bne.n	8002762 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e211      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4b8e      	ldr	r3, [pc, #568]	; (8002940 <HAL_RCC_OscConfig+0x29c>)
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7ff fbd3 	bl	8001ebc <HAL_GetTick>
 8002716:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271a:	f7ff fbcf 	bl	8001ebc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1fb      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	4b83      	ldr	r3, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x298>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x76>
 8002738:	e014      	b.n	8002764 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7ff fbbf 	bl	8001ebc <HAL_GetTick>
 800273e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002742:	f7ff fbbb 	bl	8001ebc <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1e7      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002754:	4b79      	ldr	r3, [pc, #484]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x9e>
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d077      	beq.n	8002860 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002770:	4b72      	ldr	r3, [pc, #456]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_OscConfig+0x298>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002784:	2b08      	cmp	r3, #8
 8002786:	d126      	bne.n	80027d6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002788:	4b6c      	ldr	r3, [pc, #432]	; (800293c <HAL_RCC_OscConfig+0x298>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d120      	bne.n	80027d6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002794:	4b69      	ldr	r3, [pc, #420]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_OscConfig+0x108>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e1bb      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	21f8      	movs	r1, #248	; 0xf8
 80027ba:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	69b9      	ldr	r1, [r7, #24]
 80027be:	fa91 f1a1 	rbit	r1, r1
 80027c2:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027c4:	6979      	ldr	r1, [r7, #20]
 80027c6:	fab1 f181 	clz	r1, r1
 80027ca:	b2c9      	uxtb	r1, r1
 80027cc:	408b      	lsls	r3, r1
 80027ce:	495b      	ldr	r1, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d4:	e044      	b.n	8002860 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02a      	beq.n	8002834 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_OscConfig+0x2a0>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff fb6a 	bl	8001ebc <HAL_GetTick>
 80027e8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7ff fb66 	bl	8001ebc <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e192      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fe:	4b4f      	ldr	r3, [pc, #316]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <HAL_RCC_OscConfig+0x298>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	21f8      	movs	r1, #248	; 0xf8
 8002818:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	6939      	ldr	r1, [r7, #16]
 800281c:	fa91 f1a1 	rbit	r1, r1
 8002820:	60f9      	str	r1, [r7, #12]
  return result;
 8002822:	68f9      	ldr	r1, [r7, #12]
 8002824:	fab1 f181 	clz	r1, r1
 8002828:	b2c9      	uxtb	r1, r1
 800282a:	408b      	lsls	r3, r1
 800282c:	4943      	ldr	r1, [pc, #268]	; (800293c <HAL_RCC_OscConfig+0x298>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
 8002832:	e015      	b.n	8002860 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002834:	4b43      	ldr	r3, [pc, #268]	; (8002944 <HAL_RCC_OscConfig+0x2a0>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7ff fb3f 	bl	8001ebc <HAL_GetTick>
 800283e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002842:	f7ff fb3b 	bl	8001ebc <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e167      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d030      	beq.n	80028ce <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_OscConfig+0x2a4>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7ff fb1f 	bl	8001ebc <HAL_GetTick>
 800287e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002882:	f7ff fb1b 	bl	8001ebc <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e147      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1de>
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_OscConfig+0x2a4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a8:	f7ff fb08 	bl	8001ebc <HAL_GetTick>
 80028ac:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7ff fb04 	bl	8001ebc <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e130      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8087 	beq.w	80029ea <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d110      	bne.n	8002910 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_RCC_OscConfig+0x298>)
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	; 0x40
 80028fe:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_RCC_OscConfig+0x298>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2301      	movs	r3, #1
 800290c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_RCC_OscConfig+0x2a8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x2a8>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_RCC_OscConfig+0x2a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d122      	bne.n	800296e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_RCC_OscConfig+0x2a8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <HAL_RCC_OscConfig+0x2a8>)
 800292e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002934:	f7ff fac2 	bl	8001ebc <HAL_GetTick>
 8002938:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	e012      	b.n	8002962 <HAL_RCC_OscConfig+0x2be>
 800293c:	40023800 	.word	0x40023800
 8002940:	40023802 	.word	0x40023802
 8002944:	42470000 	.word	0x42470000
 8002948:	42470e80 	.word	0x42470e80
 800294c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7ff fab4 	bl	8001ebc <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0e0      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x488>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	4b6f      	ldr	r3, [pc, #444]	; (8002b30 <HAL_RCC_OscConfig+0x48c>)
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7ff fa9c 	bl	8001ebc <HAL_GetTick>
 8002984:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7ff fa98 	bl	8001ebc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e0c2      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0ee      	beq.n	8002988 <HAL_RCC_OscConfig+0x2e4>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ac:	f7ff fa86 	bl	8001ebc <HAL_GetTick>
 80029b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7ff fa82 	bl	8001ebc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0ac      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	4b5a      	ldr	r3, [pc, #360]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ee      	bne.n	80029b4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b55      	ldr	r3, [pc, #340]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 80029e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8097 	beq.w	8002b22 <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d061      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d146      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_OscConfig+0x494>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fa55 	bl	8001ebc <HAL_GetTick>
 8002a12:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a16:	f7ff fa51 	bl	8001ebc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e07d      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f0      	bne.n	8002a16 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a34:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <HAL_RCC_OscConfig+0x498>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	69d1      	ldr	r1, [r2, #28]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6a12      	ldr	r2, [r2, #32]
 8002a44:	4311      	orrs	r1, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
 8002a4c:	4311      	orrs	r1, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a52:	0612      	lsls	r2, r2, #24
 8002a54:	4311      	orrs	r1, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002a5a:	0852      	lsrs	r2, r2, #1
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0412      	lsls	r2, r2, #16
 8002a60:	430a      	orrs	r2, r1
 8002a62:	4934      	ldr	r1, [pc, #208]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_RCC_OscConfig+0x494>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7ff fa25 	bl	8001ebc <HAL_GetTick>
 8002a72:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff fa21 	bl	8001ebc <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e04d      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3d2>
 8002a94:	e045      	b.n	8002b22 <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_OscConfig+0x494>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fa0e 	bl	8001ebc <HAL_GetTick>
 8002aa0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff fa0a 	bl	8001ebc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e036      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x400>
 8002ac2:	e02e      	b.n	8002b22 <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e029      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_RCC_OscConfig+0x490>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d11c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d115      	bne.n	8002b1e <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3728      	adds	r7, #40	; 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	40023870 	.word	0x40023870
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470060 	.word	0x42470060
 8002b3c:	f0bc8000 	.word	0xf0bc8000

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0d2      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d90c      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b66      	ldr	r3, [pc, #408]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0be      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002bac:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a55      	ldr	r2, [pc, #340]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4950      	ldr	r1, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d040      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e085      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf6:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e079      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c06:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e071      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c16:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0203 	bic.w	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4939      	ldr	r1, [pc, #228]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c28:	f7ff f948 	bl	8001ebc <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2e:	e00a      	b.n	8002c46 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7ff f944 	bl	8001ebc <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e059      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 020c 	and.w	r2, r3, #12
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d1eb      	bne.n	8002c30 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d20c      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e03c      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4913      	ldr	r1, [pc, #76]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002cbe:	f000 f82b 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	22f0      	movs	r2, #240	; 0xf0
 8002cce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	fa92 f2a2 	rbit	r2, r2
 8002cd6:	60fa      	str	r2, [r7, #12]
  return result;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	fab2 f282 	clz	r2, r2
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	40d3      	lsrs	r3, r2
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1d0>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1d4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f8a0 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08004aec 	.word	0x08004aec
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000014 	.word	0x20000014

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b090      	sub	sp, #64	; 0x40
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
 8002d24:	2300      	movs	r3, #0
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d28:	2300      	movs	r3, #0
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80a2 	bhi.w	8002e86 <HAL_RCC_GetSysClockFreq+0x16e>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e09c      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d50:	e09c      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d56:	e099      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d027      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	627a      	str	r2, [r7, #36]	; 0x24
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d80:	2100      	movs	r1, #0
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d84:	fb03 f201 	mul.w	r2, r3, r1
 8002d88:	2300      	movs	r3, #0
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	4a43      	ldr	r2, [pc, #268]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d92:	fba0 2102 	umull	r2, r1, r0, r2
 8002d96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002d98:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9c:	4413      	add	r3, r2
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da2:	2200      	movs	r2, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	61fa      	str	r2, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002db0:	f7fd fa08 	bl	80001c4 <__aeabi_uldivmod>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4613      	mov	r3, r2
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbc:	e055      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	099b      	lsrs	r3, r3, #6
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	617a      	str	r2, [r7, #20]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dd0:	f04f 0b00 	mov.w	fp, #0
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	465b      	mov	r3, fp
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0159      	lsls	r1, r3, #5
 8002de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de6:	0150      	lsls	r0, r2, #5
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	ebb2 080a 	subs.w	r8, r2, sl
 8002df0:	eb63 090b 	sbc.w	r9, r3, fp
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e00:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e04:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e08:	ebb2 0408 	subs.w	r4, r2, r8
 8002e0c:	eb63 0509 	sbc.w	r5, r3, r9
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	00eb      	lsls	r3, r5, #3
 8002e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e1e:	00e2      	lsls	r2, r4, #3
 8002e20:	4614      	mov	r4, r2
 8002e22:	461d      	mov	r5, r3
 8002e24:	eb14 030a 	adds.w	r3, r4, sl
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	eb45 030b 	adc.w	r3, r5, fp
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	028b      	lsls	r3, r1, #10
 8002e40:	4620      	mov	r0, r4
 8002e42:	4629      	mov	r1, r5
 8002e44:	4604      	mov	r4, r0
 8002e46:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	028a      	lsls	r2, r1, #10
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e54:	2200      	movs	r2, #0
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	60fa      	str	r2, [r7, #12]
 8002e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5e:	f7fd f9b1 	bl	80001c4 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4613      	mov	r3, r2
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	0c1b      	lsrs	r3, r3, #16
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	3301      	adds	r3, #1
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e84:	e002      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3740      	adds	r7, #64	; 0x40
 8002e92:	46bd      	mov	sp, r7
 8002e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	00f42400 	.word	0x00f42400
 8002ea0:	017d7840 	.word	0x017d7840

08002ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e07b      	b.n	8002fae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ec6:	d009      	beq.n	8002edc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	61da      	str	r2, [r3, #28]
 8002ece:	e005      	b.n	8002edc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fe3e 	bl	8001b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0104 	and.w	r1, r3, #4
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	f003 0210 	and.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69da      	ldr	r2, [r3, #28]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b088      	sub	sp, #32
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_SPI_Transmit+0x22>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e126      	b.n	8003226 <HAL_SPI_Transmit+0x270>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe0:	f7fe ff6c 	bl	8001ebc <HAL_GetTick>
 8002fe4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d002      	beq.n	8002ffc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ffa:	e10b      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x52>
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800300c:	e102      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003054:	d10f      	bne.n	8003076 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003074:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d007      	beq.n	8003094 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309c:	d14b      	bne.n	8003136 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_SPI_Transmit+0xf6>
 80030a6:	8afb      	ldrh	r3, [r7, #22]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d13e      	bne.n	800312a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	1c9a      	adds	r2, r3, #2
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030d0:	e02b      	b.n	800312a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d112      	bne.n	8003106 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	1c9a      	adds	r2, r3, #2
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	86da      	strh	r2, [r3, #54]	; 0x36
 8003104:	e011      	b.n	800312a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003106:	f7fe fed9 	bl	8001ebc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d803      	bhi.n	800311e <HAL_SPI_Transmit+0x168>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d102      	bne.n	8003124 <HAL_SPI_Transmit+0x16e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003128:	e074      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ce      	bne.n	80030d2 <HAL_SPI_Transmit+0x11c>
 8003134:	e04c      	b.n	80031d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_SPI_Transmit+0x18e>
 800313e:	8afb      	ldrh	r3, [r7, #22]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d140      	bne.n	80031c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	330c      	adds	r3, #12
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800316a:	e02c      	b.n	80031c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d113      	bne.n	80031a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	86da      	strh	r2, [r3, #54]	; 0x36
 80031a0:	e011      	b.n	80031c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a2:	f7fe fe8b 	bl	8001ebc <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d803      	bhi.n	80031ba <HAL_SPI_Transmit+0x204>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d102      	bne.n	80031c0 <HAL_SPI_Transmit+0x20a>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031c4:	e026      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1cd      	bne.n	800316c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	6839      	ldr	r1, [r7, #0]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 f8b3 	bl	8003340 <SPI_EndRxTxTransaction>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e000      	b.n	8003214 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003212:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003224:	7ffb      	ldrb	r3, [r7, #31]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003240:	f7fe fe3c 	bl	8001ebc <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	4413      	add	r3, r2
 800324e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003250:	f7fe fe34 	bl	8001ebc <HAL_GetTick>
 8003254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003256:	4b39      	ldr	r3, [pc, #228]	; (800333c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	015b      	lsls	r3, r3, #5
 800325c:	0d1b      	lsrs	r3, r3, #20
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003266:	e054      	b.n	8003312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d050      	beq.n	8003312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003270:	f7fe fe24 	bl	8001ebc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	429a      	cmp	r2, r3
 800327e:	d902      	bls.n	8003286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d13d      	bne.n	8003302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329e:	d111      	bne.n	80032c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a8:	d004      	beq.n	80032b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d107      	bne.n	80032c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032cc:	d10f      	bne.n	80032ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e017      	b.n	8003332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3b01      	subs	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	429a      	cmp	r2, r3
 800332e:	d19b      	bne.n	8003268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000

08003340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff ff6a 	bl	8003230 <SPI_WaitFlagStateUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e000      	b.n	8003374 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <__errno>:
 800337c:	4b01      	ldr	r3, [pc, #4]	; (8003384 <__errno+0x8>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000001c 	.word	0x2000001c

08003388 <__libc_init_array>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	2600      	movs	r6, #0
 800338c:	4d0c      	ldr	r5, [pc, #48]	; (80033c0 <__libc_init_array+0x38>)
 800338e:	4c0d      	ldr	r4, [pc, #52]	; (80033c4 <__libc_init_array+0x3c>)
 8003390:	1b64      	subs	r4, r4, r5
 8003392:	10a4      	asrs	r4, r4, #2
 8003394:	42a6      	cmp	r6, r4
 8003396:	d109      	bne.n	80033ac <__libc_init_array+0x24>
 8003398:	f001 f8a8 	bl	80044ec <_init>
 800339c:	2600      	movs	r6, #0
 800339e:	4d0a      	ldr	r5, [pc, #40]	; (80033c8 <__libc_init_array+0x40>)
 80033a0:	4c0a      	ldr	r4, [pc, #40]	; (80033cc <__libc_init_array+0x44>)
 80033a2:	1b64      	subs	r4, r4, r5
 80033a4:	10a4      	asrs	r4, r4, #2
 80033a6:	42a6      	cmp	r6, r4
 80033a8:	d105      	bne.n	80033b6 <__libc_init_array+0x2e>
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b0:	4798      	blx	r3
 80033b2:	3601      	adds	r6, #1
 80033b4:	e7ee      	b.n	8003394 <__libc_init_array+0xc>
 80033b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ba:	4798      	blx	r3
 80033bc:	3601      	adds	r6, #1
 80033be:	e7f2      	b.n	80033a6 <__libc_init_array+0x1e>
 80033c0:	0800752c 	.word	0x0800752c
 80033c4:	0800752c 	.word	0x0800752c
 80033c8:	0800752c 	.word	0x0800752c
 80033cc:	08007530 	.word	0x08007530

080033d0 <malloc>:
 80033d0:	4b02      	ldr	r3, [pc, #8]	; (80033dc <malloc+0xc>)
 80033d2:	4601      	mov	r1, r0
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f000 b87b 	b.w	80034d0 <_malloc_r>
 80033da:	bf00      	nop
 80033dc:	2000001c 	.word	0x2000001c

080033e0 <free>:
 80033e0:	4b02      	ldr	r3, [pc, #8]	; (80033ec <free+0xc>)
 80033e2:	4601      	mov	r1, r0
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	f000 b80b 	b.w	8003400 <_free_r>
 80033ea:	bf00      	nop
 80033ec:	2000001c 	.word	0x2000001c

080033f0 <memset>:
 80033f0:	4603      	mov	r3, r0
 80033f2:	4402      	add	r2, r0
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d100      	bne.n	80033fa <memset+0xa>
 80033f8:	4770      	bx	lr
 80033fa:	f803 1b01 	strb.w	r1, [r3], #1
 80033fe:	e7f9      	b.n	80033f4 <memset+0x4>

08003400 <_free_r>:
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	4605      	mov	r5, r0
 8003404:	2900      	cmp	r1, #0
 8003406:	d040      	beq.n	800348a <_free_r+0x8a>
 8003408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800340c:	1f0c      	subs	r4, r1, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	bfb8      	it	lt
 8003412:	18e4      	addlt	r4, r4, r3
 8003414:	f000 fc52 	bl	8003cbc <__malloc_lock>
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <_free_r+0x8c>)
 800341a:	6813      	ldr	r3, [r2, #0]
 800341c:	b933      	cbnz	r3, 800342c <_free_r+0x2c>
 800341e:	6063      	str	r3, [r4, #4]
 8003420:	6014      	str	r4, [r2, #0]
 8003422:	4628      	mov	r0, r5
 8003424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003428:	f000 bc4e 	b.w	8003cc8 <__malloc_unlock>
 800342c:	42a3      	cmp	r3, r4
 800342e:	d908      	bls.n	8003442 <_free_r+0x42>
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	1821      	adds	r1, r4, r0
 8003434:	428b      	cmp	r3, r1
 8003436:	bf01      	itttt	eq
 8003438:	6819      	ldreq	r1, [r3, #0]
 800343a:	685b      	ldreq	r3, [r3, #4]
 800343c:	1809      	addeq	r1, r1, r0
 800343e:	6021      	streq	r1, [r4, #0]
 8003440:	e7ed      	b.n	800341e <_free_r+0x1e>
 8003442:	461a      	mov	r2, r3
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	b10b      	cbz	r3, 800344c <_free_r+0x4c>
 8003448:	42a3      	cmp	r3, r4
 800344a:	d9fa      	bls.n	8003442 <_free_r+0x42>
 800344c:	6811      	ldr	r1, [r2, #0]
 800344e:	1850      	adds	r0, r2, r1
 8003450:	42a0      	cmp	r0, r4
 8003452:	d10b      	bne.n	800346c <_free_r+0x6c>
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	4401      	add	r1, r0
 8003458:	1850      	adds	r0, r2, r1
 800345a:	4283      	cmp	r3, r0
 800345c:	6011      	str	r1, [r2, #0]
 800345e:	d1e0      	bne.n	8003422 <_free_r+0x22>
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4401      	add	r1, r0
 8003466:	6011      	str	r1, [r2, #0]
 8003468:	6053      	str	r3, [r2, #4]
 800346a:	e7da      	b.n	8003422 <_free_r+0x22>
 800346c:	d902      	bls.n	8003474 <_free_r+0x74>
 800346e:	230c      	movs	r3, #12
 8003470:	602b      	str	r3, [r5, #0]
 8003472:	e7d6      	b.n	8003422 <_free_r+0x22>
 8003474:	6820      	ldr	r0, [r4, #0]
 8003476:	1821      	adds	r1, r4, r0
 8003478:	428b      	cmp	r3, r1
 800347a:	bf01      	itttt	eq
 800347c:	6819      	ldreq	r1, [r3, #0]
 800347e:	685b      	ldreq	r3, [r3, #4]
 8003480:	1809      	addeq	r1, r1, r0
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6054      	str	r4, [r2, #4]
 8003488:	e7cb      	b.n	8003422 <_free_r+0x22>
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	2000013c 	.word	0x2000013c

08003490 <sbrk_aligned>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4e0e      	ldr	r6, [pc, #56]	; (80034cc <sbrk_aligned+0x3c>)
 8003494:	460c      	mov	r4, r1
 8003496:	6831      	ldr	r1, [r6, #0]
 8003498:	4605      	mov	r5, r0
 800349a:	b911      	cbnz	r1, 80034a2 <sbrk_aligned+0x12>
 800349c:	f000 f902 	bl	80036a4 <_sbrk_r>
 80034a0:	6030      	str	r0, [r6, #0]
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 f8fd 	bl	80036a4 <_sbrk_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d00a      	beq.n	80034c4 <sbrk_aligned+0x34>
 80034ae:	1cc4      	adds	r4, r0, #3
 80034b0:	f024 0403 	bic.w	r4, r4, #3
 80034b4:	42a0      	cmp	r0, r4
 80034b6:	d007      	beq.n	80034c8 <sbrk_aligned+0x38>
 80034b8:	1a21      	subs	r1, r4, r0
 80034ba:	4628      	mov	r0, r5
 80034bc:	f000 f8f2 	bl	80036a4 <_sbrk_r>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d101      	bne.n	80034c8 <sbrk_aligned+0x38>
 80034c4:	f04f 34ff 	mov.w	r4, #4294967295
 80034c8:	4620      	mov	r0, r4
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	20000140 	.word	0x20000140

080034d0 <_malloc_r>:
 80034d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d4:	1ccd      	adds	r5, r1, #3
 80034d6:	f025 0503 	bic.w	r5, r5, #3
 80034da:	3508      	adds	r5, #8
 80034dc:	2d0c      	cmp	r5, #12
 80034de:	bf38      	it	cc
 80034e0:	250c      	movcc	r5, #12
 80034e2:	2d00      	cmp	r5, #0
 80034e4:	4607      	mov	r7, r0
 80034e6:	db01      	blt.n	80034ec <_malloc_r+0x1c>
 80034e8:	42a9      	cmp	r1, r5
 80034ea:	d905      	bls.n	80034f8 <_malloc_r+0x28>
 80034ec:	230c      	movs	r3, #12
 80034ee:	2600      	movs	r6, #0
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4630      	mov	r0, r6
 80034f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034f8:	4e2e      	ldr	r6, [pc, #184]	; (80035b4 <_malloc_r+0xe4>)
 80034fa:	f000 fbdf 	bl	8003cbc <__malloc_lock>
 80034fe:	6833      	ldr	r3, [r6, #0]
 8003500:	461c      	mov	r4, r3
 8003502:	bb34      	cbnz	r4, 8003552 <_malloc_r+0x82>
 8003504:	4629      	mov	r1, r5
 8003506:	4638      	mov	r0, r7
 8003508:	f7ff ffc2 	bl	8003490 <sbrk_aligned>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	4604      	mov	r4, r0
 8003510:	d14d      	bne.n	80035ae <_malloc_r+0xde>
 8003512:	6834      	ldr	r4, [r6, #0]
 8003514:	4626      	mov	r6, r4
 8003516:	2e00      	cmp	r6, #0
 8003518:	d140      	bne.n	800359c <_malloc_r+0xcc>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	4631      	mov	r1, r6
 800351e:	4638      	mov	r0, r7
 8003520:	eb04 0803 	add.w	r8, r4, r3
 8003524:	f000 f8be 	bl	80036a4 <_sbrk_r>
 8003528:	4580      	cmp	r8, r0
 800352a:	d13a      	bne.n	80035a2 <_malloc_r+0xd2>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	3503      	adds	r5, #3
 8003530:	1a6d      	subs	r5, r5, r1
 8003532:	f025 0503 	bic.w	r5, r5, #3
 8003536:	3508      	adds	r5, #8
 8003538:	2d0c      	cmp	r5, #12
 800353a:	bf38      	it	cc
 800353c:	250c      	movcc	r5, #12
 800353e:	4638      	mov	r0, r7
 8003540:	4629      	mov	r1, r5
 8003542:	f7ff ffa5 	bl	8003490 <sbrk_aligned>
 8003546:	3001      	adds	r0, #1
 8003548:	d02b      	beq.n	80035a2 <_malloc_r+0xd2>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	442b      	add	r3, r5
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	e00e      	b.n	8003570 <_malloc_r+0xa0>
 8003552:	6822      	ldr	r2, [r4, #0]
 8003554:	1b52      	subs	r2, r2, r5
 8003556:	d41e      	bmi.n	8003596 <_malloc_r+0xc6>
 8003558:	2a0b      	cmp	r2, #11
 800355a:	d916      	bls.n	800358a <_malloc_r+0xba>
 800355c:	1961      	adds	r1, r4, r5
 800355e:	42a3      	cmp	r3, r4
 8003560:	6025      	str	r5, [r4, #0]
 8003562:	bf18      	it	ne
 8003564:	6059      	strne	r1, [r3, #4]
 8003566:	6863      	ldr	r3, [r4, #4]
 8003568:	bf08      	it	eq
 800356a:	6031      	streq	r1, [r6, #0]
 800356c:	5162      	str	r2, [r4, r5]
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	4638      	mov	r0, r7
 8003572:	f104 060b 	add.w	r6, r4, #11
 8003576:	f000 fba7 	bl	8003cc8 <__malloc_unlock>
 800357a:	f026 0607 	bic.w	r6, r6, #7
 800357e:	1d23      	adds	r3, r4, #4
 8003580:	1af2      	subs	r2, r6, r3
 8003582:	d0b6      	beq.n	80034f2 <_malloc_r+0x22>
 8003584:	1b9b      	subs	r3, r3, r6
 8003586:	50a3      	str	r3, [r4, r2]
 8003588:	e7b3      	b.n	80034f2 <_malloc_r+0x22>
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	42a3      	cmp	r3, r4
 800358e:	bf0c      	ite	eq
 8003590:	6032      	streq	r2, [r6, #0]
 8003592:	605a      	strne	r2, [r3, #4]
 8003594:	e7ec      	b.n	8003570 <_malloc_r+0xa0>
 8003596:	4623      	mov	r3, r4
 8003598:	6864      	ldr	r4, [r4, #4]
 800359a:	e7b2      	b.n	8003502 <_malloc_r+0x32>
 800359c:	4634      	mov	r4, r6
 800359e:	6876      	ldr	r6, [r6, #4]
 80035a0:	e7b9      	b.n	8003516 <_malloc_r+0x46>
 80035a2:	230c      	movs	r3, #12
 80035a4:	4638      	mov	r0, r7
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	f000 fb8e 	bl	8003cc8 <__malloc_unlock>
 80035ac:	e7a1      	b.n	80034f2 <_malloc_r+0x22>
 80035ae:	6025      	str	r5, [r4, #0]
 80035b0:	e7de      	b.n	8003570 <_malloc_r+0xa0>
 80035b2:	bf00      	nop
 80035b4:	2000013c 	.word	0x2000013c

080035b8 <_puts_r>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	460e      	mov	r6, r1
 80035bc:	4605      	mov	r5, r0
 80035be:	b118      	cbz	r0, 80035c8 <_puts_r+0x10>
 80035c0:	6983      	ldr	r3, [r0, #24]
 80035c2:	b90b      	cbnz	r3, 80035c8 <_puts_r+0x10>
 80035c4:	f000 fa74 	bl	8003ab0 <__sinit>
 80035c8:	69ab      	ldr	r3, [r5, #24]
 80035ca:	68ac      	ldr	r4, [r5, #8]
 80035cc:	b913      	cbnz	r3, 80035d4 <_puts_r+0x1c>
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fa6e 	bl	8003ab0 <__sinit>
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <_puts_r+0xd0>)
 80035d6:	429c      	cmp	r4, r3
 80035d8:	d120      	bne.n	800361c <_puts_r+0x64>
 80035da:	686c      	ldr	r4, [r5, #4]
 80035dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035de:	07db      	lsls	r3, r3, #31
 80035e0:	d405      	bmi.n	80035ee <_puts_r+0x36>
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	0598      	lsls	r0, r3, #22
 80035e6:	d402      	bmi.n	80035ee <_puts_r+0x36>
 80035e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035ea:	f000 faff 	bl	8003bec <__retarget_lock_acquire_recursive>
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	0719      	lsls	r1, r3, #28
 80035f2:	d51d      	bpl.n	8003630 <_puts_r+0x78>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	b1db      	cbz	r3, 8003630 <_puts_r+0x78>
 80035f8:	3e01      	subs	r6, #1
 80035fa:	68a3      	ldr	r3, [r4, #8]
 80035fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003600:	3b01      	subs	r3, #1
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	bb39      	cbnz	r1, 8003656 <_puts_r+0x9e>
 8003606:	2b00      	cmp	r3, #0
 8003608:	da38      	bge.n	800367c <_puts_r+0xc4>
 800360a:	4622      	mov	r2, r4
 800360c:	210a      	movs	r1, #10
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f878 	bl	8003704 <__swbuf_r>
 8003614:	3001      	adds	r0, #1
 8003616:	d011      	beq.n	800363c <_puts_r+0x84>
 8003618:	250a      	movs	r5, #10
 800361a:	e011      	b.n	8003640 <_puts_r+0x88>
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <_puts_r+0xd4>)
 800361e:	429c      	cmp	r4, r3
 8003620:	d101      	bne.n	8003626 <_puts_r+0x6e>
 8003622:	68ac      	ldr	r4, [r5, #8]
 8003624:	e7da      	b.n	80035dc <_puts_r+0x24>
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <_puts_r+0xd8>)
 8003628:	429c      	cmp	r4, r3
 800362a:	bf08      	it	eq
 800362c:	68ec      	ldreq	r4, [r5, #12]
 800362e:	e7d5      	b.n	80035dc <_puts_r+0x24>
 8003630:	4621      	mov	r1, r4
 8003632:	4628      	mov	r0, r5
 8003634:	f000 f8b8 	bl	80037a8 <__swsetup_r>
 8003638:	2800      	cmp	r0, #0
 800363a:	d0dd      	beq.n	80035f8 <_puts_r+0x40>
 800363c:	f04f 35ff 	mov.w	r5, #4294967295
 8003640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003642:	07da      	lsls	r2, r3, #31
 8003644:	d405      	bmi.n	8003652 <_puts_r+0x9a>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	059b      	lsls	r3, r3, #22
 800364a:	d402      	bmi.n	8003652 <_puts_r+0x9a>
 800364c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364e:	f000 face 	bl	8003bee <__retarget_lock_release_recursive>
 8003652:	4628      	mov	r0, r5
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	2b00      	cmp	r3, #0
 8003658:	da04      	bge.n	8003664 <_puts_r+0xac>
 800365a:	69a2      	ldr	r2, [r4, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	dc06      	bgt.n	800366e <_puts_r+0xb6>
 8003660:	290a      	cmp	r1, #10
 8003662:	d004      	beq.n	800366e <_puts_r+0xb6>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	6022      	str	r2, [r4, #0]
 800366a:	7019      	strb	r1, [r3, #0]
 800366c:	e7c5      	b.n	80035fa <_puts_r+0x42>
 800366e:	4622      	mov	r2, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f000 f847 	bl	8003704 <__swbuf_r>
 8003676:	3001      	adds	r0, #1
 8003678:	d1bf      	bne.n	80035fa <_puts_r+0x42>
 800367a:	e7df      	b.n	800363c <_puts_r+0x84>
 800367c:	250a      	movs	r5, #10
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	701d      	strb	r5, [r3, #0]
 8003686:	e7db      	b.n	8003640 <_puts_r+0x88>
 8003688:	080074b0 	.word	0x080074b0
 800368c:	080074d0 	.word	0x080074d0
 8003690:	08007490 	.word	0x08007490

08003694 <puts>:
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <puts+0xc>)
 8003696:	4601      	mov	r1, r0
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	f7ff bf8d 	b.w	80035b8 <_puts_r>
 800369e:	bf00      	nop
 80036a0:	2000001c 	.word	0x2000001c

080036a4 <_sbrk_r>:
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	2300      	movs	r3, #0
 80036a8:	4d05      	ldr	r5, [pc, #20]	; (80036c0 <_sbrk_r+0x1c>)
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	602b      	str	r3, [r5, #0]
 80036b0:	f7fe fb3a 	bl	8001d28 <_sbrk>
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	d102      	bne.n	80036be <_sbrk_r+0x1a>
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	b103      	cbz	r3, 80036be <_sbrk_r+0x1a>
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	bd38      	pop	{r3, r4, r5, pc}
 80036c0:	20000148 	.word	0x20000148

080036c4 <siprintf>:
 80036c4:	b40e      	push	{r1, r2, r3}
 80036c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036ca:	b500      	push	{lr}
 80036cc:	b09c      	sub	sp, #112	; 0x70
 80036ce:	ab1d      	add	r3, sp, #116	; 0x74
 80036d0:	9002      	str	r0, [sp, #8]
 80036d2:	9006      	str	r0, [sp, #24]
 80036d4:	9107      	str	r1, [sp, #28]
 80036d6:	9104      	str	r1, [sp, #16]
 80036d8:	4808      	ldr	r0, [pc, #32]	; (80036fc <siprintf+0x38>)
 80036da:	4909      	ldr	r1, [pc, #36]	; (8003700 <siprintf+0x3c>)
 80036dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e0:	9105      	str	r1, [sp, #20]
 80036e2:	6800      	ldr	r0, [r0, #0]
 80036e4:	a902      	add	r1, sp, #8
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	f000 fb50 	bl	8003d8c <_svfiprintf_r>
 80036ec:	2200      	movs	r2, #0
 80036ee:	9b02      	ldr	r3, [sp, #8]
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	b01c      	add	sp, #112	; 0x70
 80036f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f8:	b003      	add	sp, #12
 80036fa:	4770      	bx	lr
 80036fc:	2000001c 	.word	0x2000001c
 8003700:	ffff0208 	.word	0xffff0208

08003704 <__swbuf_r>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	460e      	mov	r6, r1
 8003708:	4614      	mov	r4, r2
 800370a:	4605      	mov	r5, r0
 800370c:	b118      	cbz	r0, 8003716 <__swbuf_r+0x12>
 800370e:	6983      	ldr	r3, [r0, #24]
 8003710:	b90b      	cbnz	r3, 8003716 <__swbuf_r+0x12>
 8003712:	f000 f9cd 	bl	8003ab0 <__sinit>
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <__swbuf_r+0x98>)
 8003718:	429c      	cmp	r4, r3
 800371a:	d12b      	bne.n	8003774 <__swbuf_r+0x70>
 800371c:	686c      	ldr	r4, [r5, #4]
 800371e:	69a3      	ldr	r3, [r4, #24]
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	89a3      	ldrh	r3, [r4, #12]
 8003724:	071a      	lsls	r2, r3, #28
 8003726:	d52f      	bpl.n	8003788 <__swbuf_r+0x84>
 8003728:	6923      	ldr	r3, [r4, #16]
 800372a:	b36b      	cbz	r3, 8003788 <__swbuf_r+0x84>
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	b2f6      	uxtb	r6, r6
 8003732:	1ac0      	subs	r0, r0, r3
 8003734:	6963      	ldr	r3, [r4, #20]
 8003736:	4637      	mov	r7, r6
 8003738:	4283      	cmp	r3, r0
 800373a:	dc04      	bgt.n	8003746 <__swbuf_r+0x42>
 800373c:	4621      	mov	r1, r4
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f922 	bl	8003988 <_fflush_r>
 8003744:	bb30      	cbnz	r0, 8003794 <__swbuf_r+0x90>
 8003746:	68a3      	ldr	r3, [r4, #8]
 8003748:	3001      	adds	r0, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	60a3      	str	r3, [r4, #8]
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	701e      	strb	r6, [r3, #0]
 8003756:	6963      	ldr	r3, [r4, #20]
 8003758:	4283      	cmp	r3, r0
 800375a:	d004      	beq.n	8003766 <__swbuf_r+0x62>
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	07db      	lsls	r3, r3, #31
 8003760:	d506      	bpl.n	8003770 <__swbuf_r+0x6c>
 8003762:	2e0a      	cmp	r6, #10
 8003764:	d104      	bne.n	8003770 <__swbuf_r+0x6c>
 8003766:	4621      	mov	r1, r4
 8003768:	4628      	mov	r0, r5
 800376a:	f000 f90d 	bl	8003988 <_fflush_r>
 800376e:	b988      	cbnz	r0, 8003794 <__swbuf_r+0x90>
 8003770:	4638      	mov	r0, r7
 8003772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <__swbuf_r+0x9c>)
 8003776:	429c      	cmp	r4, r3
 8003778:	d101      	bne.n	800377e <__swbuf_r+0x7a>
 800377a:	68ac      	ldr	r4, [r5, #8]
 800377c:	e7cf      	b.n	800371e <__swbuf_r+0x1a>
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <__swbuf_r+0xa0>)
 8003780:	429c      	cmp	r4, r3
 8003782:	bf08      	it	eq
 8003784:	68ec      	ldreq	r4, [r5, #12]
 8003786:	e7ca      	b.n	800371e <__swbuf_r+0x1a>
 8003788:	4621      	mov	r1, r4
 800378a:	4628      	mov	r0, r5
 800378c:	f000 f80c 	bl	80037a8 <__swsetup_r>
 8003790:	2800      	cmp	r0, #0
 8003792:	d0cb      	beq.n	800372c <__swbuf_r+0x28>
 8003794:	f04f 37ff 	mov.w	r7, #4294967295
 8003798:	e7ea      	b.n	8003770 <__swbuf_r+0x6c>
 800379a:	bf00      	nop
 800379c:	080074b0 	.word	0x080074b0
 80037a0:	080074d0 	.word	0x080074d0
 80037a4:	08007490 	.word	0x08007490

080037a8 <__swsetup_r>:
 80037a8:	4b32      	ldr	r3, [pc, #200]	; (8003874 <__swsetup_r+0xcc>)
 80037aa:	b570      	push	{r4, r5, r6, lr}
 80037ac:	681d      	ldr	r5, [r3, #0]
 80037ae:	4606      	mov	r6, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	b125      	cbz	r5, 80037be <__swsetup_r+0x16>
 80037b4:	69ab      	ldr	r3, [r5, #24]
 80037b6:	b913      	cbnz	r3, 80037be <__swsetup_r+0x16>
 80037b8:	4628      	mov	r0, r5
 80037ba:	f000 f979 	bl	8003ab0 <__sinit>
 80037be:	4b2e      	ldr	r3, [pc, #184]	; (8003878 <__swsetup_r+0xd0>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d10f      	bne.n	80037e4 <__swsetup_r+0x3c>
 80037c4:	686c      	ldr	r4, [r5, #4]
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037cc:	0719      	lsls	r1, r3, #28
 80037ce:	d42c      	bmi.n	800382a <__swsetup_r+0x82>
 80037d0:	06dd      	lsls	r5, r3, #27
 80037d2:	d411      	bmi.n	80037f8 <__swsetup_r+0x50>
 80037d4:	2309      	movs	r3, #9
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	e03e      	b.n	8003862 <__swsetup_r+0xba>
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <__swsetup_r+0xd4>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d101      	bne.n	80037ee <__swsetup_r+0x46>
 80037ea:	68ac      	ldr	r4, [r5, #8]
 80037ec:	e7eb      	b.n	80037c6 <__swsetup_r+0x1e>
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <__swsetup_r+0xd8>)
 80037f0:	429c      	cmp	r4, r3
 80037f2:	bf08      	it	eq
 80037f4:	68ec      	ldreq	r4, [r5, #12]
 80037f6:	e7e6      	b.n	80037c6 <__swsetup_r+0x1e>
 80037f8:	0758      	lsls	r0, r3, #29
 80037fa:	d512      	bpl.n	8003822 <__swsetup_r+0x7a>
 80037fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037fe:	b141      	cbz	r1, 8003812 <__swsetup_r+0x6a>
 8003800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003804:	4299      	cmp	r1, r3
 8003806:	d002      	beq.n	800380e <__swsetup_r+0x66>
 8003808:	4630      	mov	r0, r6
 800380a:	f7ff fdf9 	bl	8003400 <_free_r>
 800380e:	2300      	movs	r3, #0
 8003810:	6363      	str	r3, [r4, #52]	; 0x34
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003818:	81a3      	strh	r3, [r4, #12]
 800381a:	2300      	movs	r3, #0
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	b94b      	cbnz	r3, 8003842 <__swsetup_r+0x9a>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003838:	d003      	beq.n	8003842 <__swsetup_r+0x9a>
 800383a:	4621      	mov	r1, r4
 800383c:	4630      	mov	r0, r6
 800383e:	f000 f9fd 	bl	8003c3c <__smakebuf_r>
 8003842:	89a0      	ldrh	r0, [r4, #12]
 8003844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003848:	f010 0301 	ands.w	r3, r0, #1
 800384c:	d00a      	beq.n	8003864 <__swsetup_r+0xbc>
 800384e:	2300      	movs	r3, #0
 8003850:	60a3      	str	r3, [r4, #8]
 8003852:	6963      	ldr	r3, [r4, #20]
 8003854:	425b      	negs	r3, r3
 8003856:	61a3      	str	r3, [r4, #24]
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	b943      	cbnz	r3, 800386e <__swsetup_r+0xc6>
 800385c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003860:	d1ba      	bne.n	80037d8 <__swsetup_r+0x30>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	0781      	lsls	r1, r0, #30
 8003866:	bf58      	it	pl
 8003868:	6963      	ldrpl	r3, [r4, #20]
 800386a:	60a3      	str	r3, [r4, #8]
 800386c:	e7f4      	b.n	8003858 <__swsetup_r+0xb0>
 800386e:	2000      	movs	r0, #0
 8003870:	e7f7      	b.n	8003862 <__swsetup_r+0xba>
 8003872:	bf00      	nop
 8003874:	2000001c 	.word	0x2000001c
 8003878:	080074b0 	.word	0x080074b0
 800387c:	080074d0 	.word	0x080074d0
 8003880:	08007490 	.word	0x08007490

08003884 <__sflush_r>:
 8003884:	898a      	ldrh	r2, [r1, #12]
 8003886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003888:	4605      	mov	r5, r0
 800388a:	0710      	lsls	r0, r2, #28
 800388c:	460c      	mov	r4, r1
 800388e:	d457      	bmi.n	8003940 <__sflush_r+0xbc>
 8003890:	684b      	ldr	r3, [r1, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	dc04      	bgt.n	80038a0 <__sflush_r+0x1c>
 8003896:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	dc01      	bgt.n	80038a0 <__sflush_r+0x1c>
 800389c:	2000      	movs	r0, #0
 800389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d0fa      	beq.n	800389c <__sflush_r+0x18>
 80038a6:	2300      	movs	r3, #0
 80038a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038ac:	682f      	ldr	r7, [r5, #0]
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	d032      	beq.n	8003918 <__sflush_r+0x94>
 80038b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	075a      	lsls	r2, r3, #29
 80038b8:	d505      	bpl.n	80038c6 <__sflush_r+0x42>
 80038ba:	6863      	ldr	r3, [r4, #4]
 80038bc:	1ac0      	subs	r0, r0, r3
 80038be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038c0:	b10b      	cbz	r3, 80038c6 <__sflush_r+0x42>
 80038c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038c4:	1ac0      	subs	r0, r0, r3
 80038c6:	2300      	movs	r3, #0
 80038c8:	4602      	mov	r2, r0
 80038ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038cc:	4628      	mov	r0, r5
 80038ce:	6a21      	ldr	r1, [r4, #32]
 80038d0:	47b0      	blx	r6
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	d106      	bne.n	80038e6 <__sflush_r+0x62>
 80038d8:	6829      	ldr	r1, [r5, #0]
 80038da:	291d      	cmp	r1, #29
 80038dc:	d82c      	bhi.n	8003938 <__sflush_r+0xb4>
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <__sflush_r+0x100>)
 80038e0:	40ca      	lsrs	r2, r1
 80038e2:	07d6      	lsls	r6, r2, #31
 80038e4:	d528      	bpl.n	8003938 <__sflush_r+0xb4>
 80038e6:	2200      	movs	r2, #0
 80038e8:	6062      	str	r2, [r4, #4]
 80038ea:	6922      	ldr	r2, [r4, #16]
 80038ec:	04d9      	lsls	r1, r3, #19
 80038ee:	6022      	str	r2, [r4, #0]
 80038f0:	d504      	bpl.n	80038fc <__sflush_r+0x78>
 80038f2:	1c42      	adds	r2, r0, #1
 80038f4:	d101      	bne.n	80038fa <__sflush_r+0x76>
 80038f6:	682b      	ldr	r3, [r5, #0]
 80038f8:	b903      	cbnz	r3, 80038fc <__sflush_r+0x78>
 80038fa:	6560      	str	r0, [r4, #84]	; 0x54
 80038fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038fe:	602f      	str	r7, [r5, #0]
 8003900:	2900      	cmp	r1, #0
 8003902:	d0cb      	beq.n	800389c <__sflush_r+0x18>
 8003904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003908:	4299      	cmp	r1, r3
 800390a:	d002      	beq.n	8003912 <__sflush_r+0x8e>
 800390c:	4628      	mov	r0, r5
 800390e:	f7ff fd77 	bl	8003400 <_free_r>
 8003912:	2000      	movs	r0, #0
 8003914:	6360      	str	r0, [r4, #52]	; 0x34
 8003916:	e7c2      	b.n	800389e <__sflush_r+0x1a>
 8003918:	6a21      	ldr	r1, [r4, #32]
 800391a:	2301      	movs	r3, #1
 800391c:	4628      	mov	r0, r5
 800391e:	47b0      	blx	r6
 8003920:	1c41      	adds	r1, r0, #1
 8003922:	d1c7      	bne.n	80038b4 <__sflush_r+0x30>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0c4      	beq.n	80038b4 <__sflush_r+0x30>
 800392a:	2b1d      	cmp	r3, #29
 800392c:	d001      	beq.n	8003932 <__sflush_r+0xae>
 800392e:	2b16      	cmp	r3, #22
 8003930:	d101      	bne.n	8003936 <__sflush_r+0xb2>
 8003932:	602f      	str	r7, [r5, #0]
 8003934:	e7b2      	b.n	800389c <__sflush_r+0x18>
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393c:	81a3      	strh	r3, [r4, #12]
 800393e:	e7ae      	b.n	800389e <__sflush_r+0x1a>
 8003940:	690f      	ldr	r7, [r1, #16]
 8003942:	2f00      	cmp	r7, #0
 8003944:	d0aa      	beq.n	800389c <__sflush_r+0x18>
 8003946:	0793      	lsls	r3, r2, #30
 8003948:	bf18      	it	ne
 800394a:	2300      	movne	r3, #0
 800394c:	680e      	ldr	r6, [r1, #0]
 800394e:	bf08      	it	eq
 8003950:	694b      	ldreq	r3, [r1, #20]
 8003952:	1bf6      	subs	r6, r6, r7
 8003954:	600f      	str	r7, [r1, #0]
 8003956:	608b      	str	r3, [r1, #8]
 8003958:	2e00      	cmp	r6, #0
 800395a:	dd9f      	ble.n	800389c <__sflush_r+0x18>
 800395c:	4633      	mov	r3, r6
 800395e:	463a      	mov	r2, r7
 8003960:	4628      	mov	r0, r5
 8003962:	6a21      	ldr	r1, [r4, #32]
 8003964:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003968:	47e0      	blx	ip
 800396a:	2800      	cmp	r0, #0
 800396c:	dc06      	bgt.n	800397c <__sflush_r+0xf8>
 800396e:	89a3      	ldrh	r3, [r4, #12]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	e790      	b.n	800389e <__sflush_r+0x1a>
 800397c:	4407      	add	r7, r0
 800397e:	1a36      	subs	r6, r6, r0
 8003980:	e7ea      	b.n	8003958 <__sflush_r+0xd4>
 8003982:	bf00      	nop
 8003984:	20400001 	.word	0x20400001

08003988 <_fflush_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	690b      	ldr	r3, [r1, #16]
 800398c:	4605      	mov	r5, r0
 800398e:	460c      	mov	r4, r1
 8003990:	b913      	cbnz	r3, 8003998 <_fflush_r+0x10>
 8003992:	2500      	movs	r5, #0
 8003994:	4628      	mov	r0, r5
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	b118      	cbz	r0, 80039a2 <_fflush_r+0x1a>
 800399a:	6983      	ldr	r3, [r0, #24]
 800399c:	b90b      	cbnz	r3, 80039a2 <_fflush_r+0x1a>
 800399e:	f000 f887 	bl	8003ab0 <__sinit>
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <_fflush_r+0x6c>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	d11b      	bne.n	80039e0 <_fflush_r+0x58>
 80039a8:	686c      	ldr	r4, [r5, #4]
 80039aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0ef      	beq.n	8003992 <_fflush_r+0xa>
 80039b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039b4:	07d0      	lsls	r0, r2, #31
 80039b6:	d404      	bmi.n	80039c2 <_fflush_r+0x3a>
 80039b8:	0599      	lsls	r1, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_fflush_r+0x3a>
 80039bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039be:	f000 f915 	bl	8003bec <__retarget_lock_acquire_recursive>
 80039c2:	4628      	mov	r0, r5
 80039c4:	4621      	mov	r1, r4
 80039c6:	f7ff ff5d 	bl	8003884 <__sflush_r>
 80039ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039cc:	4605      	mov	r5, r0
 80039ce:	07da      	lsls	r2, r3, #31
 80039d0:	d4e0      	bmi.n	8003994 <_fflush_r+0xc>
 80039d2:	89a3      	ldrh	r3, [r4, #12]
 80039d4:	059b      	lsls	r3, r3, #22
 80039d6:	d4dd      	bmi.n	8003994 <_fflush_r+0xc>
 80039d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039da:	f000 f908 	bl	8003bee <__retarget_lock_release_recursive>
 80039de:	e7d9      	b.n	8003994 <_fflush_r+0xc>
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <_fflush_r+0x70>)
 80039e2:	429c      	cmp	r4, r3
 80039e4:	d101      	bne.n	80039ea <_fflush_r+0x62>
 80039e6:	68ac      	ldr	r4, [r5, #8]
 80039e8:	e7df      	b.n	80039aa <_fflush_r+0x22>
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <_fflush_r+0x74>)
 80039ec:	429c      	cmp	r4, r3
 80039ee:	bf08      	it	eq
 80039f0:	68ec      	ldreq	r4, [r5, #12]
 80039f2:	e7da      	b.n	80039aa <_fflush_r+0x22>
 80039f4:	080074b0 	.word	0x080074b0
 80039f8:	080074d0 	.word	0x080074d0
 80039fc:	08007490 	.word	0x08007490

08003a00 <std>:
 8003a00:	2300      	movs	r3, #0
 8003a02:	b510      	push	{r4, lr}
 8003a04:	4604      	mov	r4, r0
 8003a06:	e9c0 3300 	strd	r3, r3, [r0]
 8003a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a0e:	6083      	str	r3, [r0, #8]
 8003a10:	8181      	strh	r1, [r0, #12]
 8003a12:	6643      	str	r3, [r0, #100]	; 0x64
 8003a14:	81c2      	strh	r2, [r0, #14]
 8003a16:	6183      	str	r3, [r0, #24]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	305c      	adds	r0, #92	; 0x5c
 8003a1e:	f7ff fce7 	bl	80033f0 <memset>
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <std+0x38>)
 8003a24:	6224      	str	r4, [r4, #32]
 8003a26:	6263      	str	r3, [r4, #36]	; 0x24
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <std+0x3c>)
 8003a2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a2c:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <std+0x40>)
 8003a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <std+0x44>)
 8003a32:	6323      	str	r3, [r4, #48]	; 0x30
 8003a34:	bd10      	pop	{r4, pc}
 8003a36:	bf00      	nop
 8003a38:	080042b9 	.word	0x080042b9
 8003a3c:	080042db 	.word	0x080042db
 8003a40:	08004313 	.word	0x08004313
 8003a44:	08004337 	.word	0x08004337

08003a48 <_cleanup_r>:
 8003a48:	4901      	ldr	r1, [pc, #4]	; (8003a50 <_cleanup_r+0x8>)
 8003a4a:	f000 b8af 	b.w	8003bac <_fwalk_reent>
 8003a4e:	bf00      	nop
 8003a50:	08003989 	.word	0x08003989

08003a54 <__sfmoreglue>:
 8003a54:	2268      	movs	r2, #104	; 0x68
 8003a56:	b570      	push	{r4, r5, r6, lr}
 8003a58:	1e4d      	subs	r5, r1, #1
 8003a5a:	4355      	muls	r5, r2
 8003a5c:	460e      	mov	r6, r1
 8003a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a62:	f7ff fd35 	bl	80034d0 <_malloc_r>
 8003a66:	4604      	mov	r4, r0
 8003a68:	b140      	cbz	r0, 8003a7c <__sfmoreglue+0x28>
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8003a70:	300c      	adds	r0, #12
 8003a72:	60a0      	str	r0, [r4, #8]
 8003a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a78:	f7ff fcba 	bl	80033f0 <memset>
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}

08003a80 <__sfp_lock_acquire>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__sfp_lock_acquire+0x8>)
 8003a82:	f000 b8b3 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000145 	.word	0x20000145

08003a8c <__sfp_lock_release>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__sfp_lock_release+0x8>)
 8003a8e:	f000 b8ae 	b.w	8003bee <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	20000145 	.word	0x20000145

08003a98 <__sinit_lock_acquire>:
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <__sinit_lock_acquire+0x8>)
 8003a9a:	f000 b8a7 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	20000146 	.word	0x20000146

08003aa4 <__sinit_lock_release>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	; (8003aac <__sinit_lock_release+0x8>)
 8003aa6:	f000 b8a2 	b.w	8003bee <__retarget_lock_release_recursive>
 8003aaa:	bf00      	nop
 8003aac:	20000146 	.word	0x20000146

08003ab0 <__sinit>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	f7ff fff0 	bl	8003a98 <__sinit_lock_acquire>
 8003ab8:	69a3      	ldr	r3, [r4, #24]
 8003aba:	b11b      	cbz	r3, 8003ac4 <__sinit+0x14>
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac0:	f7ff bff0 	b.w	8003aa4 <__sinit_lock_release>
 8003ac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <__sinit+0x68>)
 8003acc:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <__sinit+0x6c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ad2:	42a3      	cmp	r3, r4
 8003ad4:	bf08      	it	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	4620      	mov	r0, r4
 8003ada:	bf08      	it	eq
 8003adc:	61a3      	streq	r3, [r4, #24]
 8003ade:	f000 f81f 	bl	8003b20 <__sfp>
 8003ae2:	6060      	str	r0, [r4, #4]
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 f81b 	bl	8003b20 <__sfp>
 8003aea:	60a0      	str	r0, [r4, #8]
 8003aec:	4620      	mov	r0, r4
 8003aee:	f000 f817 	bl	8003b20 <__sfp>
 8003af2:	2200      	movs	r2, #0
 8003af4:	2104      	movs	r1, #4
 8003af6:	60e0      	str	r0, [r4, #12]
 8003af8:	6860      	ldr	r0, [r4, #4]
 8003afa:	f7ff ff81 	bl	8003a00 <std>
 8003afe:	2201      	movs	r2, #1
 8003b00:	2109      	movs	r1, #9
 8003b02:	68a0      	ldr	r0, [r4, #8]
 8003b04:	f7ff ff7c 	bl	8003a00 <std>
 8003b08:	2202      	movs	r2, #2
 8003b0a:	2112      	movs	r1, #18
 8003b0c:	68e0      	ldr	r0, [r4, #12]
 8003b0e:	f7ff ff77 	bl	8003a00 <std>
 8003b12:	2301      	movs	r3, #1
 8003b14:	61a3      	str	r3, [r4, #24]
 8003b16:	e7d1      	b.n	8003abc <__sinit+0xc>
 8003b18:	0800748c 	.word	0x0800748c
 8003b1c:	08003a49 	.word	0x08003a49

08003b20 <__sfp>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	4607      	mov	r7, r0
 8003b24:	f7ff ffac 	bl	8003a80 <__sfp_lock_acquire>
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <__sfp+0x84>)
 8003b2a:	681e      	ldr	r6, [r3, #0]
 8003b2c:	69b3      	ldr	r3, [r6, #24]
 8003b2e:	b913      	cbnz	r3, 8003b36 <__sfp+0x16>
 8003b30:	4630      	mov	r0, r6
 8003b32:	f7ff ffbd 	bl	8003ab0 <__sinit>
 8003b36:	3648      	adds	r6, #72	; 0x48
 8003b38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	d503      	bpl.n	8003b48 <__sfp+0x28>
 8003b40:	6833      	ldr	r3, [r6, #0]
 8003b42:	b30b      	cbz	r3, 8003b88 <__sfp+0x68>
 8003b44:	6836      	ldr	r6, [r6, #0]
 8003b46:	e7f7      	b.n	8003b38 <__sfp+0x18>
 8003b48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b4c:	b9d5      	cbnz	r5, 8003b84 <__sfp+0x64>
 8003b4e:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <__sfp+0x88>)
 8003b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b54:	60e3      	str	r3, [r4, #12]
 8003b56:	6665      	str	r5, [r4, #100]	; 0x64
 8003b58:	f000 f847 	bl	8003bea <__retarget_lock_init_recursive>
 8003b5c:	f7ff ff96 	bl	8003a8c <__sfp_lock_release>
 8003b60:	2208      	movs	r2, #8
 8003b62:	4629      	mov	r1, r5
 8003b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b6c:	6025      	str	r5, [r4, #0]
 8003b6e:	61a5      	str	r5, [r4, #24]
 8003b70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b74:	f7ff fc3c 	bl	80033f0 <memset>
 8003b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b80:	4620      	mov	r0, r4
 8003b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b84:	3468      	adds	r4, #104	; 0x68
 8003b86:	e7d9      	b.n	8003b3c <__sfp+0x1c>
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f7ff ff62 	bl	8003a54 <__sfmoreglue>
 8003b90:	4604      	mov	r4, r0
 8003b92:	6030      	str	r0, [r6, #0]
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d1d5      	bne.n	8003b44 <__sfp+0x24>
 8003b98:	f7ff ff78 	bl	8003a8c <__sfp_lock_release>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	e7ee      	b.n	8003b80 <__sfp+0x60>
 8003ba2:	bf00      	nop
 8003ba4:	0800748c 	.word	0x0800748c
 8003ba8:	ffff0001 	.word	0xffff0001

08003bac <_fwalk_reent>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	2700      	movs	r7, #0
 8003bb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003bba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bbe:	f1b9 0901 	subs.w	r9, r9, #1
 8003bc2:	d505      	bpl.n	8003bd0 <_fwalk_reent+0x24>
 8003bc4:	6824      	ldr	r4, [r4, #0]
 8003bc6:	2c00      	cmp	r4, #0
 8003bc8:	d1f7      	bne.n	8003bba <_fwalk_reent+0xe>
 8003bca:	4638      	mov	r0, r7
 8003bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd0:	89ab      	ldrh	r3, [r5, #12]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d907      	bls.n	8003be6 <_fwalk_reent+0x3a>
 8003bd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	d003      	beq.n	8003be6 <_fwalk_reent+0x3a>
 8003bde:	4629      	mov	r1, r5
 8003be0:	4630      	mov	r0, r6
 8003be2:	47c0      	blx	r8
 8003be4:	4307      	orrs	r7, r0
 8003be6:	3568      	adds	r5, #104	; 0x68
 8003be8:	e7e9      	b.n	8003bbe <_fwalk_reent+0x12>

08003bea <__retarget_lock_init_recursive>:
 8003bea:	4770      	bx	lr

08003bec <__retarget_lock_acquire_recursive>:
 8003bec:	4770      	bx	lr

08003bee <__retarget_lock_release_recursive>:
 8003bee:	4770      	bx	lr

08003bf0 <__swhatbuf_r>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	460e      	mov	r6, r1
 8003bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	2900      	cmp	r1, #0
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	b096      	sub	sp, #88	; 0x58
 8003c00:	da08      	bge.n	8003c14 <__swhatbuf_r+0x24>
 8003c02:	2200      	movs	r2, #0
 8003c04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003c08:	602a      	str	r2, [r5, #0]
 8003c0a:	061a      	lsls	r2, r3, #24
 8003c0c:	d410      	bmi.n	8003c30 <__swhatbuf_r+0x40>
 8003c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c12:	e00e      	b.n	8003c32 <__swhatbuf_r+0x42>
 8003c14:	466a      	mov	r2, sp
 8003c16:	f000 fbb5 	bl	8004384 <_fstat_r>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	dbf1      	blt.n	8003c02 <__swhatbuf_r+0x12>
 8003c1e:	9a01      	ldr	r2, [sp, #4]
 8003c20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c28:	425a      	negs	r2, r3
 8003c2a:	415a      	adcs	r2, r3
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	e7ee      	b.n	8003c0e <__swhatbuf_r+0x1e>
 8003c30:	2340      	movs	r3, #64	; 0x40
 8003c32:	2000      	movs	r0, #0
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	b016      	add	sp, #88	; 0x58
 8003c38:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c3c <__smakebuf_r>:
 8003c3c:	898b      	ldrh	r3, [r1, #12]
 8003c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c40:	079d      	lsls	r5, r3, #30
 8003c42:	4606      	mov	r6, r0
 8003c44:	460c      	mov	r4, r1
 8003c46:	d507      	bpl.n	8003c58 <__smakebuf_r+0x1c>
 8003c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	2301      	movs	r3, #1
 8003c52:	6163      	str	r3, [r4, #20]
 8003c54:	b002      	add	sp, #8
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	466a      	mov	r2, sp
 8003c5a:	ab01      	add	r3, sp, #4
 8003c5c:	f7ff ffc8 	bl	8003bf0 <__swhatbuf_r>
 8003c60:	9900      	ldr	r1, [sp, #0]
 8003c62:	4605      	mov	r5, r0
 8003c64:	4630      	mov	r0, r6
 8003c66:	f7ff fc33 	bl	80034d0 <_malloc_r>
 8003c6a:	b948      	cbnz	r0, 8003c80 <__smakebuf_r+0x44>
 8003c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c70:	059a      	lsls	r2, r3, #22
 8003c72:	d4ef      	bmi.n	8003c54 <__smakebuf_r+0x18>
 8003c74:	f023 0303 	bic.w	r3, r3, #3
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	81a3      	strh	r3, [r4, #12]
 8003c7e:	e7e3      	b.n	8003c48 <__smakebuf_r+0xc>
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <__smakebuf_r+0x7c>)
 8003c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	6020      	str	r0, [r4, #0]
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	81a3      	strh	r3, [r4, #12]
 8003c8e:	9b00      	ldr	r3, [sp, #0]
 8003c90:	6120      	str	r0, [r4, #16]
 8003c92:	6163      	str	r3, [r4, #20]
 8003c94:	9b01      	ldr	r3, [sp, #4]
 8003c96:	b15b      	cbz	r3, 8003cb0 <__smakebuf_r+0x74>
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c9e:	f000 fb83 	bl	80043a8 <_isatty_r>
 8003ca2:	b128      	cbz	r0, 8003cb0 <__smakebuf_r+0x74>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	f023 0303 	bic.w	r3, r3, #3
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	89a0      	ldrh	r0, [r4, #12]
 8003cb2:	4305      	orrs	r5, r0
 8003cb4:	81a5      	strh	r5, [r4, #12]
 8003cb6:	e7cd      	b.n	8003c54 <__smakebuf_r+0x18>
 8003cb8:	08003a49 	.word	0x08003a49

08003cbc <__malloc_lock>:
 8003cbc:	4801      	ldr	r0, [pc, #4]	; (8003cc4 <__malloc_lock+0x8>)
 8003cbe:	f7ff bf95 	b.w	8003bec <__retarget_lock_acquire_recursive>
 8003cc2:	bf00      	nop
 8003cc4:	20000144 	.word	0x20000144

08003cc8 <__malloc_unlock>:
 8003cc8:	4801      	ldr	r0, [pc, #4]	; (8003cd0 <__malloc_unlock+0x8>)
 8003cca:	f7ff bf90 	b.w	8003bee <__retarget_lock_release_recursive>
 8003cce:	bf00      	nop
 8003cd0:	20000144 	.word	0x20000144

08003cd4 <__ssputs_r>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	688e      	ldr	r6, [r1, #8]
 8003cda:	4682      	mov	sl, r0
 8003cdc:	429e      	cmp	r6, r3
 8003cde:	460c      	mov	r4, r1
 8003ce0:	4690      	mov	r8, r2
 8003ce2:	461f      	mov	r7, r3
 8003ce4:	d838      	bhi.n	8003d58 <__ssputs_r+0x84>
 8003ce6:	898a      	ldrh	r2, [r1, #12]
 8003ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cec:	d032      	beq.n	8003d54 <__ssputs_r+0x80>
 8003cee:	6825      	ldr	r5, [r4, #0]
 8003cf0:	6909      	ldr	r1, [r1, #16]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	eba5 0901 	sub.w	r9, r5, r1
 8003cf8:	6965      	ldr	r5, [r4, #20]
 8003cfa:	444b      	add	r3, r9
 8003cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d04:	106d      	asrs	r5, r5, #1
 8003d06:	429d      	cmp	r5, r3
 8003d08:	bf38      	it	cc
 8003d0a:	461d      	movcc	r5, r3
 8003d0c:	0553      	lsls	r3, r2, #21
 8003d0e:	d531      	bpl.n	8003d74 <__ssputs_r+0xa0>
 8003d10:	4629      	mov	r1, r5
 8003d12:	f7ff fbdd 	bl	80034d0 <_malloc_r>
 8003d16:	4606      	mov	r6, r0
 8003d18:	b950      	cbnz	r0, 8003d30 <__ssputs_r+0x5c>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f8ca 3000 	str.w	r3, [sl]
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	464a      	mov	r2, r9
 8003d32:	6921      	ldr	r1, [r4, #16]
 8003d34:	f000 fb68 	bl	8004408 <memcpy>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	6126      	str	r6, [r4, #16]
 8003d46:	444e      	add	r6, r9
 8003d48:	6026      	str	r6, [r4, #0]
 8003d4a:	463e      	mov	r6, r7
 8003d4c:	6165      	str	r5, [r4, #20]
 8003d4e:	eba5 0509 	sub.w	r5, r5, r9
 8003d52:	60a5      	str	r5, [r4, #8]
 8003d54:	42be      	cmp	r6, r7
 8003d56:	d900      	bls.n	8003d5a <__ssputs_r+0x86>
 8003d58:	463e      	mov	r6, r7
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	f000 fb60 	bl	8004424 <memmove>
 8003d64:	68a3      	ldr	r3, [r4, #8]
 8003d66:	2000      	movs	r0, #0
 8003d68:	1b9b      	subs	r3, r3, r6
 8003d6a:	60a3      	str	r3, [r4, #8]
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	4433      	add	r3, r6
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	e7db      	b.n	8003d2c <__ssputs_r+0x58>
 8003d74:	462a      	mov	r2, r5
 8003d76:	f000 fb6f 	bl	8004458 <_realloc_r>
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d1e1      	bne.n	8003d44 <__ssputs_r+0x70>
 8003d80:	4650      	mov	r0, sl
 8003d82:	6921      	ldr	r1, [r4, #16]
 8003d84:	f7ff fb3c 	bl	8003400 <_free_r>
 8003d88:	e7c7      	b.n	8003d1a <__ssputs_r+0x46>
	...

08003d8c <_svfiprintf_r>:
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	4698      	mov	r8, r3
 8003d92:	898b      	ldrh	r3, [r1, #12]
 8003d94:	4607      	mov	r7, r0
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	460d      	mov	r5, r1
 8003d9a:	4614      	mov	r4, r2
 8003d9c:	b09d      	sub	sp, #116	; 0x74
 8003d9e:	d50e      	bpl.n	8003dbe <_svfiprintf_r+0x32>
 8003da0:	690b      	ldr	r3, [r1, #16]
 8003da2:	b963      	cbnz	r3, 8003dbe <_svfiprintf_r+0x32>
 8003da4:	2140      	movs	r1, #64	; 0x40
 8003da6:	f7ff fb93 	bl	80034d0 <_malloc_r>
 8003daa:	6028      	str	r0, [r5, #0]
 8003dac:	6128      	str	r0, [r5, #16]
 8003dae:	b920      	cbnz	r0, 8003dba <_svfiprintf_r+0x2e>
 8003db0:	230c      	movs	r3, #12
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	e0d1      	b.n	8003f5e <_svfiprintf_r+0x1d2>
 8003dba:	2340      	movs	r3, #64	; 0x40
 8003dbc:	616b      	str	r3, [r5, #20]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dc8:	2330      	movs	r3, #48	; 0x30
 8003dca:	f04f 0901 	mov.w	r9, #1
 8003dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f78 <_svfiprintf_r+0x1ec>
 8003dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dda:	4623      	mov	r3, r4
 8003ddc:	469a      	mov	sl, r3
 8003dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003de2:	b10a      	cbz	r2, 8003de8 <_svfiprintf_r+0x5c>
 8003de4:	2a25      	cmp	r2, #37	; 0x25
 8003de6:	d1f9      	bne.n	8003ddc <_svfiprintf_r+0x50>
 8003de8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dec:	d00b      	beq.n	8003e06 <_svfiprintf_r+0x7a>
 8003dee:	465b      	mov	r3, fp
 8003df0:	4622      	mov	r2, r4
 8003df2:	4629      	mov	r1, r5
 8003df4:	4638      	mov	r0, r7
 8003df6:	f7ff ff6d 	bl	8003cd4 <__ssputs_r>
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	f000 80aa 	beq.w	8003f54 <_svfiprintf_r+0x1c8>
 8003e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e02:	445a      	add	r2, fp
 8003e04:	9209      	str	r2, [sp, #36]	; 0x24
 8003e06:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80a2 	beq.w	8003f54 <_svfiprintf_r+0x1c8>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f04f 32ff 	mov.w	r2, #4294967295
 8003e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e1a:	f10a 0a01 	add.w	sl, sl, #1
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	9307      	str	r3, [sp, #28]
 8003e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e26:	931a      	str	r3, [sp, #104]	; 0x68
 8003e28:	4654      	mov	r4, sl
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e30:	4851      	ldr	r0, [pc, #324]	; (8003f78 <_svfiprintf_r+0x1ec>)
 8003e32:	f000 fadb 	bl	80043ec <memchr>
 8003e36:	9a04      	ldr	r2, [sp, #16]
 8003e38:	b9d8      	cbnz	r0, 8003e72 <_svfiprintf_r+0xe6>
 8003e3a:	06d0      	lsls	r0, r2, #27
 8003e3c:	bf44      	itt	mi
 8003e3e:	2320      	movmi	r3, #32
 8003e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e44:	0711      	lsls	r1, r2, #28
 8003e46:	bf44      	itt	mi
 8003e48:	232b      	movmi	r3, #43	; 0x2b
 8003e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e52:	2b2a      	cmp	r3, #42	; 0x2a
 8003e54:	d015      	beq.n	8003e82 <_svfiprintf_r+0xf6>
 8003e56:	4654      	mov	r4, sl
 8003e58:	2000      	movs	r0, #0
 8003e5a:	f04f 0c0a 	mov.w	ip, #10
 8003e5e:	9a07      	ldr	r2, [sp, #28]
 8003e60:	4621      	mov	r1, r4
 8003e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e66:	3b30      	subs	r3, #48	; 0x30
 8003e68:	2b09      	cmp	r3, #9
 8003e6a:	d94e      	bls.n	8003f0a <_svfiprintf_r+0x17e>
 8003e6c:	b1b0      	cbz	r0, 8003e9c <_svfiprintf_r+0x110>
 8003e6e:	9207      	str	r2, [sp, #28]
 8003e70:	e014      	b.n	8003e9c <_svfiprintf_r+0x110>
 8003e72:	eba0 0308 	sub.w	r3, r0, r8
 8003e76:	fa09 f303 	lsl.w	r3, r9, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	46a2      	mov	sl, r4
 8003e7e:	9304      	str	r3, [sp, #16]
 8003e80:	e7d2      	b.n	8003e28 <_svfiprintf_r+0x9c>
 8003e82:	9b03      	ldr	r3, [sp, #12]
 8003e84:	1d19      	adds	r1, r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	9103      	str	r1, [sp, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfbb      	ittet	lt
 8003e8e:	425b      	neglt	r3, r3
 8003e90:	f042 0202 	orrlt.w	r2, r2, #2
 8003e94:	9307      	strge	r3, [sp, #28]
 8003e96:	9307      	strlt	r3, [sp, #28]
 8003e98:	bfb8      	it	lt
 8003e9a:	9204      	strlt	r2, [sp, #16]
 8003e9c:	7823      	ldrb	r3, [r4, #0]
 8003e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea0:	d10c      	bne.n	8003ebc <_svfiprintf_r+0x130>
 8003ea2:	7863      	ldrb	r3, [r4, #1]
 8003ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea6:	d135      	bne.n	8003f14 <_svfiprintf_r+0x188>
 8003ea8:	9b03      	ldr	r3, [sp, #12]
 8003eaa:	3402      	adds	r4, #2
 8003eac:	1d1a      	adds	r2, r3, #4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	9203      	str	r2, [sp, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bfb8      	it	lt
 8003eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003eba:	9305      	str	r3, [sp, #20]
 8003ebc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003f7c <_svfiprintf_r+0x1f0>
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	7821      	ldrb	r1, [r4, #0]
 8003ec6:	f000 fa91 	bl	80043ec <memchr>
 8003eca:	b140      	cbz	r0, 8003ede <_svfiprintf_r+0x152>
 8003ecc:	2340      	movs	r3, #64	; 0x40
 8003ece:	eba0 000a 	sub.w	r0, r0, sl
 8003ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ed6:	9b04      	ldr	r3, [sp, #16]
 8003ed8:	3401      	adds	r4, #1
 8003eda:	4303      	orrs	r3, r0
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee2:	2206      	movs	r2, #6
 8003ee4:	4826      	ldr	r0, [pc, #152]	; (8003f80 <_svfiprintf_r+0x1f4>)
 8003ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003eea:	f000 fa7f 	bl	80043ec <memchr>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d038      	beq.n	8003f64 <_svfiprintf_r+0x1d8>
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <_svfiprintf_r+0x1f8>)
 8003ef4:	bb1b      	cbnz	r3, 8003f3e <_svfiprintf_r+0x1b2>
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	3307      	adds	r3, #7
 8003efa:	f023 0307 	bic.w	r3, r3, #7
 8003efe:	3308      	adds	r3, #8
 8003f00:	9303      	str	r3, [sp, #12]
 8003f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f04:	4433      	add	r3, r6
 8003f06:	9309      	str	r3, [sp, #36]	; 0x24
 8003f08:	e767      	b.n	8003dda <_svfiprintf_r+0x4e>
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f12:	e7a5      	b.n	8003e60 <_svfiprintf_r+0xd4>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f04f 0c0a 	mov.w	ip, #10
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	3401      	adds	r4, #1
 8003f1e:	9305      	str	r3, [sp, #20]
 8003f20:	4620      	mov	r0, r4
 8003f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f26:	3a30      	subs	r2, #48	; 0x30
 8003f28:	2a09      	cmp	r2, #9
 8003f2a:	d903      	bls.n	8003f34 <_svfiprintf_r+0x1a8>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0c5      	beq.n	8003ebc <_svfiprintf_r+0x130>
 8003f30:	9105      	str	r1, [sp, #20]
 8003f32:	e7c3      	b.n	8003ebc <_svfiprintf_r+0x130>
 8003f34:	4604      	mov	r4, r0
 8003f36:	2301      	movs	r3, #1
 8003f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f3c:	e7f0      	b.n	8003f20 <_svfiprintf_r+0x194>
 8003f3e:	ab03      	add	r3, sp, #12
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	462a      	mov	r2, r5
 8003f44:	4638      	mov	r0, r7
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <_svfiprintf_r+0x1fc>)
 8003f48:	a904      	add	r1, sp, #16
 8003f4a:	f3af 8000 	nop.w
 8003f4e:	1c42      	adds	r2, r0, #1
 8003f50:	4606      	mov	r6, r0
 8003f52:	d1d6      	bne.n	8003f02 <_svfiprintf_r+0x176>
 8003f54:	89ab      	ldrh	r3, [r5, #12]
 8003f56:	065b      	lsls	r3, r3, #25
 8003f58:	f53f af2c 	bmi.w	8003db4 <_svfiprintf_r+0x28>
 8003f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f5e:	b01d      	add	sp, #116	; 0x74
 8003f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f64:	ab03      	add	r3, sp, #12
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	462a      	mov	r2, r5
 8003f6a:	4638      	mov	r0, r7
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <_svfiprintf_r+0x1fc>)
 8003f6e:	a904      	add	r1, sp, #16
 8003f70:	f000 f87c 	bl	800406c <_printf_i>
 8003f74:	e7eb      	b.n	8003f4e <_svfiprintf_r+0x1c2>
 8003f76:	bf00      	nop
 8003f78:	080074f0 	.word	0x080074f0
 8003f7c:	080074f6 	.word	0x080074f6
 8003f80:	080074fa 	.word	0x080074fa
 8003f84:	00000000 	.word	0x00000000
 8003f88:	08003cd5 	.word	0x08003cd5

08003f8c <_printf_common>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	4616      	mov	r6, r2
 8003f92:	4699      	mov	r9, r3
 8003f94:	688a      	ldr	r2, [r1, #8]
 8003f96:	690b      	ldr	r3, [r1, #16]
 8003f98:	4607      	mov	r7, r0
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bfb8      	it	lt
 8003f9e:	4613      	movlt	r3, r2
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fac:	b10a      	cbz	r2, 8003fb2 <_printf_common+0x26>
 8003fae:	3301      	adds	r3, #1
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	0699      	lsls	r1, r3, #26
 8003fb6:	bf42      	ittt	mi
 8003fb8:	6833      	ldrmi	r3, [r6, #0]
 8003fba:	3302      	addmi	r3, #2
 8003fbc:	6033      	strmi	r3, [r6, #0]
 8003fbe:	6825      	ldr	r5, [r4, #0]
 8003fc0:	f015 0506 	ands.w	r5, r5, #6
 8003fc4:	d106      	bne.n	8003fd4 <_printf_common+0x48>
 8003fc6:	f104 0a19 	add.w	sl, r4, #25
 8003fca:	68e3      	ldr	r3, [r4, #12]
 8003fcc:	6832      	ldr	r2, [r6, #0]
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	42ab      	cmp	r3, r5
 8003fd2:	dc28      	bgt.n	8004026 <_printf_common+0x9a>
 8003fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fd8:	1e13      	subs	r3, r2, #0
 8003fda:	6822      	ldr	r2, [r4, #0]
 8003fdc:	bf18      	it	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	0692      	lsls	r2, r2, #26
 8003fe2:	d42d      	bmi.n	8004040 <_printf_common+0xb4>
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fec:	47c0      	blx	r8
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d020      	beq.n	8004034 <_printf_common+0xa8>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	68e5      	ldr	r5, [r4, #12]
 8003ff6:	f003 0306 	and.w	r3, r3, #6
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf18      	it	ne
 8003ffe:	2500      	movne	r5, #0
 8004000:	6832      	ldr	r2, [r6, #0]
 8004002:	f04f 0600 	mov.w	r6, #0
 8004006:	68a3      	ldr	r3, [r4, #8]
 8004008:	bf08      	it	eq
 800400a:	1aad      	subeq	r5, r5, r2
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	bf08      	it	eq
 8004010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004014:	4293      	cmp	r3, r2
 8004016:	bfc4      	itt	gt
 8004018:	1a9b      	subgt	r3, r3, r2
 800401a:	18ed      	addgt	r5, r5, r3
 800401c:	341a      	adds	r4, #26
 800401e:	42b5      	cmp	r5, r6
 8004020:	d11a      	bne.n	8004058 <_printf_common+0xcc>
 8004022:	2000      	movs	r0, #0
 8004024:	e008      	b.n	8004038 <_printf_common+0xac>
 8004026:	2301      	movs	r3, #1
 8004028:	4652      	mov	r2, sl
 800402a:	4649      	mov	r1, r9
 800402c:	4638      	mov	r0, r7
 800402e:	47c0      	blx	r8
 8004030:	3001      	adds	r0, #1
 8004032:	d103      	bne.n	800403c <_printf_common+0xb0>
 8004034:	f04f 30ff 	mov.w	r0, #4294967295
 8004038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800403c:	3501      	adds	r5, #1
 800403e:	e7c4      	b.n	8003fca <_printf_common+0x3e>
 8004040:	2030      	movs	r0, #48	; 0x30
 8004042:	18e1      	adds	r1, r4, r3
 8004044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800404e:	4422      	add	r2, r4
 8004050:	3302      	adds	r3, #2
 8004052:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004056:	e7c5      	b.n	8003fe4 <_printf_common+0x58>
 8004058:	2301      	movs	r3, #1
 800405a:	4622      	mov	r2, r4
 800405c:	4649      	mov	r1, r9
 800405e:	4638      	mov	r0, r7
 8004060:	47c0      	blx	r8
 8004062:	3001      	adds	r0, #1
 8004064:	d0e6      	beq.n	8004034 <_printf_common+0xa8>
 8004066:	3601      	adds	r6, #1
 8004068:	e7d9      	b.n	800401e <_printf_common+0x92>
	...

0800406c <_printf_i>:
 800406c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	7e0f      	ldrb	r7, [r1, #24]
 8004072:	4691      	mov	r9, r2
 8004074:	2f78      	cmp	r7, #120	; 0x78
 8004076:	4680      	mov	r8, r0
 8004078:	460c      	mov	r4, r1
 800407a:	469a      	mov	sl, r3
 800407c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800407e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004082:	d807      	bhi.n	8004094 <_printf_i+0x28>
 8004084:	2f62      	cmp	r7, #98	; 0x62
 8004086:	d80a      	bhi.n	800409e <_printf_i+0x32>
 8004088:	2f00      	cmp	r7, #0
 800408a:	f000 80d9 	beq.w	8004240 <_printf_i+0x1d4>
 800408e:	2f58      	cmp	r7, #88	; 0x58
 8004090:	f000 80a4 	beq.w	80041dc <_printf_i+0x170>
 8004094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800409c:	e03a      	b.n	8004114 <_printf_i+0xa8>
 800409e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040a2:	2b15      	cmp	r3, #21
 80040a4:	d8f6      	bhi.n	8004094 <_printf_i+0x28>
 80040a6:	a101      	add	r1, pc, #4	; (adr r1, 80040ac <_printf_i+0x40>)
 80040a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040ac:	08004105 	.word	0x08004105
 80040b0:	08004119 	.word	0x08004119
 80040b4:	08004095 	.word	0x08004095
 80040b8:	08004095 	.word	0x08004095
 80040bc:	08004095 	.word	0x08004095
 80040c0:	08004095 	.word	0x08004095
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004095 	.word	0x08004095
 80040cc:	08004095 	.word	0x08004095
 80040d0:	08004095 	.word	0x08004095
 80040d4:	08004095 	.word	0x08004095
 80040d8:	08004227 	.word	0x08004227
 80040dc:	08004149 	.word	0x08004149
 80040e0:	08004209 	.word	0x08004209
 80040e4:	08004095 	.word	0x08004095
 80040e8:	08004095 	.word	0x08004095
 80040ec:	08004249 	.word	0x08004249
 80040f0:	08004095 	.word	0x08004095
 80040f4:	08004149 	.word	0x08004149
 80040f8:	08004095 	.word	0x08004095
 80040fc:	08004095 	.word	0x08004095
 8004100:	08004211 	.word	0x08004211
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	1d1a      	adds	r2, r3, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	602a      	str	r2, [r5, #0]
 800410c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004114:	2301      	movs	r3, #1
 8004116:	e0a4      	b.n	8004262 <_printf_i+0x1f6>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	6829      	ldr	r1, [r5, #0]
 800411c:	0606      	lsls	r6, r0, #24
 800411e:	f101 0304 	add.w	r3, r1, #4
 8004122:	d50a      	bpl.n	800413a <_printf_i+0xce>
 8004124:	680e      	ldr	r6, [r1, #0]
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	2e00      	cmp	r6, #0
 800412a:	da03      	bge.n	8004134 <_printf_i+0xc8>
 800412c:	232d      	movs	r3, #45	; 0x2d
 800412e:	4276      	negs	r6, r6
 8004130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004134:	230a      	movs	r3, #10
 8004136:	485e      	ldr	r0, [pc, #376]	; (80042b0 <_printf_i+0x244>)
 8004138:	e019      	b.n	800416e <_printf_i+0x102>
 800413a:	680e      	ldr	r6, [r1, #0]
 800413c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	bf18      	it	ne
 8004144:	b236      	sxthne	r6, r6
 8004146:	e7ef      	b.n	8004128 <_printf_i+0xbc>
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	6820      	ldr	r0, [r4, #0]
 800414c:	1d19      	adds	r1, r3, #4
 800414e:	6029      	str	r1, [r5, #0]
 8004150:	0601      	lsls	r1, r0, #24
 8004152:	d501      	bpl.n	8004158 <_printf_i+0xec>
 8004154:	681e      	ldr	r6, [r3, #0]
 8004156:	e002      	b.n	800415e <_printf_i+0xf2>
 8004158:	0646      	lsls	r6, r0, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0xe8>
 800415c:	881e      	ldrh	r6, [r3, #0]
 800415e:	2f6f      	cmp	r7, #111	; 0x6f
 8004160:	bf0c      	ite	eq
 8004162:	2308      	moveq	r3, #8
 8004164:	230a      	movne	r3, #10
 8004166:	4852      	ldr	r0, [pc, #328]	; (80042b0 <_printf_i+0x244>)
 8004168:	2100      	movs	r1, #0
 800416a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800416e:	6865      	ldr	r5, [r4, #4]
 8004170:	2d00      	cmp	r5, #0
 8004172:	bfa8      	it	ge
 8004174:	6821      	ldrge	r1, [r4, #0]
 8004176:	60a5      	str	r5, [r4, #8]
 8004178:	bfa4      	itt	ge
 800417a:	f021 0104 	bicge.w	r1, r1, #4
 800417e:	6021      	strge	r1, [r4, #0]
 8004180:	b90e      	cbnz	r6, 8004186 <_printf_i+0x11a>
 8004182:	2d00      	cmp	r5, #0
 8004184:	d04d      	beq.n	8004222 <_printf_i+0x1b6>
 8004186:	4615      	mov	r5, r2
 8004188:	fbb6 f1f3 	udiv	r1, r6, r3
 800418c:	fb03 6711 	mls	r7, r3, r1, r6
 8004190:	5dc7      	ldrb	r7, [r0, r7]
 8004192:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004196:	4637      	mov	r7, r6
 8004198:	42bb      	cmp	r3, r7
 800419a:	460e      	mov	r6, r1
 800419c:	d9f4      	bls.n	8004188 <_printf_i+0x11c>
 800419e:	2b08      	cmp	r3, #8
 80041a0:	d10b      	bne.n	80041ba <_printf_i+0x14e>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	07de      	lsls	r6, r3, #31
 80041a6:	d508      	bpl.n	80041ba <_printf_i+0x14e>
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	6861      	ldr	r1, [r4, #4]
 80041ac:	4299      	cmp	r1, r3
 80041ae:	bfde      	ittt	le
 80041b0:	2330      	movle	r3, #48	; 0x30
 80041b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ba:	1b52      	subs	r2, r2, r5
 80041bc:	6122      	str	r2, [r4, #16]
 80041be:	464b      	mov	r3, r9
 80041c0:	4621      	mov	r1, r4
 80041c2:	4640      	mov	r0, r8
 80041c4:	f8cd a000 	str.w	sl, [sp]
 80041c8:	aa03      	add	r2, sp, #12
 80041ca:	f7ff fedf 	bl	8003f8c <_printf_common>
 80041ce:	3001      	adds	r0, #1
 80041d0:	d14c      	bne.n	800426c <_printf_i+0x200>
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295
 80041d6:	b004      	add	sp, #16
 80041d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041dc:	4834      	ldr	r0, [pc, #208]	; (80042b0 <_printf_i+0x244>)
 80041de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80041e2:	6829      	ldr	r1, [r5, #0]
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80041ea:	6029      	str	r1, [r5, #0]
 80041ec:	061d      	lsls	r5, r3, #24
 80041ee:	d514      	bpl.n	800421a <_printf_i+0x1ae>
 80041f0:	07df      	lsls	r7, r3, #31
 80041f2:	bf44      	itt	mi
 80041f4:	f043 0320 	orrmi.w	r3, r3, #32
 80041f8:	6023      	strmi	r3, [r4, #0]
 80041fa:	b91e      	cbnz	r6, 8004204 <_printf_i+0x198>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	2310      	movs	r3, #16
 8004206:	e7af      	b.n	8004168 <_printf_i+0xfc>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	f043 0320 	orr.w	r3, r3, #32
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	2378      	movs	r3, #120	; 0x78
 8004212:	4828      	ldr	r0, [pc, #160]	; (80042b4 <_printf_i+0x248>)
 8004214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004218:	e7e3      	b.n	80041e2 <_printf_i+0x176>
 800421a:	0659      	lsls	r1, r3, #25
 800421c:	bf48      	it	mi
 800421e:	b2b6      	uxthmi	r6, r6
 8004220:	e7e6      	b.n	80041f0 <_printf_i+0x184>
 8004222:	4615      	mov	r5, r2
 8004224:	e7bb      	b.n	800419e <_printf_i+0x132>
 8004226:	682b      	ldr	r3, [r5, #0]
 8004228:	6826      	ldr	r6, [r4, #0]
 800422a:	1d18      	adds	r0, r3, #4
 800422c:	6961      	ldr	r1, [r4, #20]
 800422e:	6028      	str	r0, [r5, #0]
 8004230:	0635      	lsls	r5, r6, #24
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	d501      	bpl.n	800423a <_printf_i+0x1ce>
 8004236:	6019      	str	r1, [r3, #0]
 8004238:	e002      	b.n	8004240 <_printf_i+0x1d4>
 800423a:	0670      	lsls	r0, r6, #25
 800423c:	d5fb      	bpl.n	8004236 <_printf_i+0x1ca>
 800423e:	8019      	strh	r1, [r3, #0]
 8004240:	2300      	movs	r3, #0
 8004242:	4615      	mov	r5, r2
 8004244:	6123      	str	r3, [r4, #16]
 8004246:	e7ba      	b.n	80041be <_printf_i+0x152>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	2100      	movs	r1, #0
 800424c:	1d1a      	adds	r2, r3, #4
 800424e:	602a      	str	r2, [r5, #0]
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	4628      	mov	r0, r5
 8004256:	f000 f8c9 	bl	80043ec <memchr>
 800425a:	b108      	cbz	r0, 8004260 <_printf_i+0x1f4>
 800425c:	1b40      	subs	r0, r0, r5
 800425e:	6060      	str	r0, [r4, #4]
 8004260:	6863      	ldr	r3, [r4, #4]
 8004262:	6123      	str	r3, [r4, #16]
 8004264:	2300      	movs	r3, #0
 8004266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426a:	e7a8      	b.n	80041be <_printf_i+0x152>
 800426c:	462a      	mov	r2, r5
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	47d0      	blx	sl
 8004276:	3001      	adds	r0, #1
 8004278:	d0ab      	beq.n	80041d2 <_printf_i+0x166>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	079b      	lsls	r3, r3, #30
 800427e:	d413      	bmi.n	80042a8 <_printf_i+0x23c>
 8004280:	68e0      	ldr	r0, [r4, #12]
 8004282:	9b03      	ldr	r3, [sp, #12]
 8004284:	4298      	cmp	r0, r3
 8004286:	bfb8      	it	lt
 8004288:	4618      	movlt	r0, r3
 800428a:	e7a4      	b.n	80041d6 <_printf_i+0x16a>
 800428c:	2301      	movs	r3, #1
 800428e:	4632      	mov	r2, r6
 8004290:	4649      	mov	r1, r9
 8004292:	4640      	mov	r0, r8
 8004294:	47d0      	blx	sl
 8004296:	3001      	adds	r0, #1
 8004298:	d09b      	beq.n	80041d2 <_printf_i+0x166>
 800429a:	3501      	adds	r5, #1
 800429c:	68e3      	ldr	r3, [r4, #12]
 800429e:	9903      	ldr	r1, [sp, #12]
 80042a0:	1a5b      	subs	r3, r3, r1
 80042a2:	42ab      	cmp	r3, r5
 80042a4:	dcf2      	bgt.n	800428c <_printf_i+0x220>
 80042a6:	e7eb      	b.n	8004280 <_printf_i+0x214>
 80042a8:	2500      	movs	r5, #0
 80042aa:	f104 0619 	add.w	r6, r4, #25
 80042ae:	e7f5      	b.n	800429c <_printf_i+0x230>
 80042b0:	08007501 	.word	0x08007501
 80042b4:	08007512 	.word	0x08007512

080042b8 <__sread>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	f000 f8fa 	bl	80044b8 <_read_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	bfab      	itete	ge
 80042c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042ca:	89a3      	ldrhlt	r3, [r4, #12]
 80042cc:	181b      	addge	r3, r3, r0
 80042ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042d2:	bfac      	ite	ge
 80042d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80042d6:	81a3      	strhlt	r3, [r4, #12]
 80042d8:	bd10      	pop	{r4, pc}

080042da <__swrite>:
 80042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	461f      	mov	r7, r3
 80042e0:	898b      	ldrh	r3, [r1, #12]
 80042e2:	4605      	mov	r5, r0
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	460c      	mov	r4, r1
 80042e8:	4616      	mov	r6, r2
 80042ea:	d505      	bpl.n	80042f8 <__swrite+0x1e>
 80042ec:	2302      	movs	r3, #2
 80042ee:	2200      	movs	r2, #0
 80042f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f4:	f000 f868 	bl	80043c8 <_lseek_r>
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	4632      	mov	r2, r6
 80042fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	4628      	mov	r0, r5
 8004304:	463b      	mov	r3, r7
 8004306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800430a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	f000 b817 	b.w	8004340 <_write_r>

08004312 <__sseek>:
 8004312:	b510      	push	{r4, lr}
 8004314:	460c      	mov	r4, r1
 8004316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431a:	f000 f855 	bl	80043c8 <_lseek_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	bf15      	itete	ne
 8004324:	6560      	strne	r0, [r4, #84]	; 0x54
 8004326:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800432a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800432e:	81a3      	strheq	r3, [r4, #12]
 8004330:	bf18      	it	ne
 8004332:	81a3      	strhne	r3, [r4, #12]
 8004334:	bd10      	pop	{r4, pc}

08004336 <__sclose>:
 8004336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433a:	f000 b813 	b.w	8004364 <_close_r>
	...

08004340 <_write_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	2200      	movs	r2, #0
 800434a:	4d05      	ldr	r5, [pc, #20]	; (8004360 <_write_r+0x20>)
 800434c:	602a      	str	r2, [r5, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fd fc9e 	bl	8001c90 <_write>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_write_r+0x1e>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_write_r+0x1e>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000148 	.word	0x20000148

08004364 <_close_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	2300      	movs	r3, #0
 8004368:	4d05      	ldr	r5, [pc, #20]	; (8004380 <_close_r+0x1c>)
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	f7fd fcaa 	bl	8001cc8 <_close>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_close_r+0x1a>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_close_r+0x1a>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	20000148 	.word	0x20000148

08004384 <_fstat_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	2300      	movs	r3, #0
 8004388:	4d06      	ldr	r5, [pc, #24]	; (80043a4 <_fstat_r+0x20>)
 800438a:	4604      	mov	r4, r0
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	602b      	str	r3, [r5, #0]
 8004392:	f7fd fca4 	bl	8001cde <_fstat>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d102      	bne.n	80043a0 <_fstat_r+0x1c>
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	b103      	cbz	r3, 80043a0 <_fstat_r+0x1c>
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
 80043a2:	bf00      	nop
 80043a4:	20000148 	.word	0x20000148

080043a8 <_isatty_r>:
 80043a8:	b538      	push	{r3, r4, r5, lr}
 80043aa:	2300      	movs	r3, #0
 80043ac:	4d05      	ldr	r5, [pc, #20]	; (80043c4 <_isatty_r+0x1c>)
 80043ae:	4604      	mov	r4, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	602b      	str	r3, [r5, #0]
 80043b4:	f7fd fca2 	bl	8001cfc <_isatty>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_isatty_r+0x1a>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_isatty_r+0x1a>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	20000148 	.word	0x20000148

080043c8 <_lseek_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	2200      	movs	r2, #0
 80043d2:	4d05      	ldr	r5, [pc, #20]	; (80043e8 <_lseek_r+0x20>)
 80043d4:	602a      	str	r2, [r5, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7fd fc9a 	bl	8001d10 <_lseek>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_lseek_r+0x1e>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_lseek_r+0x1e>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000148 	.word	0x20000148

080043ec <memchr>:
 80043ec:	4603      	mov	r3, r0
 80043ee:	b510      	push	{r4, lr}
 80043f0:	b2c9      	uxtb	r1, r1
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	d101      	bne.n	80043fe <memchr+0x12>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e003      	b.n	8004406 <memchr+0x1a>
 80043fe:	7804      	ldrb	r4, [r0, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	428c      	cmp	r4, r1
 8004404:	d1f6      	bne.n	80043f4 <memchr+0x8>
 8004406:	bd10      	pop	{r4, pc}

08004408 <memcpy>:
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004410:	d100      	bne.n	8004414 <memcpy+0xc>
 8004412:	4770      	bx	lr
 8004414:	b510      	push	{r4, lr}
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	4291      	cmp	r1, r2
 800441c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004420:	d1f9      	bne.n	8004416 <memcpy+0xe>
 8004422:	bd10      	pop	{r4, pc}

08004424 <memmove>:
 8004424:	4288      	cmp	r0, r1
 8004426:	b510      	push	{r4, lr}
 8004428:	eb01 0402 	add.w	r4, r1, r2
 800442c:	d902      	bls.n	8004434 <memmove+0x10>
 800442e:	4284      	cmp	r4, r0
 8004430:	4623      	mov	r3, r4
 8004432:	d807      	bhi.n	8004444 <memmove+0x20>
 8004434:	1e43      	subs	r3, r0, #1
 8004436:	42a1      	cmp	r1, r4
 8004438:	d008      	beq.n	800444c <memmove+0x28>
 800443a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800443e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004442:	e7f8      	b.n	8004436 <memmove+0x12>
 8004444:	4601      	mov	r1, r0
 8004446:	4402      	add	r2, r0
 8004448:	428a      	cmp	r2, r1
 800444a:	d100      	bne.n	800444e <memmove+0x2a>
 800444c:	bd10      	pop	{r4, pc}
 800444e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004456:	e7f7      	b.n	8004448 <memmove+0x24>

08004458 <_realloc_r>:
 8004458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	4680      	mov	r8, r0
 800445e:	4614      	mov	r4, r2
 8004460:	460e      	mov	r6, r1
 8004462:	b921      	cbnz	r1, 800446e <_realloc_r+0x16>
 8004464:	4611      	mov	r1, r2
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f7ff b831 	b.w	80034d0 <_malloc_r>
 800446e:	b92a      	cbnz	r2, 800447c <_realloc_r+0x24>
 8004470:	f7fe ffc6 	bl	8003400 <_free_r>
 8004474:	4625      	mov	r5, r4
 8004476:	4628      	mov	r0, r5
 8004478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800447c:	f000 f82e 	bl	80044dc <_malloc_usable_size_r>
 8004480:	4284      	cmp	r4, r0
 8004482:	4607      	mov	r7, r0
 8004484:	d802      	bhi.n	800448c <_realloc_r+0x34>
 8004486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800448a:	d812      	bhi.n	80044b2 <_realloc_r+0x5a>
 800448c:	4621      	mov	r1, r4
 800448e:	4640      	mov	r0, r8
 8004490:	f7ff f81e 	bl	80034d0 <_malloc_r>
 8004494:	4605      	mov	r5, r0
 8004496:	2800      	cmp	r0, #0
 8004498:	d0ed      	beq.n	8004476 <_realloc_r+0x1e>
 800449a:	42bc      	cmp	r4, r7
 800449c:	4622      	mov	r2, r4
 800449e:	4631      	mov	r1, r6
 80044a0:	bf28      	it	cs
 80044a2:	463a      	movcs	r2, r7
 80044a4:	f7ff ffb0 	bl	8004408 <memcpy>
 80044a8:	4631      	mov	r1, r6
 80044aa:	4640      	mov	r0, r8
 80044ac:	f7fe ffa8 	bl	8003400 <_free_r>
 80044b0:	e7e1      	b.n	8004476 <_realloc_r+0x1e>
 80044b2:	4635      	mov	r5, r6
 80044b4:	e7df      	b.n	8004476 <_realloc_r+0x1e>
	...

080044b8 <_read_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	4608      	mov	r0, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	2200      	movs	r2, #0
 80044c2:	4d05      	ldr	r5, [pc, #20]	; (80044d8 <_read_r+0x20>)
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7fd fbc5 	bl	8001c56 <_read>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_read_r+0x1e>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_read_r+0x1e>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	20000148 	.word	0x20000148

080044dc <_malloc_usable_size_r>:
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f18      	subs	r0, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfbc      	itt	lt
 80044e6:	580b      	ldrlt	r3, [r1, r0]
 80044e8:	18c0      	addlt	r0, r0, r3
 80044ea:	4770      	bx	lr

080044ec <_init>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr

080044f8 <_fini>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr
