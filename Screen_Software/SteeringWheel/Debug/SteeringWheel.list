
SteeringWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000209c  0800361c  0800361c  0001361c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b8  080056b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c0  080056c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080056c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000078  08005740  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08005740  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0db  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fff  00000000  00000000  0002c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002e180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002090c  00000000  00000000  0002f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a794  00000000  00000000  0004f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc28e  00000000  00000000  0005a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011641e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002610  00000000  00000000  00116474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000078 	.word	0x20000078
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003604 	.word	0x08003604

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000007c 	.word	0x2000007c
 80001c0:	08003604 	.word	0x08003604

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	4608      	mov	r0, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	461a      	mov	r2, r3
 80004ca:	4603      	mov	r3, r0
 80004cc:	817b      	strh	r3, [r7, #10]
 80004ce:	460b      	mov	r3, r1
 80004d0:	813b      	strh	r3, [r7, #8]
 80004d2:	4613      	mov	r3, r2
 80004d4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80004d6:	4b22      	ldr	r3, [pc, #136]	; (8000560 <Paint_NewImage+0xa4>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80004dc:	4a20      	ldr	r2, [pc, #128]	; (8000560 <Paint_NewImage+0xa4>)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80004e2:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <Paint_NewImage+0xa4>)
 80004e4:	897b      	ldrh	r3, [r7, #10]
 80004e6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <Paint_NewImage+0xa4>)
 80004ea:	893b      	ldrh	r3, [r7, #8]
 80004ec:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <Paint_NewImage+0xa4>)
 80004f0:	8b3b      	ldrh	r3, [r7, #24]
 80004f2:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <Paint_NewImage+0xa4>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80004fa:	897b      	ldrh	r3, [r7, #10]
 80004fc:	f003 0307 	and.w	r3, r3, #7
 8000500:	b29b      	uxth	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d103      	bne.n	800050e <Paint_NewImage+0x52>
 8000506:	897b      	ldrh	r3, [r7, #10]
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	b29b      	uxth	r3, r3
 800050c:	e004      	b.n	8000518 <Paint_NewImage+0x5c>
 800050e:	897b      	ldrh	r3, [r7, #10]
 8000510:	08db      	lsrs	r3, r3, #3
 8000512:	b29b      	uxth	r3, r3
 8000514:	3301      	adds	r3, #1
 8000516:	b29b      	uxth	r3, r3
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <Paint_NewImage+0xa4>)
 800051a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <Paint_NewImage+0xa4>)
 800051e:	893b      	ldrh	r3, [r7, #8]
 8000520:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8000522:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <Paint_NewImage+0xa4>)
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <Paint_NewImage+0xa4>)
 800052a:	2200      	movs	r2, #0
 800052c:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d002      	beq.n	800053a <Paint_NewImage+0x7e>
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	2bb4      	cmp	r3, #180	; 0xb4
 8000538:	d106      	bne.n	8000548 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800053a:	4a09      	ldr	r2, [pc, #36]	; (8000560 <Paint_NewImage+0xa4>)
 800053c:	897b      	ldrh	r3, [r7, #10]
 800053e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <Paint_NewImage+0xa4>)
 8000542:	893b      	ldrh	r3, [r7, #8]
 8000544:	80d3      	strh	r3, [r2, #6]
 8000546:	e006      	b.n	8000556 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <Paint_NewImage+0xa4>)
 800054a:	893b      	ldrh	r3, [r7, #8]
 800054c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <Paint_NewImage+0xa4>)
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	80d3      	strh	r3, [r2, #6]
    }
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	200000a0 	.word	0x200000a0

08000564 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <Paint_SelectImage+0x18>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	200000a0 	.word	0x200000a0

08000580 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d118      	bne.n	80005c2 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	b29a      	uxth	r2, r3
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <Paint_SetScale+0xc8>)
 8000596:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 8000598:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <Paint_SetScale+0xc8>)
 800059a:	891b      	ldrh	r3, [r3, #8]
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d104      	bne.n	80005b0 <Paint_SetScale+0x30>
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <Paint_SetScale+0xc8>)
 80005a8:	891b      	ldrh	r3, [r3, #8]
 80005aa:	08db      	lsrs	r3, r3, #3
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	e005      	b.n	80005bc <Paint_SetScale+0x3c>
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <Paint_SetScale+0xc8>)
 80005b2:	891b      	ldrh	r3, [r3, #8]
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	3301      	adds	r3, #1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4a22      	ldr	r2, [pc, #136]	; (8000648 <Paint_SetScale+0xc8>)
 80005be:	8253      	strh	r3, [r2, #18]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
		}else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 7\r\n");
    }
}
 80005c0:	e03d      	b.n	800063e <Paint_SetScale+0xbe>
    }else if(scale == 4){
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d118      	bne.n	80005fa <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <Paint_SetScale+0xc8>)
 80005ce:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <Paint_SetScale+0xc8>)
 80005d2:	891b      	ldrh	r3, [r3, #8]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	b29b      	uxth	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d104      	bne.n	80005e8 <Paint_SetScale+0x68>
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <Paint_SetScale+0xc8>)
 80005e0:	891b      	ldrh	r3, [r3, #8]
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	e005      	b.n	80005f4 <Paint_SetScale+0x74>
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <Paint_SetScale+0xc8>)
 80005ea:	891b      	ldrh	r3, [r3, #8]
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3301      	adds	r3, #1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <Paint_SetScale+0xc8>)
 80005f6:	8253      	strh	r3, [r2, #18]
}
 80005f8:	e021      	b.n	800063e <Paint_SetScale+0xbe>
    }else if(scale == 7){//Only applicable with 5in65 e-Paper
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b07      	cmp	r3, #7
 80005fe:	d118      	bne.n	8000632 <Paint_SetScale+0xb2>
				Paint.Scale = scale;
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	b29a      	uxth	r2, r3
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <Paint_SetScale+0xc8>)
 8000606:	82da      	strh	r2, [r3, #22]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <Paint_SetScale+0xc8>)
 800060a:	891b      	ldrh	r3, [r3, #8]
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b29b      	uxth	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d104      	bne.n	8000620 <Paint_SetScale+0xa0>
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <Paint_SetScale+0xc8>)
 8000618:	891b      	ldrh	r3, [r3, #8]
 800061a:	085b      	lsrs	r3, r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	e005      	b.n	800062c <Paint_SetScale+0xac>
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <Paint_SetScale+0xc8>)
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	b29b      	uxth	r3, r3
 8000628:	3301      	adds	r3, #1
 800062a:	b29b      	uxth	r3, r3
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <Paint_SetScale+0xc8>)
 800062e:	8253      	strh	r3, [r2, #18]
}
 8000630:	e005      	b.n	800063e <Paint_SetScale+0xbe>
        Debug("Set Scale Input parameter error\r\n");
 8000632:	4806      	ldr	r0, [pc, #24]	; (800064c <Paint_SetScale+0xcc>)
 8000634:	f002 fc38 	bl	8002ea8 <puts>
        Debug("Scale Only support: 2 4 7\r\n");
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <Paint_SetScale+0xd0>)
 800063a:	f002 fc35 	bl	8002ea8 <puts>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000a0 	.word	0x200000a0
 800064c:	08003660 	.word	0x08003660
 8000650:	08003688 	.word	0x08003688

08000654 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
 800065e:	460b      	mov	r3, r1
 8000660:	80bb      	strh	r3, [r7, #4]
 8000662:	4613      	mov	r3, r2
 8000664:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000666:	4b9f      	ldr	r3, [pc, #636]	; (80008e4 <Paint_SetPixel+0x290>)
 8000668:	889b      	ldrh	r3, [r3, #4]
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	429a      	cmp	r2, r3
 800066e:	d804      	bhi.n	800067a <Paint_SetPixel+0x26>
 8000670:	4b9c      	ldr	r3, [pc, #624]	; (80008e4 <Paint_SetPixel+0x290>)
 8000672:	88db      	ldrh	r3, [r3, #6]
 8000674:	88ba      	ldrh	r2, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	d903      	bls.n	8000682 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800067a:	489b      	ldr	r0, [pc, #620]	; (80008e8 <Paint_SetPixel+0x294>)
 800067c:	f002 fc14 	bl	8002ea8 <puts>
        return;
 8000680:	e12d      	b.n	80008de <Paint_SetPixel+0x28a>
    }
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000682:	4b98      	ldr	r3, [pc, #608]	; (80008e4 <Paint_SetPixel+0x290>)
 8000684:	89db      	ldrh	r3, [r3, #14]
 8000686:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800068a:	d02b      	beq.n	80006e4 <Paint_SetPixel+0x90>
 800068c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000690:	f300 8122 	bgt.w	80008d8 <Paint_SetPixel+0x284>
 8000694:	2bb4      	cmp	r3, #180	; 0xb4
 8000696:	d016      	beq.n	80006c6 <Paint_SetPixel+0x72>
 8000698:	2bb4      	cmp	r3, #180	; 0xb4
 800069a:	f300 811d 	bgt.w	80008d8 <Paint_SetPixel+0x284>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <Paint_SetPixel+0x54>
 80006a2:	2b5a      	cmp	r3, #90	; 0x5a
 80006a4:	d005      	beq.n	80006b2 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80006a6:	e117      	b.n	80008d8 <Paint_SetPixel+0x284>
        X = Xpoint;
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;
 80006ac:	88bb      	ldrh	r3, [r7, #4]
 80006ae:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006b0:	e022      	b.n	80006f8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80006b2:	4b8c      	ldr	r3, [pc, #560]	; (80008e4 <Paint_SetPixel+0x290>)
 80006b4:	891a      	ldrh	r2, [r3, #8]
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006c4:	e018      	b.n	80006f8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80006c6:	4b87      	ldr	r3, [pc, #540]	; (80008e4 <Paint_SetPixel+0x290>)
 80006c8:	891a      	ldrh	r2, [r3, #8]
 80006ca:	88fb      	ldrh	r3, [r7, #6]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	3b01      	subs	r3, #1
 80006d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80006d4:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <Paint_SetPixel+0x290>)
 80006d6:	895a      	ldrh	r2, [r3, #10]
 80006d8:	88bb      	ldrh	r3, [r7, #4]
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	b29b      	uxth	r3, r3
 80006de:	3b01      	subs	r3, #1
 80006e0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006e2:	e009      	b.n	80006f8 <Paint_SetPixel+0xa4>
        X = Ypoint;
 80006e4:	88bb      	ldrh	r3, [r7, #4]
 80006e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 80006e8:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <Paint_SetPixel+0x290>)
 80006ea:	895a      	ldrh	r2, [r3, #10]
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3b01      	subs	r3, #1
 80006f4:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006f6:	bf00      	nop
    }

    switch(Paint.Mirror) {
 80006f8:	4b7a      	ldr	r3, [pc, #488]	; (80008e4 <Paint_SetPixel+0x290>)
 80006fa:	8a1b      	ldrh	r3, [r3, #16]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	f200 80ed 	bhi.w	80008dc <Paint_SetPixel+0x288>
 8000702:	a201      	add	r2, pc, #4	; (adr r2, 8000708 <Paint_SetPixel+0xb4>)
 8000704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000708:	08000757 	.word	0x08000757
 800070c:	08000719 	.word	0x08000719
 8000710:	08000729 	.word	0x08000729
 8000714:	08000739 	.word	0x08000739
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000718:	4b72      	ldr	r3, [pc, #456]	; (80008e4 <Paint_SetPixel+0x290>)
 800071a:	891a      	ldrh	r2, [r3, #8]
 800071c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	b29b      	uxth	r3, r3
 8000722:	3b01      	subs	r3, #1
 8000724:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8000726:	e017      	b.n	8000758 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000728:	4b6e      	ldr	r3, [pc, #440]	; (80008e4 <Paint_SetPixel+0x290>)
 800072a:	895a      	ldrh	r2, [r3, #10]
 800072c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000736:	e00f      	b.n	8000758 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000738:	4b6a      	ldr	r3, [pc, #424]	; (80008e4 <Paint_SetPixel+0x290>)
 800073a:	891a      	ldrh	r2, [r3, #8]
 800073c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b29b      	uxth	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000746:	4b67      	ldr	r3, [pc, #412]	; (80008e4 <Paint_SetPixel+0x290>)
 8000748:	895a      	ldrh	r2, [r3, #10]
 800074a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	b29b      	uxth	r3, r3
 8000750:	3b01      	subs	r3, #1
 8000752:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000754:	e000      	b.n	8000758 <Paint_SetPixel+0x104>
        break;
 8000756:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000758:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <Paint_SetPixel+0x290>)
 800075a:	891b      	ldrh	r3, [r3, #8]
 800075c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800075e:	429a      	cmp	r2, r3
 8000760:	d804      	bhi.n	800076c <Paint_SetPixel+0x118>
 8000762:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <Paint_SetPixel+0x290>)
 8000764:	895b      	ldrh	r3, [r3, #10]
 8000766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000768:	429a      	cmp	r2, r3
 800076a:	d903      	bls.n	8000774 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800076c:	485e      	ldr	r0, [pc, #376]	; (80008e8 <Paint_SetPixel+0x294>)
 800076e:	f002 fb9b 	bl	8002ea8 <puts>
        return;
 8000772:	e0b4      	b.n	80008de <Paint_SetPixel+0x28a>
    }

    if(Paint.Scale == 2){
 8000774:	4b5b      	ldr	r3, [pc, #364]	; (80008e4 <Paint_SetPixel+0x290>)
 8000776:	8adb      	ldrh	r3, [r3, #22]
 8000778:	2b02      	cmp	r3, #2
 800077a:	d139      	bne.n	80007f0 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800077c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b29b      	uxth	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000786:	4a57      	ldr	r2, [pc, #348]	; (80008e4 <Paint_SetPixel+0x290>)
 8000788:	8a52      	ldrh	r2, [r2, #18]
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	440b      	add	r3, r1
 8000790:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8000792:	4b54      	ldr	r3, [pc, #336]	; (80008e4 <Paint_SetPixel+0x290>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80007a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	fa42 f303 	asr.w	r3, r2, r3
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	43db      	mvns	r3, r3
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4013      	ands	r3, r2
 80007bc:	b259      	sxtb	r1, r3
 80007be:	4b49      	ldr	r3, [pc, #292]	; (80008e4 <Paint_SetPixel+0x290>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	4413      	add	r3, r2
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	e088      	b.n	80008de <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80007cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	fa42 f303 	asr.w	r3, r2, r3
 80007d8:	b25a      	sxtb	r2, r3
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4313      	orrs	r3, r2
 80007e0:	b259      	sxtb	r1, r3
 80007e2:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <Paint_SetPixel+0x290>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2ca      	uxtb	r2, r1
 80007ec:	701a      	strb	r2, [r3, #0]
 80007ee:	e076      	b.n	80008de <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <Paint_SetPixel+0x290>)
 80007f2:	8adb      	ldrh	r3, [r3, #22]
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d137      	bne.n	8000868 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 80007f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000802:	4a38      	ldr	r2, [pc, #224]	; (80008e4 <Paint_SetPixel+0x290>)
 8000804:	8a52      	ldrh	r2, [r2, #18]
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	440b      	add	r3, r1
 800080c:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800080e:	887b      	ldrh	r3, [r7, #2]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <Paint_SetPixel+0x290>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	4413      	add	r3, r2
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	75fb      	strb	r3, [r7, #23]

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	22c0      	movs	r2, #192	; 0xc0
 800082c:	fa42 f303 	asr.w	r3, r2, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25a      	sxtb	r2, r3
 8000836:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800083a:	4013      	ands	r3, r2
 800083c:	b25b      	sxtb	r3, r3
 800083e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000840:	887b      	ldrh	r3, [r7, #2]
 8000842:	019a      	lsls	r2, r3, #6
 8000844:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	fa42 f303 	asr.w	r3, r2, r3
 8000850:	b25a      	sxtb	r2, r3
 8000852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000856:	4313      	orrs	r3, r2
 8000858:	b259      	sxtb	r1, r3
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <Paint_SetPixel+0x290>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	4413      	add	r3, r2
 8000862:	b2ca      	uxtb	r2, r1
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e03a      	b.n	80008de <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <Paint_SetPixel+0x290>)
 800086a:	8adb      	ldrh	r3, [r3, #22]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d136      	bne.n	80008de <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000872:	085b      	lsrs	r3, r3, #1
 8000874:	b29b      	uxth	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800087a:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <Paint_SetPixel+0x290>)
 800087c:	8a52      	ldrh	r2, [r2, #18]
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	440b      	add	r3, r1
 8000884:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <Paint_SetPixel+0x290>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8000892:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	22f0      	movs	r2, #240	; 0xf0
 800089c:	fa42 f303 	asr.w	r3, r2, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008aa:	4013      	ands	r3, r2
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80008b0:	887b      	ldrh	r3, [r7, #2]
 80008b2:	011a      	lsls	r2, r3, #4
 80008b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	fa42 f303 	asr.w	r3, r2, r3
 80008c0:	b25a      	sxtb	r2, r3
 80008c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b259      	sxtb	r1, r3
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <Paint_SetPixel+0x290>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	4413      	add	r3, r2
 80008d2:	b2ca      	uxtb	r2, r1
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	e002      	b.n	80008de <Paint_SetPixel+0x28a>
        return;
 80008d8:	bf00      	nop
 80008da:	e000      	b.n	80008de <Paint_SetPixel+0x28a>
        return;
 80008dc:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000a0 	.word	0x200000a0
 80008e8:	08003744 	.word	0x08003744

080008ec <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <Paint_Clear+0xd0>)
 80008f8:	8adb      	ldrh	r3, [r3, #22]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d003      	beq.n	8000906 <Paint_Clear+0x1a>
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <Paint_Clear+0xd0>)
 8000900:	8adb      	ldrh	r3, [r3, #22]
 8000902:	2b04      	cmp	r3, #4
 8000904:	d125      	bne.n	8000952 <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000906:	2300      	movs	r3, #0
 8000908:	82fb      	strh	r3, [r7, #22]
 800090a:	e01c      	b.n	8000946 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800090c:	2300      	movs	r3, #0
 800090e:	82bb      	strh	r3, [r7, #20]
 8000910:	e011      	b.n	8000936 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000912:	8aba      	ldrh	r2, [r7, #20]
 8000914:	8afb      	ldrh	r3, [r7, #22]
 8000916:	4929      	ldr	r1, [pc, #164]	; (80009bc <Paint_Clear+0xd0>)
 8000918:	8a49      	ldrh	r1, [r1, #18]
 800091a:	fb01 f303 	mul.w	r3, r1, r3
 800091e:	4413      	add	r3, r2
 8000920:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <Paint_Clear+0xd0>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	88fa      	ldrh	r2, [r7, #6]
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000930:	8abb      	ldrh	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	82bb      	strh	r3, [r7, #20]
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <Paint_Clear+0xd0>)
 8000938:	8a5b      	ldrh	r3, [r3, #18]
 800093a:	8aba      	ldrh	r2, [r7, #20]
 800093c:	429a      	cmp	r2, r3
 800093e:	d3e8      	bcc.n	8000912 <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000940:	8afb      	ldrh	r3, [r7, #22]
 8000942:	3301      	adds	r3, #1
 8000944:	82fb      	strh	r3, [r7, #22]
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <Paint_Clear+0xd0>)
 8000948:	8a9b      	ldrh	r3, [r3, #20]
 800094a:	8afa      	ldrh	r2, [r7, #22]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3dd      	bcc.n	800090c <Paint_Clear+0x20>
 8000950:	e02f      	b.n	80009b2 <Paint_Clear+0xc6>
			}
		}
	}else if(Paint.Scale == 7){
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <Paint_Clear+0xd0>)
 8000954:	8adb      	ldrh	r3, [r3, #22]
 8000956:	2b07      	cmp	r3, #7
 8000958:	d12b      	bne.n	80009b2 <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800095a:	2300      	movs	r3, #0
 800095c:	827b      	strh	r3, [r7, #18]
 800095e:	e022      	b.n	80009a6 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000960:	2300      	movs	r3, #0
 8000962:	823b      	strh	r3, [r7, #16]
 8000964:	e017      	b.n	8000996 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000966:	8a3a      	ldrh	r2, [r7, #16]
 8000968:	8a7b      	ldrh	r3, [r7, #18]
 800096a:	4914      	ldr	r1, [pc, #80]	; (80009bc <Paint_Clear+0xd0>)
 800096c:	8a49      	ldrh	r1, [r1, #18]
 800096e:	fb01 f303 	mul.w	r3, r1, r3
 8000972:	4413      	add	r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	b25a      	sxtb	r2, r3
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b259      	sxtb	r1, r3
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <Paint_Clear+0xd0>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	b2ca      	uxtb	r2, r1
 800098e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000990:	8a3b      	ldrh	r3, [r7, #16]
 8000992:	3301      	adds	r3, #1
 8000994:	823b      	strh	r3, [r7, #16]
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <Paint_Clear+0xd0>)
 8000998:	8a5b      	ldrh	r3, [r3, #18]
 800099a:	8a3a      	ldrh	r2, [r7, #16]
 800099c:	429a      	cmp	r2, r3
 800099e:	d3e2      	bcc.n	8000966 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80009a0:	8a7b      	ldrh	r3, [r7, #18]
 80009a2:	3301      	adds	r3, #1
 80009a4:	827b      	strh	r3, [r7, #18]
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <Paint_Clear+0xd0>)
 80009a8:	8a9b      	ldrh	r3, [r3, #20]
 80009aa:	8a7a      	ldrh	r2, [r7, #18]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3d7      	bcc.n	8000960 <Paint_Clear+0x74>
			}
		}
	}
}
 80009b0:	e7ff      	b.n	80009b2 <Paint_Clear+0xc6>
 80009b2:	bf00      	nop
 80009b4:	371c      	adds	r7, #28
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	200000a0 	.word	0x200000a0

080009c0 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	4603      	mov	r3, r0
 80009ca:	81fb      	strh	r3, [r7, #14]
 80009cc:	460b      	mov	r3, r1
 80009ce:	81bb      	strh	r3, [r7, #12]
 80009d0:	4613      	mov	r3, r2
 80009d2:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <Paint_DrawChar+0x148>)
 80009d6:	889b      	ldrh	r3, [r3, #4]
 80009d8:	89fa      	ldrh	r2, [r7, #14]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d804      	bhi.n	80009e8 <Paint_DrawChar+0x28>
 80009de:	4b4a      	ldr	r3, [pc, #296]	; (8000b08 <Paint_DrawChar+0x148>)
 80009e0:	88db      	ldrh	r3, [r3, #6]
 80009e2:	89ba      	ldrh	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d903      	bls.n	80009f0 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80009e8:	4848      	ldr	r0, [pc, #288]	; (8000b0c <Paint_DrawChar+0x14c>)
 80009ea:	f002 fa5d 	bl	8002ea8 <puts>
        return;
 80009ee:	e087      	b.n	8000b00 <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	3b20      	subs	r3, #32
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	88d2      	ldrh	r2, [r2, #6]
 80009f8:	fb02 f303 	mul.w	r3, r2, r3
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	8892      	ldrh	r2, [r2, #4]
 8000a00:	08d2      	lsrs	r2, r2, #3
 8000a02:	b292      	uxth	r2, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	8892      	ldrh	r2, [r2, #4]
 8000a0a:	f002 0207 	and.w	r2, r2, #7
 8000a0e:	b292      	uxth	r2, r2
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	bf14      	ite	ne
 8000a14:	2201      	movne	r2, #1
 8000a16:	2200      	moveq	r2, #0
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440a      	add	r2, r1
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	4413      	add	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	83fb      	strh	r3, [r7, #30]
 8000a30:	e061      	b.n	8000af6 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000a32:	2300      	movs	r3, #0
 8000a34:	83bb      	strh	r3, [r7, #28]
 8000a36:	e04c      	b.n	8000ad2 <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000a38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a3a:	2bff      	cmp	r3, #255	; 0xff
 8000a3c:	d118      	bne.n	8000a70 <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	8bbb      	ldrh	r3, [r7, #28]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	fa42 f303 	asr.w	r3, r2, r3
 8000a50:	400b      	ands	r3, r1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d031      	beq.n	8000aba <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000a56:	89fa      	ldrh	r2, [r7, #14]
 8000a58:	8bbb      	ldrh	r3, [r7, #28]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b298      	uxth	r0, r3
 8000a5e:	89ba      	ldrh	r2, [r7, #12]
 8000a60:	8bfb      	ldrh	r3, [r7, #30]
 8000a62:	4413      	add	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f7ff fdf3 	bl	8000654 <Paint_SetPixel>
 8000a6e:	e024      	b.n	8000aba <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	8bbb      	ldrh	r3, [r7, #28]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	fa42 f303 	asr.w	r3, r2, r3
 8000a82:	400b      	ands	r3, r1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00c      	beq.n	8000aa2 <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000a88:	89fa      	ldrh	r2, [r7, #14]
 8000a8a:	8bbb      	ldrh	r3, [r7, #28]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b298      	uxth	r0, r3
 8000a90:	89ba      	ldrh	r2, [r7, #12]
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	4413      	add	r3, r2
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f7ff fdda 	bl	8000654 <Paint_SetPixel>
 8000aa0:	e00b      	b.n	8000aba <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000aa2:	89fa      	ldrh	r2, [r7, #14]
 8000aa4:	8bbb      	ldrh	r3, [r7, #28]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b298      	uxth	r0, r3
 8000aaa:	89ba      	ldrh	r2, [r7, #12]
 8000aac:	8bfb      	ldrh	r3, [r7, #30]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f7ff fdcd 	bl	8000654 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000aba:	8bbb      	ldrh	r3, [r7, #28]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	2b07      	cmp	r3, #7
 8000ac4:	d102      	bne.n	8000acc <Paint_DrawChar+0x10c>
                ptr++;
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000acc:	8bbb      	ldrh	r3, [r7, #28]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	83bb      	strh	r3, [r7, #28]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	889b      	ldrh	r3, [r3, #4]
 8000ad6:	8bba      	ldrh	r2, [r7, #28]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d3ad      	bcc.n	8000a38 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <Paint_DrawChar+0x130>
            ptr++;
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000af0:	8bfb      	ldrh	r3, [r7, #30]
 8000af2:	3301      	adds	r3, #1
 8000af4:	83fb      	strh	r3, [r7, #30]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	88db      	ldrh	r3, [r3, #6]
 8000afa:	8bfa      	ldrh	r2, [r7, #30]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d398      	bcc.n	8000a32 <Paint_DrawChar+0x72>
    }// Write all
}
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000a0 	.word	0x200000a0
 8000b0c:	080038a8 	.word	0x080038a8

08000b10 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000b26:	89bb      	ldrh	r3, [r7, #12]
 8000b28:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000b2a:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <Paint_DrawString_EN+0xa0>)
 8000b2c:	889b      	ldrh	r3, [r3, #4]
 8000b2e:	89fa      	ldrh	r2, [r7, #14]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d804      	bhi.n	8000b3e <Paint_DrawString_EN+0x2e>
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <Paint_DrawString_EN+0xa0>)
 8000b36:	88db      	ldrh	r3, [r3, #6]
 8000b38:	89ba      	ldrh	r2, [r7, #12]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d931      	bls.n	8000ba2 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <Paint_DrawString_EN+0xa4>)
 8000b40:	f002 f9b2 	bl	8002ea8 <puts>
        return;
 8000b44:	e031      	b.n	8000baa <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000b46:	8afb      	ldrh	r3, [r7, #22]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	8892      	ldrh	r2, [r2, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <Paint_DrawString_EN+0xa0>)
 8000b50:	8892      	ldrh	r2, [r2, #4]
 8000b52:	4293      	cmp	r3, r2
 8000b54:	dd06      	ble.n	8000b64 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	88da      	ldrh	r2, [r3, #6]
 8000b5e:	8abb      	ldrh	r3, [r7, #20]
 8000b60:	4413      	add	r3, r2
 8000b62:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000b64:	8abb      	ldrh	r3, [r7, #20]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	88d2      	ldrh	r2, [r2, #6]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <Paint_DrawString_EN+0xa0>)
 8000b6e:	88d2      	ldrh	r2, [r2, #6]
 8000b70:	4293      	cmp	r3, r2
 8000b72:	dd03      	ble.n	8000b7c <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8000b74:	89fb      	ldrh	r3, [r7, #14]
 8000b76:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000b78:	89bb      	ldrh	r3, [r7, #12]
 8000b7a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	8ab9      	ldrh	r1, [r7, #20]
 8000b82:	8af8      	ldrh	r0, [r7, #22]
 8000b84:	8c3b      	ldrh	r3, [r7, #32]
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f7ff ff17 	bl	80009c0 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	889a      	ldrh	r2, [r3, #4]
 8000b9c:	8afb      	ldrh	r3, [r7, #22]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1cd      	bne.n	8000b46 <Paint_DrawString_EN+0x36>
    }
}
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	080038e8 	.word	0x080038e8

08000bb8 <Screen_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void Screen_Reset(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <Screen_Reset+0x3c>)
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f000 fb11 	bl	80011e8 <Screen_Digital_Write>
    Screen_Delay_ms(300);
 8000bc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bca:	f000 fed3 	bl	8001974 <HAL_Delay>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <Screen_Reset+0x3c>)
 8000bd2:	2010      	movs	r0, #16
 8000bd4:	f000 fb08 	bl	80011e8 <Screen_Digital_Write>
    Screen_Delay_ms(3);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 fecb 	bl	8001974 <HAL_Delay>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <Screen_Reset+0x3c>)
 8000be2:	2010      	movs	r0, #16
 8000be4:	f000 fb00 	bl	80011e8 <Screen_Digital_Write>
    Screen_Delay_ms(300);
 8000be8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bec:	f000 fec2 	bl	8001974 <HAL_Delay>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <Screen_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void Screen_SendCommand(UBYTE Reg)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	490a      	ldr	r1, [pc, #40]	; (8000c30 <Screen_SendCommand+0x38>)
 8000c06:	2040      	movs	r0, #64	; 0x40
 8000c08:	f000 faee 	bl	80011e8 <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <Screen_SendCommand+0x38>)
 8000c10:	2010      	movs	r0, #16
 8000c12:	f000 fae9 	bl	80011e8 <Screen_Digital_Write>
    Screen_WriteByte(Reg);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 facf 	bl	80011bc <Screen_WriteByte>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4903      	ldr	r1, [pc, #12]	; (8000c30 <Screen_SendCommand+0x38>)
 8000c22:	2010      	movs	r0, #16
 8000c24:	f000 fae0 	bl	80011e8 <Screen_Digital_Write>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40020000 	.word	0x40020000

08000c34 <Screen_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void Screen_SendData(UBYTE Data)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	490a      	ldr	r1, [pc, #40]	; (8000c6c <Screen_SendData+0x38>)
 8000c42:	2040      	movs	r0, #64	; 0x40
 8000c44:	f000 fad0 	bl	80011e8 <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <Screen_SendData+0x38>)
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f000 facb 	bl	80011e8 <Screen_Digital_Write>
    Screen_WriteByte(Data);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fab1 	bl	80011bc <Screen_WriteByte>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4903      	ldr	r1, [pc, #12]	; (8000c6c <Screen_SendData+0x38>)
 8000c5e:	2010      	movs	r0, #16
 8000c60:	f000 fac2 	bl	80011e8 <Screen_Digital_Write>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40020000 	.word	0x40020000

08000c70 <Screen_ReadBusy_HIGH>:

static void Screen_ReadBusy_HIGH(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <Screen_ReadBusy_HIGH+0x34>)
 8000c78:	f002 f916 	bl	8002ea8 <puts>
    UBYTE busy;
    do {
        busy = Screen_Digital_Read(SBUSY_Pin, SBUSY_GPIO_Port);
 8000c7c:	490a      	ldr	r1, [pc, #40]	; (8000ca8 <Screen_ReadBusy_HIGH+0x38>)
 8000c7e:	2008      	movs	r0, #8
 8000c80:	f000 faca 	bl	8001218 <Screen_Digital_Read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	71fb      	strb	r3, [r7, #7]
    } while(busy);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f6      	bne.n	8000c7c <Screen_ReadBusy_HIGH+0xc>
    Screen_Delay_ms(200);
 8000c8e:	20c8      	movs	r0, #200	; 0xc8
 8000c90:	f000 fe70 	bl	8001974 <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <Screen_ReadBusy_HIGH+0x3c>)
 8000c96:	f002 f907 	bl	8002ea8 <puts>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08003974 	.word	0x08003974
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	0800398c 	.word	0x0800398c

08000cb0 <Screen_Load_LUT>:
/******************************************************************************
function :	set the look-up tables
parameter:
******************************************************************************/
void Screen_Load_LUT(UBYTE lut)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  UWORD i;
  Screen_SendCommand(0x32);
 8000cba:	2032      	movs	r0, #50	; 0x32
 8000cbc:	f7ff ff9c 	bl	8000bf8 <Screen_SendCommand>
  for (i = 0; i < 105; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	81fb      	strh	r3, [r7, #14]
 8000cc4:	e02d      	b.n	8000d22 <Screen_Load_LUT+0x72>
  {
    if(lut == 0)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d106      	bne.n	8000cda <Screen_Load_LUT+0x2a>
        Screen_SendData(lut_4Gray_GC[i]);
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <Screen_Load_LUT+0x84>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ffae 	bl	8000c34 <Screen_SendData>
 8000cd8:	e020      	b.n	8000d1c <Screen_Load_LUT+0x6c>
    else if(lut == 1)
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d106      	bne.n	8000cee <Screen_Load_LUT+0x3e>
        Screen_SendData(lut_1Gray_GC[i]);
 8000ce0:	89fb      	ldrh	r3, [r7, #14]
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <Screen_Load_LUT+0x88>)
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ffa4 	bl	8000c34 <Screen_SendData>
 8000cec:	e016      	b.n	8000d1c <Screen_Load_LUT+0x6c>
    else if(lut == 2)
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d106      	bne.n	8000d02 <Screen_Load_LUT+0x52>
        Screen_SendData(lut_1Gray_DU[i]);
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <Screen_Load_LUT+0x8c>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff9a 	bl	8000c34 <Screen_SendData>
 8000d00:	e00c      	b.n	8000d1c <Screen_Load_LUT+0x6c>
    else if(lut == 3)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d106      	bne.n	8000d16 <Screen_Load_LUT+0x66>
        Screen_SendData(lut_1Gray_A2[i]);
 8000d08:	89fb      	ldrh	r3, [r7, #14]
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <Screen_Load_LUT+0x90>)
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff90 	bl	8000c34 <Screen_SendData>
 8000d14:	e002      	b.n	8000d1c <Screen_Load_LUT+0x6c>
    else
        Debug("There is no such lut \r\n");
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <Screen_Load_LUT+0x94>)
 8000d18:	f002 f8c6 	bl	8002ea8 <puts>
  for (i = 0; i < 105; i++)
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	81fb      	strh	r3, [r7, #14]
 8000d22:	89fb      	ldrh	r3, [r7, #14]
 8000d24:	2b68      	cmp	r3, #104	; 0x68
 8000d26:	d9ce      	bls.n	8000cc6 <Screen_Load_LUT+0x16>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	080039dc 	.word	0x080039dc
 8000d38:	08003a48 	.word	0x08003a48
 8000d3c:	08003ab4 	.word	0x08003ab4
 8000d40:	08003b20 	.word	0x08003b20
 8000d44:	080039ac 	.word	0x080039ac

08000d48 <Screen_4Gray_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void Screen_4Gray_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    Screen_Reset();
 8000d4c:	f7ff ff34 	bl	8000bb8 <Screen_Reset>

    Screen_SendCommand(0x12);
 8000d50:	2012      	movs	r0, #18
 8000d52:	f7ff ff51 	bl	8000bf8 <Screen_SendCommand>
    Screen_Delay_ms(300);
 8000d56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d5a:	f000 fe0b 	bl	8001974 <HAL_Delay>

    Screen_SendCommand(0x46);
 8000d5e:	2046      	movs	r0, #70	; 0x46
 8000d60:	f7ff ff4a 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xF7);
 8000d64:	20f7      	movs	r0, #247	; 0xf7
 8000d66:	f7ff ff65 	bl	8000c34 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 8000d6a:	f7ff ff81 	bl	8000c70 <Screen_ReadBusy_HIGH>
    Screen_SendCommand(0x47);
 8000d6e:	2047      	movs	r0, #71	; 0x47
 8000d70:	f7ff ff42 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xF7);
 8000d74:	20f7      	movs	r0, #247	; 0xf7
 8000d76:	f7ff ff5d 	bl	8000c34 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 8000d7a:	f7ff ff79 	bl	8000c70 <Screen_ReadBusy_HIGH>

    Screen_SendCommand(0x01); // setting gate number
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff ff3a 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xDF);
 8000d84:	20df      	movs	r0, #223	; 0xdf
 8000d86:	f7ff ff55 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x01);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff52 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff ff4f 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x03); // set gate voltage
 8000d96:	2003      	movs	r0, #3
 8000d98:	f7ff ff2e 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ff49 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x04); // set source voltage
 8000da2:	2004      	movs	r0, #4
 8000da4:	f7ff ff28 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x41);
 8000da8:	2041      	movs	r0, #65	; 0x41
 8000daa:	f7ff ff43 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0xA8);
 8000dae:	20a8      	movs	r0, #168	; 0xa8
 8000db0:	f7ff ff40 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x32);
 8000db4:	2032      	movs	r0, #50	; 0x32
 8000db6:	f7ff ff3d 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x11); // set data entry sequence
 8000dba:	2011      	movs	r0, #17
 8000dbc:	f7ff ff1c 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x03);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f7ff ff37 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x3C); // set border
 8000dc6:	203c      	movs	r0, #60	; 0x3c
 8000dc8:	f7ff ff16 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff31 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x0C); // set booster strength
 8000dd2:	200c      	movs	r0, #12
 8000dd4:	f7ff ff10 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xAE);
 8000dd8:	20ae      	movs	r0, #174	; 0xae
 8000dda:	f7ff ff2b 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0xC7);
 8000dde:	20c7      	movs	r0, #199	; 0xc7
 8000de0:	f7ff ff28 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0xC3);
 8000de4:	20c3      	movs	r0, #195	; 0xc3
 8000de6:	f7ff ff25 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0xC0);
 8000dea:	20c0      	movs	r0, #192	; 0xc0
 8000dec:	f7ff ff22 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0xC0);
 8000df0:	20c0      	movs	r0, #192	; 0xc0
 8000df2:	f7ff ff1f 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x18); // set internal sensor on
 8000df6:	2018      	movs	r0, #24
 8000df8:	f7ff fefe 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x80);
 8000dfc:	2080      	movs	r0, #128	; 0x80
 8000dfe:	f7ff ff19 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x2C); // set vcom value
 8000e02:	202c      	movs	r0, #44	; 0x2c
 8000e04:	f7ff fef8 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x44);
 8000e08:	2044      	movs	r0, #68	; 0x44
 8000e0a:	f7ff ff13 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x37); // set display option, these setting turn on previous function
 8000e0e:	2037      	movs	r0, #55	; 0x37
 8000e10:	f7ff fef2 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f7ff ff0d 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ff0a 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff ff07 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff ff04 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff01 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fefe 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fefb 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fef8 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fef5 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f7ff fef2 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x44); // setting X direction start/end position of RAM
 8000e50:	2044      	movs	r0, #68	; 0x44
 8000e52:	f7ff fed1 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff feec 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fee9 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x17);
 8000e62:	2017      	movs	r0, #23
 8000e64:	f7ff fee6 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x01);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fee3 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x45); // setting Y direction start/end position of RAM
 8000e6e:	2045      	movs	r0, #69	; 0x45
 8000e70:	f7ff fec2 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fedd 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff feda 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0xDF);
 8000e80:	20df      	movs	r0, #223	; 0xdf
 8000e82:	f7ff fed7 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x01);
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff fed4 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x22); // Display Update Control 2
 8000e8c:	2022      	movs	r0, #34	; 0x22
 8000e8e:	f7ff feb3 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xCF);
 8000e92:	20cf      	movs	r0, #207	; 0xcf
 8000e94:	f7ff fece 	bl	8000c34 <Screen_SendData>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <Screen_4Gray_Clear>:
    Screen_ReadBusy_HIGH();
}


void Screen_4Gray_Clear(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (SCREEN_WIDTH % 8 == 0)? (SCREEN_WIDTH / 8 ): (SCREEN_WIDTH / 8 + 1);
 8000ea2:	2323      	movs	r3, #35	; 0x23
 8000ea4:	80fb      	strh	r3, [r7, #6]
    Height = SCREEN_HEIGHT;
 8000ea6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000eaa:	80bb      	strh	r3, [r7, #4]

    Screen_SendCommand(0x49);
 8000eac:	2049      	movs	r0, #73	; 0x49
 8000eae:	f7ff fea3 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff febe 	bl	8000c34 <Screen_SendData>
    Screen_SendCommand(0x4E);
 8000eb8:	204e      	movs	r0, #78	; 0x4e
 8000eba:	f7ff fe9d 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff feb8 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff feb5 	bl	8000c34 <Screen_SendData>
    Screen_SendCommand(0x4F);
 8000eca:	204f      	movs	r0, #79	; 0x4f
 8000ecc:	f7ff fe94 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff feaf 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff feac 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x24);
 8000edc:	2024      	movs	r0, #36	; 0x24
 8000ede:	f7ff fe8b 	bl	8000bf8 <Screen_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	81fb      	strh	r3, [r7, #14]
 8000ee6:	e00f      	b.n	8000f08 <Screen_4Gray_Clear+0x6c>
       for (UWORD i = 0; i < Width; i++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	81bb      	strh	r3, [r7, #12]
 8000eec:	e005      	b.n	8000efa <Screen_4Gray_Clear+0x5e>
           Screen_SendData(0xff);
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	f7ff fea0 	bl	8000c34 <Screen_SendData>
       for (UWORD i = 0; i < Width; i++) {
 8000ef4:	89bb      	ldrh	r3, [r7, #12]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	81bb      	strh	r3, [r7, #12]
 8000efa:	89ba      	ldrh	r2, [r7, #12]
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d3f5      	bcc.n	8000eee <Screen_4Gray_Clear+0x52>
    for (UWORD j = 0; j < Height; j++) {
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	3301      	adds	r3, #1
 8000f06:	81fb      	strh	r3, [r7, #14]
 8000f08:	89fa      	ldrh	r2, [r7, #14]
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d3eb      	bcc.n	8000ee8 <Screen_4Gray_Clear+0x4c>
       }
    }

    Screen_SendCommand(0x4E);
 8000f10:	204e      	movs	r0, #78	; 0x4e
 8000f12:	f7ff fe71 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fe8c 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fe89 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x4F);
 8000f22:	204f      	movs	r0, #79	; 0x4f
 8000f24:	f7ff fe68 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fe83 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fe80 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x26);
 8000f34:	2026      	movs	r0, #38	; 0x26
 8000f36:	f7ff fe5f 	bl	8000bf8 <Screen_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	817b      	strh	r3, [r7, #10]
 8000f3e:	e00f      	b.n	8000f60 <Screen_4Gray_Clear+0xc4>
       for (UWORD i = 0; i < Width; i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	813b      	strh	r3, [r7, #8]
 8000f44:	e005      	b.n	8000f52 <Screen_4Gray_Clear+0xb6>
           Screen_SendData(0xff);
 8000f46:	20ff      	movs	r0, #255	; 0xff
 8000f48:	f7ff fe74 	bl	8000c34 <Screen_SendData>
       for (UWORD i = 0; i < Width; i++) {
 8000f4c:	893b      	ldrh	r3, [r7, #8]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	813b      	strh	r3, [r7, #8]
 8000f52:	893a      	ldrh	r2, [r7, #8]
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3f5      	bcc.n	8000f46 <Screen_4Gray_Clear+0xaa>
    for (UWORD j = 0; j < Height; j++) {
 8000f5a:	897b      	ldrh	r3, [r7, #10]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	817b      	strh	r3, [r7, #10]
 8000f60:	897a      	ldrh	r2, [r7, #10]
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3eb      	bcc.n	8000f40 <Screen_4Gray_Clear+0xa4>
       }
    }

    Screen_Load_LUT(0);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fea1 	bl	8000cb0 <Screen_Load_LUT>
    Screen_SendCommand(0x22);
 8000f6e:	2022      	movs	r0, #34	; 0x22
 8000f70:	f7ff fe42 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xC7);
 8000f74:	20c7      	movs	r0, #199	; 0xc7
 8000f76:	f7ff fe5d 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x20);
 8000f7a:	2020      	movs	r0, #32
 8000f7c:	f7ff fe3c 	bl	8000bf8 <Screen_SendCommand>
    Screen_ReadBusy_HIGH();
 8000f80:	f7ff fe76 	bl	8000c70 <Screen_ReadBusy_HIGH>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Screen_4Gray_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void Screen_4Gray_Display(const UBYTE *Image)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    UDOUBLE i,j,k;
    UBYTE temp1,temp2,temp3;

    Screen_SendCommand(0x49);
 8000f94:	2049      	movs	r0, #73	; 0x49
 8000f96:	f7ff fe2f 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f7ff fe4a 	bl	8000c34 <Screen_SendData>


    Screen_SendCommand(0x4E);
 8000fa0:	204e      	movs	r0, #78	; 0x4e
 8000fa2:	f7ff fe29 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fe44 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fe41 	bl	8000c34 <Screen_SendData>


    Screen_SendCommand(0x4F);
 8000fb2:	204f      	movs	r0, #79	; 0x4f
 8000fb4:	f7ff fe20 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fe3b 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fe38 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x24);
 8000fc4:	2024      	movs	r0, #36	; 0x24
 8000fc6:	f7ff fe17 	bl	8000bf8 <Screen_SendCommand>
    for(i=0;i<16800;i++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e060      	b.n	8001092 <Screen_4Gray_Display+0x106>
        temp3=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	72bb      	strb	r3, [r7, #10]
        for(j=0; j<2; j++) {
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	e051      	b.n	800107e <Screen_4Gray_Display+0xf2>
            temp1 = Image[i*2+j];
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005a      	lsls	r2, r3, #1
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e040      	b.n	8001072 <Screen_4Gray_Display+0xe6>
                temp2 = temp1&0xC0;
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff6:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)
 8000ff8:	7a7b      	ldrb	r3, [r7, #9]
 8000ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8000ffc:	d104      	bne.n	8001008 <Screen_4Gray_Display+0x7c>
                    temp3 |= 0x01;//white
 8000ffe:	7abb      	ldrb	r3, [r7, #10]
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	72bb      	strb	r3, [r7, #10]
 8001006:	e009      	b.n	800101c <Screen_4Gray_Display+0x90>
                else if(temp2 == 0x00)
 8001008:	7a7b      	ldrb	r3, [r7, #9]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <Screen_4Gray_Display+0x90>
                    temp3 |= 0x00;  //black
                else if(temp2 == 0x80)
 800100e:	7a7b      	ldrb	r3, [r7, #9]
 8001010:	2b80      	cmp	r3, #128	; 0x80
 8001012:	d003      	beq.n	800101c <Screen_4Gray_Display+0x90>
                    temp3 |= 0x00;  //gray1
                else //0x40
                    temp3 |= 0x01; //gray2
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	72bb      	strb	r3, [r7, #10]
                temp3 <<= 1;
 800101c:	7abb      	ldrb	r3, [r7, #10]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	72fb      	strb	r3, [r7, #11]
                temp2 = temp1&0xC0 ;
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800102e:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)  //white
 8001030:	7a7b      	ldrb	r3, [r7, #9]
 8001032:	2bc0      	cmp	r3, #192	; 0xc0
 8001034:	d104      	bne.n	8001040 <Screen_4Gray_Display+0xb4>
                    temp3 |= 0x01;
 8001036:	7abb      	ldrb	r3, [r7, #10]
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	72bb      	strb	r3, [r7, #10]
 800103e:	e009      	b.n	8001054 <Screen_4Gray_Display+0xc8>
                else if(temp2 == 0x00) //black
 8001040:	7a7b      	ldrb	r3, [r7, #9]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <Screen_4Gray_Display+0xc8>
                    temp3 |= 0x00;
                else if(temp2 == 0x80)
 8001046:	7a7b      	ldrb	r3, [r7, #9]
 8001048:	2b80      	cmp	r3, #128	; 0x80
 800104a:	d003      	beq.n	8001054 <Screen_4Gray_Display+0xc8>
                    temp3 |= 0x00; //gray1
                else    //0x40
                    temp3 |= 0x01;	//gray2
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	72bb      	strb	r3, [r7, #10]
                if(j!=1 || k!=1)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d102      	bne.n	8001060 <Screen_4Gray_Display+0xd4>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d002      	beq.n	8001066 <Screen_4Gray_Display+0xda>
                    temp3 <<= 1;
 8001060:	7abb      	ldrb	r3, [r7, #10]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d9bb      	bls.n	8000ff0 <Screen_4Gray_Display+0x64>
        for(j=0; j<2; j++) {
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	3301      	adds	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d9aa      	bls.n	8000fda <Screen_4Gray_Display+0x4e>
            }

        }
        Screen_SendData(temp3);
 8001084:	7abb      	ldrb	r3, [r7, #10]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fdd4 	bl	8000c34 <Screen_SendData>
    for(i=0;i<16800;i++){
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f244 129f 	movw	r2, #16799	; 0x419f
 8001098:	4293      	cmp	r3, r2
 800109a:	d999      	bls.n	8000fd0 <Screen_4Gray_Display+0x44>
    }
    // new  data
    Screen_SendCommand(0x4E);
 800109c:	204e      	movs	r0, #78	; 0x4e
 800109e:	f7ff fdab 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff fdc6 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fdc3 	bl	8000c34 <Screen_SendData>


    Screen_SendCommand(0x4F);
 80010ae:	204f      	movs	r0, #79	; 0x4f
 80010b0:	f7ff fda2 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0x00);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fdbd 	bl	8000c34 <Screen_SendData>
    Screen_SendData(0x00);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fdba 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x26);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f7ff fd99 	bl	8000bf8 <Screen_SendCommand>
    for(i=0; i<16800; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e060      	b.n	800118e <Screen_4Gray_Display+0x202>
        temp3=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	72bb      	strb	r3, [r7, #10]
        for(j=0; j<2; j++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e051      	b.n	800117a <Screen_4Gray_Display+0x1ee>
            temp1 = Image[i*2+j];
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005a      	lsls	r2, r3, #1
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4413      	add	r3, r2
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e040      	b.n	800116e <Screen_4Gray_Display+0x1e2>
                temp2 = temp1&0xC0 ;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010f2:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)
 80010f4:	7a7b      	ldrb	r3, [r7, #9]
 80010f6:	2bc0      	cmp	r3, #192	; 0xc0
 80010f8:	d104      	bne.n	8001104 <Screen_4Gray_Display+0x178>
                    temp3 |= 0x01;//white
 80010fa:	7abb      	ldrb	r3, [r7, #10]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	72bb      	strb	r3, [r7, #10]
 8001102:	e009      	b.n	8001118 <Screen_4Gray_Display+0x18c>
                else if(temp2 == 0x00)
 8001104:	7a7b      	ldrb	r3, [r7, #9]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <Screen_4Gray_Display+0x18c>
                    temp3 |= 0x00;  //black
                else if(temp2 == 0x80)
 800110a:	7a7b      	ldrb	r3, [r7, #9]
 800110c:	2b80      	cmp	r3, #128	; 0x80
 800110e:	d103      	bne.n	8001118 <Screen_4Gray_Display+0x18c>
                    temp3 |= 0x01;  //gray1
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	72bb      	strb	r3, [r7, #10]
                else //0x40
                    temp3 |= 0x00; //gray2
                temp3 <<= 1;
 8001118:	7abb      	ldrb	r3, [r7, #10]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	72fb      	strb	r3, [r7, #11]
                temp2 = temp1&0xC0 ;
 8001124:	7afb      	ldrb	r3, [r7, #11]
 8001126:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800112a:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)  //white
 800112c:	7a7b      	ldrb	r3, [r7, #9]
 800112e:	2bc0      	cmp	r3, #192	; 0xc0
 8001130:	d104      	bne.n	800113c <Screen_4Gray_Display+0x1b0>
                    temp3 |= 0x01;
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	72bb      	strb	r3, [r7, #10]
 800113a:	e009      	b.n	8001150 <Screen_4Gray_Display+0x1c4>
                else if(temp2 == 0x00) //black
 800113c:	7a7b      	ldrb	r3, [r7, #9]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <Screen_4Gray_Display+0x1c4>
                    temp3 |= 0x00;
                else if(temp2 == 0x80)
 8001142:	7a7b      	ldrb	r3, [r7, #9]
 8001144:	2b80      	cmp	r3, #128	; 0x80
 8001146:	d103      	bne.n	8001150 <Screen_4Gray_Display+0x1c4>
                    temp3 |= 0x01; //gray1
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	72bb      	strb	r3, [r7, #10]
                else    //0x40
                    temp3 |= 0x00;	//gray2
                if(j!=1 || k!=1)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <Screen_4Gray_Display+0x1d0>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <Screen_4Gray_Display+0x1d6>
                    temp3 <<= 1;
 800115c:	7abb      	ldrb	r3, [r7, #10]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3301      	adds	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d9bb      	bls.n	80010ec <Screen_4Gray_Display+0x160>
        for(j=0; j<2; j++) {
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	3301      	adds	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d9aa      	bls.n	80010d6 <Screen_4Gray_Display+0x14a>
            }
        }
        Screen_SendData(temp3);
 8001180:	7abb      	ldrb	r3, [r7, #10]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fd56 	bl	8000c34 <Screen_SendData>
    for(i=0; i<16800; i++) {
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f244 129f 	movw	r2, #16799	; 0x419f
 8001194:	4293      	cmp	r3, r2
 8001196:	d999      	bls.n	80010cc <Screen_4Gray_Display+0x140>
    }

    Screen_Load_LUT(0);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fd89 	bl	8000cb0 <Screen_Load_LUT>

    Screen_SendCommand(0x22);
 800119e:	2022      	movs	r0, #34	; 0x22
 80011a0:	f7ff fd2a 	bl	8000bf8 <Screen_SendCommand>
    Screen_SendData(0xC7);
 80011a4:	20c7      	movs	r0, #199	; 0xc7
 80011a6:	f7ff fd45 	bl	8000c34 <Screen_SendData>

    Screen_SendCommand(0x20);
 80011aa:	2020      	movs	r0, #32
 80011ac:	f7ff fd24 	bl	8000bf8 <Screen_SendCommand>

    Screen_ReadBusy_HIGH();
 80011b0:	f7ff fd5e 	bl	8000c70 <Screen_ReadBusy_HIGH>
}
 80011b4:	bf00      	nop
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Screen_WriteByte>:
#include "stm32f2xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;

void Screen_WriteByte(UBYTE value)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = value;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80011ca:	f107 010f 	add.w	r1, r7, #15
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	2201      	movs	r2, #1
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <Screen_WriteByte+0x28>)
 80011d6:	f001 fb36 	bl	8002846 <HAL_SPI_Transmit>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000b8 	.word	0x200000b8

080011e8 <Screen_Digital_Write>:

void Screen_Digital_Write(uint16_t pin, GPIO_TypeDef* port, uint8_t value) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	4613      	mov	r3, r2
 80011f6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(port, pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4619      	mov	r1, r3
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 fe6f 	bl	8001eee <HAL_GPIO_WritePin>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <Screen_Digital_Read>:

uint8_t Screen_Digital_Read(uint16_t pin, GPIO_TypeDef* port) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(port, pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4619      	mov	r1, r3
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f000 fe49 	bl	8001ec0 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <Screen_Init>:

int Screen_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <Screen_Init+0x28>)
 8001240:	2040      	movs	r0, #64	; 0x40
 8001242:	f7ff ffd1 	bl	80011e8 <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	4905      	ldr	r1, [pc, #20]	; (8001260 <Screen_Init+0x28>)
 800124a:	2010      	movs	r0, #16
 800124c:	f7ff ffcc 	bl	80011e8 <Screen_Digital_Write>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8001250:	2201      	movs	r2, #1
 8001252:	4904      	ldr	r1, [pc, #16]	; (8001264 <Screen_Init+0x2c>)
 8001254:	2010      	movs	r0, #16
 8001256:	f7ff ffc7 	bl	80011e8 <Screen_Digital_Write>
	return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020000 	.word	0x40020000
 8001264:	40020800 	.word	0x40020800

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fb13 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f8ab 	bl	80013cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 f91b 	bl	80014b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800127a:	f000 f8e3 	bl	8001444 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Initialise the screen

  //UBYTE *Canvas;
	if(Screen_Init()!=0){
 800127e:	f7ff ffdb 	bl	8001238 <Screen_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <main+0x2a>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128c:	484c      	ldr	r0, [pc, #304]	; (80013c0 <main+0x158>)
 800128e:	f000 fe46 	bl	8001f1e <HAL_GPIO_TogglePin>
	 }

	//Screen_1Gray_Init();
	Screen_4Gray_Init();
 8001292:	f7ff fd59 	bl	8000d48 <Screen_4Gray_Init>
	Screen_4Gray_Clear();
 8001296:	f7ff fe01 	bl	8000e9c <Screen_4Gray_Clear>
	Screen_Delay_ms(500);
 800129a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129e:	f000 fb69 	bl	8001974 <HAL_Delay>

	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UBYTE *Canvas;
	UWORD Imagesize = ((SCREEN_WIDTH % 4 == 0)? (SCREEN_WIDTH / 4 ): (SCREEN_WIDTH / 4 + 1)) * SCREEN_HEIGHT;
 80012a2:	f248 3340 	movw	r3, #33600	; 0x8340
 80012a6:	80fb      	strh	r3, [r7, #6]
	if((Canvas = (UBYTE *)malloc(Imagesize)) == NULL) {
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fcd8 	bl	8002c60 <malloc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d102      	bne.n	80012c0 <main+0x58>
		return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e07a      	b.n	80013b6 <main+0x14e>

  // Initialise the canvas
  //Screen_1Gray_Clear();
	//Screen_1Gray_Init();
	//Screen_1Gray_Clear();
  Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, 0, WHITE);
 80012c0:	23ff      	movs	r3, #255	; 0xff
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012ca:	f44f 718c 	mov.w	r1, #280	; 0x118
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff f8f4 	bl	80004bc <Paint_NewImage>
  Paint_SelectImage(Canvas);
 80012d4:	6838      	ldr	r0, [r7, #0]
 80012d6:	f7ff f945 	bl	8000564 <Paint_SelectImage>
  Paint_SetScale(4);
 80012da:	2004      	movs	r0, #4
 80012dc:	f7ff f950 	bl	8000580 <Paint_SetScale>
  Paint_Clear(WHITE);
 80012e0:	20ff      	movs	r0, #255	; 0xff
 80012e2:	f7ff fb03 	bl	80008ec <Paint_Clear>


  Screen_4Gray_Display(Canvas);
 80012e6:	6838      	ldr	r0, [r7, #0]
 80012e8:	f7ff fe50 	bl	8000f8c <Screen_4Gray_Display>

  HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f000 fb40 	bl	8001974 <HAL_Delay>
  Paint_DrawString_EN(0, 0, "QUT Motorsports", &Font24, WHITE, GRAY1);
 80012f4:	2303      	movs	r3, #3
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <main+0x15c>)
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <main+0x160>)
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc04 	bl	8000b10 <Paint_DrawString_EN>
  Paint_DrawString_EN(0, 25, "QUT Motorsports", &Font24, WHITE, GRAY2);
 8001308:	2302      	movs	r3, #2
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	23ff      	movs	r3, #255	; 0xff
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <main+0x15c>)
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <main+0x160>)
 8001314:	2119      	movs	r1, #25
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fbfa 	bl	8000b10 <Paint_DrawString_EN>
  Paint_DrawString_EN(0, 50, "QUT Motorsports", &Font24, WHITE, GRAY3);
 800131c:	2301      	movs	r3, #1
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	23ff      	movs	r3, #255	; 0xff
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <main+0x15c>)
 8001326:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <main+0x160>)
 8001328:	2132      	movs	r1, #50	; 0x32
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fbf0 	bl	8000b10 <Paint_DrawString_EN>
  Paint_DrawString_EN(0, 75, "QUT Motorsports", &Font24, WHITE, GRAY4);
 8001330:	2300      	movs	r3, #0
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	23ff      	movs	r3, #255	; 0xff
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <main+0x15c>)
 800133a:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <main+0x160>)
 800133c:	214b      	movs	r1, #75	; 0x4b
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff fbe6 	bl	8000b10 <Paint_DrawString_EN>

  Paint_DrawString_EN(0, 100, "QUT Motorsports", &Font24, BLACK, GRAY1);
 8001344:	2303      	movs	r3, #3
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	2300      	movs	r3, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <main+0x15c>)
 800134e:	4a1e      	ldr	r2, [pc, #120]	; (80013c8 <main+0x160>)
 8001350:	2164      	movs	r1, #100	; 0x64
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fbdc 	bl	8000b10 <Paint_DrawString_EN>
    Paint_DrawString_EN(0, 125, "QUT Motorsports", &Font24, BLACK, GRAY2);
 8001358:	2302      	movs	r3, #2
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	2300      	movs	r3, #0
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <main+0x15c>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <main+0x160>)
 8001364:	217d      	movs	r1, #125	; 0x7d
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fbd2 	bl	8000b10 <Paint_DrawString_EN>
    Paint_DrawString_EN(0, 150, "QUT Motorsports", &Font24, BLACK, GRAY3);
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <main+0x15c>)
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <main+0x160>)
 8001378:	2196      	movs	r1, #150	; 0x96
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fbc8 	bl	8000b10 <Paint_DrawString_EN>
    Paint_DrawString_EN(0, 175, "QUT Motorsports", &Font24, BLACK, GRAY4);
 8001380:	2300      	movs	r3, #0
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <main+0x15c>)
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <main+0x160>)
 800138c:	21af      	movs	r1, #175	; 0xaf
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fbbe 	bl	8000b10 <Paint_DrawString_EN>
  Screen_4Gray_Display(Canvas);
 8001394:	6838      	ldr	r0, [r7, #0]
 8001396:	f7ff fdf9 	bl	8000f8c <Screen_4Gray_Display>

  //Paint_DrawString_EN(10, 10, "QUT Motorsports", &Font24, BLACK, GRAY2);
    //Screen_1Gray_Display(Canvas);

  HAL_Delay(10000);
 800139a:	f242 7010 	movw	r0, #10000	; 0x2710
 800139e:	f000 fae9 	bl	8001974 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	  HAL_Delay(1000);
	  Screen_1Gray_Clear();
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	  */
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80013a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <main+0x158>)
 80013a8:	f000 fdb9 	bl	8001f1e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80013ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b0:	f000 fae0 	bl	8001974 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80013b4:	e7f5      	b.n	80013a2 <main+0x13a>
  }
  /* USER CODE END 3 */
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	20000004 	.word	0x20000004
 80013c8:	080039cc 	.word	0x080039cc

080013cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b092      	sub	sp, #72	; 0x48
 80013d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	2230      	movs	r2, #48	; 0x30
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fc48 	bl	8002c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ee:	2302      	movs	r3, #2
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f6:	2310      	movs	r3, #16
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fda4 	bl	8001f50 <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800140e:	f000 f8d9 	bl	80015c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f000 ffe0 	bl	80023f0 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001436:	f000 f8c5 	bl	80015c4 <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3748      	adds	r7, #72	; 0x48
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_SPI1_Init+0x64>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_SPI1_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001454:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_SPI1_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001464:	2202      	movs	r2, #2
 8001466:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI1_Init+0x64>)
 800146a:	2201      	movs	r2, #1
 800146c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001478:	2210      	movs	r2, #16
 800147a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_SPI1_Init+0x64>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_SPI1_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001490:	220a      	movs	r2, #10
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_SPI1_Init+0x64>)
 8001496:	f001 f94d 	bl	8002734 <HAL_SPI_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014a0:	f000 f890 	bl	80015c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200000b8 	.word	0x200000b8
 80014ac:	40013000 	.word	0x40013000

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a39      	ldr	r2, [pc, #228]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <MX_GPIO_Init+0x104>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a24      	ldr	r2, [pc, #144]	; (80015b4 <MX_GPIO_Init+0x104>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <MX_GPIO_Init+0x104>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SBUSY_Pin|SCS_Pin|SDC_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2158      	movs	r1, #88	; 0x58
 800153a:	481f      	ldr	r0, [pc, #124]	; (80015b8 <MX_GPIO_Init+0x108>)
 800153c:	f000 fcd7 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SRST_GPIO_Port, SRST_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2110      	movs	r1, #16
 8001544:	481d      	ldr	r0, [pc, #116]	; (80015bc <MX_GPIO_Init+0x10c>)
 8001546:	f000 fcd2 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001550:	481b      	ldr	r0, [pc, #108]	; (80015c0 <MX_GPIO_Init+0x110>)
 8001552:	f000 fccc 	bl	8001eee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SBUSY_Pin SCS_Pin SDC_Pin */
  GPIO_InitStruct.Pin = SBUSY_Pin|SCS_Pin|SDC_Pin;
 8001556:	2358      	movs	r3, #88	; 0x58
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4812      	ldr	r0, [pc, #72]	; (80015b8 <MX_GPIO_Init+0x108>)
 800156e:	f000 fb09 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SRST_Pin */
  GPIO_InitStruct.Pin = SRST_Pin;
 8001572:	2310      	movs	r3, #16
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SRST_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_GPIO_Init+0x10c>)
 800158a:	f000 fafb 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800158e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_GPIO_Init+0x110>)
 80015a8:	f000 faec 	bl	8001b84 <HAL_GPIO_Init>

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40021000 	.word	0x40021000

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015cc:	e7fe      	b.n	80015cc <Error_Handler+0x8>
	...

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_MspInit+0x48>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_MspInit+0x48>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_MspInit+0x48>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_MspInit+0x48>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_MspInit+0x48>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_MspInit+0x48>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <HAL_SPI_MspInit+0x84>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d12b      	bne.n	8001696 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_SPI_MspInit+0x88>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_SPI_MspInit+0x88>)
 8001648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_SPI_MspInit+0x88>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_SPI_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <HAL_SPI_MspInit+0x88>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_SPI_MspInit+0x88>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001676:	23a0      	movs	r3, #160	; 0xa0
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001686:	2305      	movs	r3, #5
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_SPI_MspInit+0x8c>)
 8001692:	f000 fa77 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40013000 	.word	0x40013000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f2:	f000 f923 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}

080016fa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e00a      	b.n	8001722 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800170c:	f3af 8000 	nop.w
 8001710:	4601      	mov	r1, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	60ba      	str	r2, [r7, #8]
 8001718:	b2ca      	uxtb	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	dbf0      	blt.n	800170c <_read+0x12>
	}

return len;
 800172a:	687b      	ldr	r3, [r7, #4]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e009      	b.n	800175a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	60ba      	str	r2, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbf1      	blt.n	8001746 <_write+0x12>
	}
	return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_close>:

int _close(int file)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	605a      	str	r2, [r3, #4]
	return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <_isatty>:

int _isatty(int file)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	return 1;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
	return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f001 fa06 	bl	8002c0c <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20020000 	.word	0x20020000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000094 	.word	0x20000094
 8001834:	20000128 	.word	0x20000128

08001838 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001860:	4c0b      	ldr	r4, [pc, #44]	; (8001890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800186e:	f7ff ffe3 	bl	8001838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f001 f9d1 	bl	8002c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff fcf7 	bl	8001268 <main>
  bx  lr
 800187a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800187c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001888:	080056c8 	.word	0x080056c8
  ldr r2, =_sbss
 800188c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001890:	20000124 	.word	0x20000124

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f92b 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	200f      	movs	r0, #15
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fe80 	bl	80015d0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f935 	bl	8001b6a <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f90b 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000010 	.word	0x20000010
 8001938:	2000000c 	.word	0x2000000c

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x1c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x20>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000010 	.word	0x20000010
 800195c:	20000110 	.word	0x20000110

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_GetTick+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	20000110 	.word	0x20000110

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fff0 	bl	8001960 <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffe0 	bl	8001960 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000010 	.word	0x20000010

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff90 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff49 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff5e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffb0 	bl	8001ad8 <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	e16f      	b.n	8001e74 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8161 	beq.w	8001e6e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d005      	beq.n	8001bc4 <HAL_GPIO_Init+0x40>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d130      	bne.n	8001c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 0201 	and.w	r2, r3, #1
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d017      	beq.n	8001c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d123      	bne.n	8001cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	6939      	ldr	r1, [r7, #16]
 8001cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0203 	and.w	r2, r3, #3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80bb 	beq.w	8001e6e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_GPIO_Init+0x30c>)
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_GPIO_Init+0x30c>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	6453      	str	r3, [r2, #68]	; 0x44
 8001d08:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_GPIO_Init+0x30c>)
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d14:	4a5f      	ldr	r2, [pc, #380]	; (8001e94 <HAL_GPIO_Init+0x310>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_GPIO_Init+0x314>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d031      	beq.n	8001da4 <HAL_GPIO_Init+0x220>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_GPIO_Init+0x318>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d02b      	beq.n	8001da0 <HAL_GPIO_Init+0x21c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <HAL_GPIO_Init+0x31c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d025      	beq.n	8001d9c <HAL_GPIO_Init+0x218>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a54      	ldr	r2, [pc, #336]	; (8001ea4 <HAL_GPIO_Init+0x320>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d01f      	beq.n	8001d98 <HAL_GPIO_Init+0x214>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a53      	ldr	r2, [pc, #332]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d019      	beq.n	8001d94 <HAL_GPIO_Init+0x210>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_GPIO_Init+0x328>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_GPIO_Init+0x20c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a51      	ldr	r2, [pc, #324]	; (8001eb0 <HAL_GPIO_Init+0x32c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00d      	beq.n	8001d8c <HAL_GPIO_Init+0x208>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_GPIO_Init+0x330>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a4f      	ldr	r2, [pc, #316]	; (8001eb8 <HAL_GPIO_Init+0x334>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d101      	bne.n	8001d84 <HAL_GPIO_Init+0x200>
 8001d80:	2308      	movs	r3, #8
 8001d82:	e010      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d84:	2309      	movs	r3, #9
 8001d86:	e00e      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d88:	2307      	movs	r3, #7
 8001d8a:	e00c      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	e00a      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d90:	2305      	movs	r3, #5
 8001d92:	e008      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e006      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e004      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_GPIO_Init+0x222>
 8001da4:	2300      	movs	r3, #0
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	f002 0203 	and.w	r2, r2, #3
 8001dac:	0092      	lsls	r2, r2, #2
 8001dae:	4093      	lsls	r3, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db8:	4936      	ldr	r1, [pc, #216]	; (8001e94 <HAL_GPIO_Init+0x310>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e14:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_GPIO_Init+0x338>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f47f ae88 	bne.w	8001b94 <HAL_GPIO_Init+0x10>
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40020800 	.word	0x40020800
 8001ea4:	40020c00 	.word	0x40020c00
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40021400 	.word	0x40021400
 8001eb0:	40021800 	.word	0x40021800
 8001eb4:	40021c00 	.word	0x40021c00
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
 8001efa:	4613      	mov	r3, r2
 8001efc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efe:	787b      	ldrb	r3, [r7, #1]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f04:	887a      	ldrh	r2, [r7, #2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	041a      	lsls	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f30:	887a      	ldrh	r2, [r7, #2]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	4013      	ands	r3, r2
 8001f36:	041a      	lsls	r2, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	400b      	ands	r3, r1
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e237      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d050      	beq.n	8002010 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6e:	4ba3      	ldr	r3, [pc, #652]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d00c      	beq.n	8001f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7a:	4ba0      	ldr	r3, [pc, #640]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d112      	bne.n	8001fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f86:	4b9d      	ldr	r3, [pc, #628]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f92:	d10b      	bne.n	8001fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	4b99      	ldr	r3, [pc, #612]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d036      	beq.n	800200e <HAL_RCC_OscConfig+0xbe>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d132      	bne.n	800200e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e212      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4b93      	ldr	r3, [pc, #588]	; (8002200 <HAL_RCC_OscConfig+0x2b0>)
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d013      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fccf 	bl	8001960 <HAL_GetTick>
 8001fc2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc6:	f7ff fccb 	bl	8001960 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1fc      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd8:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x76>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fcbb 	bl	8001960 <HAL_GetTick>
 8001fea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fee:	f7ff fcb7 	bl	8001960 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b64      	cmp	r3, #100	; 0x64
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1e8      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002000:	4b7e      	ldr	r3, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x9e>
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d077      	beq.n	800210c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002028:	4b74      	ldr	r3, [pc, #464]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002030:	2b08      	cmp	r3, #8
 8002032:	d126      	bne.n	8002082 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002034:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d120      	bne.n	8002082 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002040:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x108>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e1bc      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	21f8      	movs	r1, #248	; 0xf8
 8002066:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	69b9      	ldr	r1, [r7, #24]
 800206a:	fa91 f1a1 	rbit	r1, r1
 800206e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002070:	6979      	ldr	r1, [r7, #20]
 8002072:	fab1 f181 	clz	r1, r1
 8002076:	b2c9      	uxtb	r1, r1
 8002078:	408b      	lsls	r3, r1
 800207a:	4960      	ldr	r1, [pc, #384]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002080:	e044      	b.n	800210c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02a      	beq.n	80020e0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208a:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <HAL_RCC_OscConfig+0x2b4>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fc66 	bl	8001960 <HAL_GetTick>
 8002094:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002098:	f7ff fc62 	bl	8001960 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e193      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	21f8      	movs	r1, #248	; 0xf8
 80020c4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6939      	ldr	r1, [r7, #16]
 80020c8:	fa91 f1a1 	rbit	r1, r1
 80020cc:	60f9      	str	r1, [r7, #12]
  return result;
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	fab1 f181 	clz	r1, r1
 80020d4:	b2c9      	uxtb	r1, r1
 80020d6:	408b      	lsls	r3, r1
 80020d8:	4948      	ldr	r1, [pc, #288]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
 80020de:	e015      	b.n	800210c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b48      	ldr	r3, [pc, #288]	; (8002204 <HAL_RCC_OscConfig+0x2b4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fc3b 	bl	8001960 <HAL_GetTick>
 80020ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff fc37 	bl	8001960 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e168      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002100:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d030      	beq.n	800217a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d016      	beq.n	800214e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002120:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_RCC_OscConfig+0x2b8>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff fc1b 	bl	8001960 <HAL_GetTick>
 800212a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff fc17 	bl	8001960 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e148      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x1de>
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x2b8>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7ff fc04 	bl	8001960 <HAL_GetTick>
 8002158:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215c:	f7ff fc00 	bl	8001960 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e131      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8088 	beq.w	8002298 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d110      	bne.n	80021bc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_OscConfig+0x2bc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_RCC_OscConfig+0x2bc>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x2bc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d123      	bne.n	800221c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_RCC_OscConfig+0x2bc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_RCC_OscConfig+0x2bc>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e0:	f7ff fbbe 	bl	8001960 <HAL_GetTick>
 80021e4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	e013      	b.n	8002210 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7ff fbba 	bl	8001960 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d90c      	bls.n	8002210 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0eb      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40023802 	.word	0x40023802
 8002204:	42470000 	.word	0x42470000
 8002208:	42470e80 	.word	0x42470e80
 800220c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x48c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0e5      	beq.n	80021e8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x490>)
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb97 	bl	8001960 <HAL_GetTick>
 8002232:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fb93 	bl	8001960 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0c2      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b65      	ldr	r3, [pc, #404]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x2e6>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fb81 	bl	8001960 <HAL_GetTick>
 800225e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff fb7d 	bl	8001960 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0ac      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b5a      	ldr	r3, [pc, #360]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8097 	beq.w	80023d0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a2:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d061      	beq.n	8002372 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d146      	bne.n	8002344 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x498>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb50 	bl	8001960 <HAL_GetTick>
 80022c0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff fb4c 	bl	8001960 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e07d      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022e2:	4b40      	ldr	r3, [pc, #256]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_OscConfig+0x49c>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	69d1      	ldr	r1, [r2, #28]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6a12      	ldr	r2, [r2, #32]
 80022f2:	4311      	orrs	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022f8:	0192      	lsls	r2, r2, #6
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002300:	0612      	lsls	r2, r2, #24
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002308:	0852      	lsrs	r2, r2, #1
 800230a:	3a01      	subs	r2, #1
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	430a      	orrs	r2, r1
 8002310:	4934      	ldr	r1, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_RCC_OscConfig+0x498>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fb20 	bl	8001960 <HAL_GetTick>
 8002320:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7ff fb1c 	bl	8001960 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e04d      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x3d4>
 8002342:	e045      	b.n	80023d0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_RCC_OscConfig+0x498>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff fb09 	bl	8001960 <HAL_GetTick>
 800234e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff fb05 	bl	8001960 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e036      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x402>
 8002370:	e02e      	b.n	80023d0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e029      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_OscConfig+0x494>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	429a      	cmp	r2, r3
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d115      	bne.n	80023cc <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	099b      	lsrs	r3, r3, #6
 80023a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10d      	bne.n	80023cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000
 80023e0:	40023870 	.word	0x40023870
 80023e4:	40023800 	.word	0x40023800
 80023e8:	42470060 	.word	0x42470060
 80023ec:	f0bc8000 	.word	0xf0bc8000

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0d2      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d90c      	bls.n	800242c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0be      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d020      	beq.n	800247a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800244a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800244e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800245c:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4950      	ldr	r1, [pc, #320]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d040      	beq.n	8002508 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e085      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e079      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b6:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e071      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4939      	ldr	r1, [pc, #228]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7ff fa42 	bl	8001960 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7ff fa3e 	bl	8001960 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e059      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d20c      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d001      	beq.n	8002530 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e03c      	b.n	80025aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	491b      	ldr	r1, [pc, #108]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4913      	ldr	r1, [pc, #76]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800256e:	f000 f82b 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8002572:	4601      	mov	r1, r0
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257c:	22f0      	movs	r2, #240	; 0xf0
 800257e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	60fa      	str	r2, [r7, #12]
  return result;
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	40d3      	lsrs	r3, r2
 8002592:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_RCC_ClockConfig+0x1cc>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	fa21 f303 	lsr.w	r3, r1, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x1d0>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1d4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f99a 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023c00 	.word	0x40023c00
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08003b8c 	.word	0x08003b8c
 80025c0:	20000000 	.word	0x20000000
 80025c4:	2000000c 	.word	0x2000000c

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025ce:	2100      	movs	r1, #0
 80025d0:	6079      	str	r1, [r7, #4]
 80025d2:	2100      	movs	r1, #0
 80025d4:	60f9      	str	r1, [r7, #12]
 80025d6:	2100      	movs	r1, #0
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025da:	2100      	movs	r1, #0
 80025dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025de:	4952      	ldr	r1, [pc, #328]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 80025e0:	6889      	ldr	r1, [r1, #8]
 80025e2:	f001 010c 	and.w	r1, r1, #12
 80025e6:	2908      	cmp	r1, #8
 80025e8:	d00d      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x3e>
 80025ea:	2908      	cmp	r1, #8
 80025ec:	f200 8094 	bhi.w	8002718 <HAL_RCC_GetSysClockFreq+0x150>
 80025f0:	2900      	cmp	r1, #0
 80025f2:	d002      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x32>
 80025f4:	2904      	cmp	r1, #4
 80025f6:	d003      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x38>
 80025f8:	e08e      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025fa:	4b4c      	ldr	r3, [pc, #304]	; (800272c <HAL_RCC_GetSysClockFreq+0x164>)
 80025fc:	60bb      	str	r3, [r7, #8]
       break;
 80025fe:	e08e      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCC_GetSysClockFreq+0x168>)
 8002602:	60bb      	str	r3, [r7, #8]
      break;
 8002604:	e08b      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002606:	4948      	ldr	r1, [pc, #288]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 8002608:	6849      	ldr	r1, [r1, #4]
 800260a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800260e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002610:	4945      	ldr	r1, [pc, #276]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 8002612:	6849      	ldr	r1, [r1, #4]
 8002614:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002618:	2900      	cmp	r1, #0
 800261a:	d024      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4942      	ldr	r1, [pc, #264]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 800261e:	6849      	ldr	r1, [r1, #4]
 8002620:	0989      	lsrs	r1, r1, #6
 8002622:	4608      	mov	r0, r1
 8002624:	f04f 0100 	mov.w	r1, #0
 8002628:	f240 14ff 	movw	r4, #511	; 0x1ff
 800262c:	f04f 0500 	mov.w	r5, #0
 8002630:	ea00 0204 	and.w	r2, r0, r4
 8002634:	ea01 0305 	and.w	r3, r1, r5
 8002638:	493d      	ldr	r1, [pc, #244]	; (8002730 <HAL_RCC_GetSysClockFreq+0x168>)
 800263a:	fb01 f003 	mul.w	r0, r1, r3
 800263e:	2100      	movs	r1, #0
 8002640:	fb01 f102 	mul.w	r1, r1, r2
 8002644:	1844      	adds	r4, r0, r1
 8002646:	493a      	ldr	r1, [pc, #232]	; (8002730 <HAL_RCC_GetSysClockFreq+0x168>)
 8002648:	fba2 0101 	umull	r0, r1, r2, r1
 800264c:	1863      	adds	r3, r4, r1
 800264e:	4619      	mov	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	461a      	mov	r2, r3
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	f7fd fdb4 	bl	80001c4 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e04a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	099b      	lsrs	r3, r3, #6
 800266c:	461a      	mov	r2, r3
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	ea02 0400 	and.w	r4, r2, r0
 800267e:	ea03 0501 	and.w	r5, r3, r1
 8002682:	4620      	mov	r0, r4
 8002684:	4629      	mov	r1, r5
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	014b      	lsls	r3, r1, #5
 8002690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002694:	0142      	lsls	r2, r0, #5
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	1b00      	subs	r0, r0, r4
 800269c:	eb61 0105 	sbc.w	r1, r1, r5
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	018b      	lsls	r3, r1, #6
 80026aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026ae:	0182      	lsls	r2, r0, #6
 80026b0:	1a12      	subs	r2, r2, r0
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	f04f 0000 	mov.w	r0, #0
 80026ba:	f04f 0100 	mov.w	r1, #0
 80026be:	00d9      	lsls	r1, r3, #3
 80026c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026c4:	00d0      	lsls	r0, r2, #3
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	1912      	adds	r2, r2, r4
 80026cc:	eb45 0303 	adc.w	r3, r5, r3
 80026d0:	f04f 0000 	mov.w	r0, #0
 80026d4:	f04f 0100 	mov.w	r1, #0
 80026d8:	0299      	lsls	r1, r3, #10
 80026da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026de:	0290      	lsls	r0, r2, #10
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	f7fd fd68 	bl	80001c4 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4613      	mov	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCC_GetSysClockFreq+0x160>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c1b      	lsrs	r3, r3, #16
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	3301      	adds	r3, #1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	60bb      	str	r3, [r7, #8]
      break;
 8002716:	e002      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <HAL_RCC_GetSysClockFreq+0x164>)
 800271a:	60bb      	str	r3, [r7, #8]
      break;
 800271c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800271e:	68bb      	ldr	r3, [r7, #8]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	40023800 	.word	0x40023800
 800272c:	00f42400 	.word	0x00f42400
 8002730:	017d7840 	.word	0x017d7840

08002734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07b      	b.n	800283e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002756:	d009      	beq.n	800276c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
 800275e:	e005      	b.n	800276c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe ff48 	bl	800161c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	ea42 0103 	orr.w	r1, r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	f003 0104 	and.w	r1, r3, #4
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0210 	and.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b088      	sub	sp, #32
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_SPI_Transmit+0x22>
 8002864:	2302      	movs	r3, #2
 8002866:	e126      	b.n	8002ab6 <HAL_SPI_Transmit+0x270>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002870:	f7ff f876 	bl	8001960 <HAL_GetTick>
 8002874:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d002      	beq.n	800288c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	77fb      	strb	r3, [r7, #31]
    goto error;
 800288a:	e10b      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_Transmit+0x52>
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800289c:	e102      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2203      	movs	r2, #3
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	88fa      	ldrh	r2, [r7, #6]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e4:	d10f      	bne.n	8002906 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d007      	beq.n	8002924 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292c:	d14b      	bne.n	80029c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_Transmit+0xf6>
 8002936:	8afb      	ldrh	r3, [r7, #22]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d13e      	bne.n	80029ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002960:	e02b      	b.n	80029ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d112      	bne.n	8002996 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	86da      	strh	r2, [r3, #54]	; 0x36
 8002994:	e011      	b.n	80029ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002996:	f7fe ffe3 	bl	8001960 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d803      	bhi.n	80029ae <HAL_SPI_Transmit+0x168>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d102      	bne.n	80029b4 <HAL_SPI_Transmit+0x16e>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029b8:	e074      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ce      	bne.n	8002962 <HAL_SPI_Transmit+0x11c>
 80029c4:	e04c      	b.n	8002a60 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_SPI_Transmit+0x18e>
 80029ce:	8afb      	ldrh	r3, [r7, #22]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d140      	bne.n	8002a56 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029fa:	e02c      	b.n	8002a56 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d113      	bne.n	8002a32 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a30:	e011      	b.n	8002a56 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a32:	f7fe ff95 	bl	8001960 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d803      	bhi.n	8002a4a <HAL_SPI_Transmit+0x204>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d102      	bne.n	8002a50 <HAL_SPI_Transmit+0x20a>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a54:	e026      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1cd      	bne.n	80029fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f8b3 	bl	8002bd0 <SPI_EndRxTxTransaction>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e000      	b.n	8002aa4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ad0:	f7fe ff46 	bl	8001960 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ae0:	f7fe ff3e 	bl	8001960 <HAL_GetTick>
 8002ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	015b      	lsls	r3, r3, #5
 8002aec:	0d1b      	lsrs	r3, r3, #20
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af6:	e054      	b.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d050      	beq.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b00:	f7fe ff2e 	bl	8001960 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d902      	bls.n	8002b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d13d      	bne.n	8002b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2e:	d111      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	d004      	beq.n	8002b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d107      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d10f      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e017      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d19b      	bne.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2180      	movs	r1, #128	; 0x80
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ff6a 	bl	8002ac0 <SPI_WaitFlagStateUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e000      	b.n	8002c04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <__errno>:
 8002c0c:	4b01      	ldr	r3, [pc, #4]	; (8002c14 <__errno+0x8>)
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000014 	.word	0x20000014

08002c18 <__libc_init_array>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	2600      	movs	r6, #0
 8002c1c:	4d0c      	ldr	r5, [pc, #48]	; (8002c50 <__libc_init_array+0x38>)
 8002c1e:	4c0d      	ldr	r4, [pc, #52]	; (8002c54 <__libc_init_array+0x3c>)
 8002c20:	1b64      	subs	r4, r4, r5
 8002c22:	10a4      	asrs	r4, r4, #2
 8002c24:	42a6      	cmp	r6, r4
 8002c26:	d109      	bne.n	8002c3c <__libc_init_array+0x24>
 8002c28:	f000 fcec 	bl	8003604 <_init>
 8002c2c:	2600      	movs	r6, #0
 8002c2e:	4d0a      	ldr	r5, [pc, #40]	; (8002c58 <__libc_init_array+0x40>)
 8002c30:	4c0a      	ldr	r4, [pc, #40]	; (8002c5c <__libc_init_array+0x44>)
 8002c32:	1b64      	subs	r4, r4, r5
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	42a6      	cmp	r6, r4
 8002c38:	d105      	bne.n	8002c46 <__libc_init_array+0x2e>
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c40:	4798      	blx	r3
 8002c42:	3601      	adds	r6, #1
 8002c44:	e7ee      	b.n	8002c24 <__libc_init_array+0xc>
 8002c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4a:	4798      	blx	r3
 8002c4c:	3601      	adds	r6, #1
 8002c4e:	e7f2      	b.n	8002c36 <__libc_init_array+0x1e>
 8002c50:	080056c0 	.word	0x080056c0
 8002c54:	080056c0 	.word	0x080056c0
 8002c58:	080056c0 	.word	0x080056c0
 8002c5c:	080056c4 	.word	0x080056c4

08002c60 <malloc>:
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <malloc+0xc>)
 8002c62:	4601      	mov	r1, r0
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	f000 b857 	b.w	8002d18 <_malloc_r>
 8002c6a:	bf00      	nop
 8002c6c:	20000014 	.word	0x20000014

08002c70 <memset>:
 8002c70:	4603      	mov	r3, r0
 8002c72:	4402      	add	r2, r0
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d100      	bne.n	8002c7a <memset+0xa>
 8002c78:	4770      	bx	lr
 8002c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7e:	e7f9      	b.n	8002c74 <memset+0x4>

08002c80 <_free_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4605      	mov	r5, r0
 8002c84:	2900      	cmp	r1, #0
 8002c86:	d043      	beq.n	8002d10 <_free_r+0x90>
 8002c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c8c:	1f0c      	subs	r4, r1, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bfb8      	it	lt
 8002c92:	18e4      	addlt	r4, r4, r3
 8002c94:	f000 fbfe 	bl	8003494 <__malloc_lock>
 8002c98:	4a1e      	ldr	r2, [pc, #120]	; (8002d14 <_free_r+0x94>)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	b933      	cbnz	r3, 8002cae <_free_r+0x2e>
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	6014      	str	r4, [r2, #0]
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002caa:	f000 bbf9 	b.w	80034a0 <__malloc_unlock>
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	d90a      	bls.n	8002cc8 <_free_r+0x48>
 8002cb2:	6821      	ldr	r1, [r4, #0]
 8002cb4:	1862      	adds	r2, r4, r1
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	bf01      	itttt	eq
 8002cba:	681a      	ldreq	r2, [r3, #0]
 8002cbc:	685b      	ldreq	r3, [r3, #4]
 8002cbe:	1852      	addeq	r2, r2, r1
 8002cc0:	6022      	streq	r2, [r4, #0]
 8002cc2:	6063      	str	r3, [r4, #4]
 8002cc4:	6004      	str	r4, [r0, #0]
 8002cc6:	e7ed      	b.n	8002ca4 <_free_r+0x24>
 8002cc8:	461a      	mov	r2, r3
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	b10b      	cbz	r3, 8002cd2 <_free_r+0x52>
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	d9fa      	bls.n	8002cc8 <_free_r+0x48>
 8002cd2:	6811      	ldr	r1, [r2, #0]
 8002cd4:	1850      	adds	r0, r2, r1
 8002cd6:	42a0      	cmp	r0, r4
 8002cd8:	d10b      	bne.n	8002cf2 <_free_r+0x72>
 8002cda:	6820      	ldr	r0, [r4, #0]
 8002cdc:	4401      	add	r1, r0
 8002cde:	1850      	adds	r0, r2, r1
 8002ce0:	4283      	cmp	r3, r0
 8002ce2:	6011      	str	r1, [r2, #0]
 8002ce4:	d1de      	bne.n	8002ca4 <_free_r+0x24>
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4401      	add	r1, r0
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	6053      	str	r3, [r2, #4]
 8002cf0:	e7d8      	b.n	8002ca4 <_free_r+0x24>
 8002cf2:	d902      	bls.n	8002cfa <_free_r+0x7a>
 8002cf4:	230c      	movs	r3, #12
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	e7d4      	b.n	8002ca4 <_free_r+0x24>
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	1821      	adds	r1, r4, r0
 8002cfe:	428b      	cmp	r3, r1
 8002d00:	bf01      	itttt	eq
 8002d02:	6819      	ldreq	r1, [r3, #0]
 8002d04:	685b      	ldreq	r3, [r3, #4]
 8002d06:	1809      	addeq	r1, r1, r0
 8002d08:	6021      	streq	r1, [r4, #0]
 8002d0a:	6063      	str	r3, [r4, #4]
 8002d0c:	6054      	str	r4, [r2, #4]
 8002d0e:	e7c9      	b.n	8002ca4 <_free_r+0x24>
 8002d10:	bd38      	pop	{r3, r4, r5, pc}
 8002d12:	bf00      	nop
 8002d14:	20000098 	.word	0x20000098

08002d18 <_malloc_r>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	1ccd      	adds	r5, r1, #3
 8002d1c:	f025 0503 	bic.w	r5, r5, #3
 8002d20:	3508      	adds	r5, #8
 8002d22:	2d0c      	cmp	r5, #12
 8002d24:	bf38      	it	cc
 8002d26:	250c      	movcc	r5, #12
 8002d28:	2d00      	cmp	r5, #0
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	db01      	blt.n	8002d32 <_malloc_r+0x1a>
 8002d2e:	42a9      	cmp	r1, r5
 8002d30:	d903      	bls.n	8002d3a <_malloc_r+0x22>
 8002d32:	230c      	movs	r3, #12
 8002d34:	6033      	str	r3, [r6, #0]
 8002d36:	2000      	movs	r0, #0
 8002d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d3a:	f000 fbab 	bl	8003494 <__malloc_lock>
 8002d3e:	4921      	ldr	r1, [pc, #132]	; (8002dc4 <_malloc_r+0xac>)
 8002d40:	680a      	ldr	r2, [r1, #0]
 8002d42:	4614      	mov	r4, r2
 8002d44:	b99c      	cbnz	r4, 8002d6e <_malloc_r+0x56>
 8002d46:	4f20      	ldr	r7, [pc, #128]	; (8002dc8 <_malloc_r+0xb0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b923      	cbnz	r3, 8002d56 <_malloc_r+0x3e>
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	4630      	mov	r0, r6
 8002d50:	f000 f8b2 	bl	8002eb8 <_sbrk_r>
 8002d54:	6038      	str	r0, [r7, #0]
 8002d56:	4629      	mov	r1, r5
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f000 f8ad 	bl	8002eb8 <_sbrk_r>
 8002d5e:	1c43      	adds	r3, r0, #1
 8002d60:	d123      	bne.n	8002daa <_malloc_r+0x92>
 8002d62:	230c      	movs	r3, #12
 8002d64:	4630      	mov	r0, r6
 8002d66:	6033      	str	r3, [r6, #0]
 8002d68:	f000 fb9a 	bl	80034a0 <__malloc_unlock>
 8002d6c:	e7e3      	b.n	8002d36 <_malloc_r+0x1e>
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	1b5b      	subs	r3, r3, r5
 8002d72:	d417      	bmi.n	8002da4 <_malloc_r+0x8c>
 8002d74:	2b0b      	cmp	r3, #11
 8002d76:	d903      	bls.n	8002d80 <_malloc_r+0x68>
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	441c      	add	r4, r3
 8002d7c:	6025      	str	r5, [r4, #0]
 8002d7e:	e004      	b.n	8002d8a <_malloc_r+0x72>
 8002d80:	6863      	ldr	r3, [r4, #4]
 8002d82:	42a2      	cmp	r2, r4
 8002d84:	bf0c      	ite	eq
 8002d86:	600b      	streq	r3, [r1, #0]
 8002d88:	6053      	strne	r3, [r2, #4]
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	f000 fb88 	bl	80034a0 <__malloc_unlock>
 8002d90:	f104 000b 	add.w	r0, r4, #11
 8002d94:	1d23      	adds	r3, r4, #4
 8002d96:	f020 0007 	bic.w	r0, r0, #7
 8002d9a:	1ac2      	subs	r2, r0, r3
 8002d9c:	d0cc      	beq.n	8002d38 <_malloc_r+0x20>
 8002d9e:	1a1b      	subs	r3, r3, r0
 8002da0:	50a3      	str	r3, [r4, r2]
 8002da2:	e7c9      	b.n	8002d38 <_malloc_r+0x20>
 8002da4:	4622      	mov	r2, r4
 8002da6:	6864      	ldr	r4, [r4, #4]
 8002da8:	e7cc      	b.n	8002d44 <_malloc_r+0x2c>
 8002daa:	1cc4      	adds	r4, r0, #3
 8002dac:	f024 0403 	bic.w	r4, r4, #3
 8002db0:	42a0      	cmp	r0, r4
 8002db2:	d0e3      	beq.n	8002d7c <_malloc_r+0x64>
 8002db4:	1a21      	subs	r1, r4, r0
 8002db6:	4630      	mov	r0, r6
 8002db8:	f000 f87e 	bl	8002eb8 <_sbrk_r>
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d1dd      	bne.n	8002d7c <_malloc_r+0x64>
 8002dc0:	e7cf      	b.n	8002d62 <_malloc_r+0x4a>
 8002dc2:	bf00      	nop
 8002dc4:	20000098 	.word	0x20000098
 8002dc8:	2000009c 	.word	0x2000009c

08002dcc <_puts_r>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	460e      	mov	r6, r1
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	b118      	cbz	r0, 8002ddc <_puts_r+0x10>
 8002dd4:	6983      	ldr	r3, [r0, #24]
 8002dd6:	b90b      	cbnz	r3, 8002ddc <_puts_r+0x10>
 8002dd8:	f000 fa58 	bl	800328c <__sinit>
 8002ddc:	69ab      	ldr	r3, [r5, #24]
 8002dde:	68ac      	ldr	r4, [r5, #8]
 8002de0:	b913      	cbnz	r3, 8002de8 <_puts_r+0x1c>
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 fa52 	bl	800328c <__sinit>
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <_puts_r+0xd0>)
 8002dea:	429c      	cmp	r4, r3
 8002dec:	d120      	bne.n	8002e30 <_puts_r+0x64>
 8002dee:	686c      	ldr	r4, [r5, #4]
 8002df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002df2:	07db      	lsls	r3, r3, #31
 8002df4:	d405      	bmi.n	8002e02 <_puts_r+0x36>
 8002df6:	89a3      	ldrh	r3, [r4, #12]
 8002df8:	0598      	lsls	r0, r3, #22
 8002dfa:	d402      	bmi.n	8002e02 <_puts_r+0x36>
 8002dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dfe:	f000 fae3 	bl	80033c8 <__retarget_lock_acquire_recursive>
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	0719      	lsls	r1, r3, #28
 8002e06:	d51d      	bpl.n	8002e44 <_puts_r+0x78>
 8002e08:	6923      	ldr	r3, [r4, #16]
 8002e0a:	b1db      	cbz	r3, 8002e44 <_puts_r+0x78>
 8002e0c:	3e01      	subs	r6, #1
 8002e0e:	68a3      	ldr	r3, [r4, #8]
 8002e10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e14:	3b01      	subs	r3, #1
 8002e16:	60a3      	str	r3, [r4, #8]
 8002e18:	bb39      	cbnz	r1, 8002e6a <_puts_r+0x9e>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da38      	bge.n	8002e90 <_puts_r+0xc4>
 8002e1e:	4622      	mov	r2, r4
 8002e20:	210a      	movs	r1, #10
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f858 	bl	8002ed8 <__swbuf_r>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d011      	beq.n	8002e50 <_puts_r+0x84>
 8002e2c:	250a      	movs	r5, #10
 8002e2e:	e011      	b.n	8002e54 <_puts_r+0x88>
 8002e30:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <_puts_r+0xd4>)
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d101      	bne.n	8002e3a <_puts_r+0x6e>
 8002e36:	68ac      	ldr	r4, [r5, #8]
 8002e38:	e7da      	b.n	8002df0 <_puts_r+0x24>
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <_puts_r+0xd8>)
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	bf08      	it	eq
 8002e40:	68ec      	ldreq	r4, [r5, #12]
 8002e42:	e7d5      	b.n	8002df0 <_puts_r+0x24>
 8002e44:	4621      	mov	r1, r4
 8002e46:	4628      	mov	r0, r5
 8002e48:	f000 f898 	bl	8002f7c <__swsetup_r>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d0dd      	beq.n	8002e0c <_puts_r+0x40>
 8002e50:	f04f 35ff 	mov.w	r5, #4294967295
 8002e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e56:	07da      	lsls	r2, r3, #31
 8002e58:	d405      	bmi.n	8002e66 <_puts_r+0x9a>
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	059b      	lsls	r3, r3, #22
 8002e5e:	d402      	bmi.n	8002e66 <_puts_r+0x9a>
 8002e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e62:	f000 fab2 	bl	80033ca <__retarget_lock_release_recursive>
 8002e66:	4628      	mov	r0, r5
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	da04      	bge.n	8002e78 <_puts_r+0xac>
 8002e6e:	69a2      	ldr	r2, [r4, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	dc06      	bgt.n	8002e82 <_puts_r+0xb6>
 8002e74:	290a      	cmp	r1, #10
 8002e76:	d004      	beq.n	8002e82 <_puts_r+0xb6>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	6022      	str	r2, [r4, #0]
 8002e7e:	7019      	strb	r1, [r3, #0]
 8002e80:	e7c5      	b.n	8002e0e <_puts_r+0x42>
 8002e82:	4622      	mov	r2, r4
 8002e84:	4628      	mov	r0, r5
 8002e86:	f000 f827 	bl	8002ed8 <__swbuf_r>
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d1bf      	bne.n	8002e0e <_puts_r+0x42>
 8002e8e:	e7df      	b.n	8002e50 <_puts_r+0x84>
 8002e90:	250a      	movs	r5, #10
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	6022      	str	r2, [r4, #0]
 8002e98:	701d      	strb	r5, [r3, #0]
 8002e9a:	e7db      	b.n	8002e54 <_puts_r+0x88>
 8002e9c:	08005678 	.word	0x08005678
 8002ea0:	08005698 	.word	0x08005698
 8002ea4:	08005658 	.word	0x08005658

08002ea8 <puts>:
 8002ea8:	4b02      	ldr	r3, [pc, #8]	; (8002eb4 <puts+0xc>)
 8002eaa:	4601      	mov	r1, r0
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	f7ff bf8d 	b.w	8002dcc <_puts_r>
 8002eb2:	bf00      	nop
 8002eb4:	20000014 	.word	0x20000014

08002eb8 <_sbrk_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4d05      	ldr	r5, [pc, #20]	; (8002ed4 <_sbrk_r+0x1c>)
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	f7fe fc82 	bl	80017cc <_sbrk>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_sbrk_r+0x1a>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_sbrk_r+0x1a>
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	20000120 	.word	0x20000120

08002ed8 <__swbuf_r>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	460e      	mov	r6, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	4605      	mov	r5, r0
 8002ee0:	b118      	cbz	r0, 8002eea <__swbuf_r+0x12>
 8002ee2:	6983      	ldr	r3, [r0, #24]
 8002ee4:	b90b      	cbnz	r3, 8002eea <__swbuf_r+0x12>
 8002ee6:	f000 f9d1 	bl	800328c <__sinit>
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <__swbuf_r+0x98>)
 8002eec:	429c      	cmp	r4, r3
 8002eee:	d12b      	bne.n	8002f48 <__swbuf_r+0x70>
 8002ef0:	686c      	ldr	r4, [r5, #4]
 8002ef2:	69a3      	ldr	r3, [r4, #24]
 8002ef4:	60a3      	str	r3, [r4, #8]
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	071a      	lsls	r2, r3, #28
 8002efa:	d52f      	bpl.n	8002f5c <__swbuf_r+0x84>
 8002efc:	6923      	ldr	r3, [r4, #16]
 8002efe:	b36b      	cbz	r3, 8002f5c <__swbuf_r+0x84>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	6820      	ldr	r0, [r4, #0]
 8002f04:	b2f6      	uxtb	r6, r6
 8002f06:	1ac0      	subs	r0, r0, r3
 8002f08:	6963      	ldr	r3, [r4, #20]
 8002f0a:	4637      	mov	r7, r6
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	dc04      	bgt.n	8002f1a <__swbuf_r+0x42>
 8002f10:	4621      	mov	r1, r4
 8002f12:	4628      	mov	r0, r5
 8002f14:	f000 f926 	bl	8003164 <_fflush_r>
 8002f18:	bb30      	cbnz	r0, 8002f68 <__swbuf_r+0x90>
 8002f1a:	68a3      	ldr	r3, [r4, #8]
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60a3      	str	r3, [r4, #8]
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	6022      	str	r2, [r4, #0]
 8002f28:	701e      	strb	r6, [r3, #0]
 8002f2a:	6963      	ldr	r3, [r4, #20]
 8002f2c:	4283      	cmp	r3, r0
 8002f2e:	d004      	beq.n	8002f3a <__swbuf_r+0x62>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	07db      	lsls	r3, r3, #31
 8002f34:	d506      	bpl.n	8002f44 <__swbuf_r+0x6c>
 8002f36:	2e0a      	cmp	r6, #10
 8002f38:	d104      	bne.n	8002f44 <__swbuf_r+0x6c>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 f911 	bl	8003164 <_fflush_r>
 8002f42:	b988      	cbnz	r0, 8002f68 <__swbuf_r+0x90>
 8002f44:	4638      	mov	r0, r7
 8002f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <__swbuf_r+0x9c>)
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	d101      	bne.n	8002f52 <__swbuf_r+0x7a>
 8002f4e:	68ac      	ldr	r4, [r5, #8]
 8002f50:	e7cf      	b.n	8002ef2 <__swbuf_r+0x1a>
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <__swbuf_r+0xa0>)
 8002f54:	429c      	cmp	r4, r3
 8002f56:	bf08      	it	eq
 8002f58:	68ec      	ldreq	r4, [r5, #12]
 8002f5a:	e7ca      	b.n	8002ef2 <__swbuf_r+0x1a>
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f000 f80c 	bl	8002f7c <__swsetup_r>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d0cb      	beq.n	8002f00 <__swbuf_r+0x28>
 8002f68:	f04f 37ff 	mov.w	r7, #4294967295
 8002f6c:	e7ea      	b.n	8002f44 <__swbuf_r+0x6c>
 8002f6e:	bf00      	nop
 8002f70:	08005678 	.word	0x08005678
 8002f74:	08005698 	.word	0x08005698
 8002f78:	08005658 	.word	0x08005658

08002f7c <__swsetup_r>:
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <__swsetup_r+0xcc>)
 8002f7e:	b570      	push	{r4, r5, r6, lr}
 8002f80:	681d      	ldr	r5, [r3, #0]
 8002f82:	4606      	mov	r6, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	b125      	cbz	r5, 8002f92 <__swsetup_r+0x16>
 8002f88:	69ab      	ldr	r3, [r5, #24]
 8002f8a:	b913      	cbnz	r3, 8002f92 <__swsetup_r+0x16>
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f000 f97d 	bl	800328c <__sinit>
 8002f92:	4b2e      	ldr	r3, [pc, #184]	; (800304c <__swsetup_r+0xd0>)
 8002f94:	429c      	cmp	r4, r3
 8002f96:	d10f      	bne.n	8002fb8 <__swsetup_r+0x3c>
 8002f98:	686c      	ldr	r4, [r5, #4]
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fa0:	0719      	lsls	r1, r3, #28
 8002fa2:	d42c      	bmi.n	8002ffe <__swsetup_r+0x82>
 8002fa4:	06dd      	lsls	r5, r3, #27
 8002fa6:	d411      	bmi.n	8002fcc <__swsetup_r+0x50>
 8002fa8:	2309      	movs	r3, #9
 8002faa:	6033      	str	r3, [r6, #0]
 8002fac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	e03e      	b.n	8003036 <__swsetup_r+0xba>
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <__swsetup_r+0xd4>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d101      	bne.n	8002fc2 <__swsetup_r+0x46>
 8002fbe:	68ac      	ldr	r4, [r5, #8]
 8002fc0:	e7eb      	b.n	8002f9a <__swsetup_r+0x1e>
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <__swsetup_r+0xd8>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	bf08      	it	eq
 8002fc8:	68ec      	ldreq	r4, [r5, #12]
 8002fca:	e7e6      	b.n	8002f9a <__swsetup_r+0x1e>
 8002fcc:	0758      	lsls	r0, r3, #29
 8002fce:	d512      	bpl.n	8002ff6 <__swsetup_r+0x7a>
 8002fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fd2:	b141      	cbz	r1, 8002fe6 <__swsetup_r+0x6a>
 8002fd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fd8:	4299      	cmp	r1, r3
 8002fda:	d002      	beq.n	8002fe2 <__swsetup_r+0x66>
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f7ff fe4f 	bl	8002c80 <_free_r>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6363      	str	r3, [r4, #52]	; 0x34
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6063      	str	r3, [r4, #4]
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	6923      	ldr	r3, [r4, #16]
 8003000:	b94b      	cbnz	r3, 8003016 <__swsetup_r+0x9a>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800300c:	d003      	beq.n	8003016 <__swsetup_r+0x9a>
 800300e:	4621      	mov	r1, r4
 8003010:	4630      	mov	r0, r6
 8003012:	f000 f9ff 	bl	8003414 <__smakebuf_r>
 8003016:	89a0      	ldrh	r0, [r4, #12]
 8003018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800301c:	f010 0301 	ands.w	r3, r0, #1
 8003020:	d00a      	beq.n	8003038 <__swsetup_r+0xbc>
 8003022:	2300      	movs	r3, #0
 8003024:	60a3      	str	r3, [r4, #8]
 8003026:	6963      	ldr	r3, [r4, #20]
 8003028:	425b      	negs	r3, r3
 800302a:	61a3      	str	r3, [r4, #24]
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	b943      	cbnz	r3, 8003042 <__swsetup_r+0xc6>
 8003030:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003034:	d1ba      	bne.n	8002fac <__swsetup_r+0x30>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	0781      	lsls	r1, r0, #30
 800303a:	bf58      	it	pl
 800303c:	6963      	ldrpl	r3, [r4, #20]
 800303e:	60a3      	str	r3, [r4, #8]
 8003040:	e7f4      	b.n	800302c <__swsetup_r+0xb0>
 8003042:	2000      	movs	r0, #0
 8003044:	e7f7      	b.n	8003036 <__swsetup_r+0xba>
 8003046:	bf00      	nop
 8003048:	20000014 	.word	0x20000014
 800304c:	08005678 	.word	0x08005678
 8003050:	08005698 	.word	0x08005698
 8003054:	08005658 	.word	0x08005658

08003058 <__sflush_r>:
 8003058:	898a      	ldrh	r2, [r1, #12]
 800305a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800305e:	4605      	mov	r5, r0
 8003060:	0710      	lsls	r0, r2, #28
 8003062:	460c      	mov	r4, r1
 8003064:	d458      	bmi.n	8003118 <__sflush_r+0xc0>
 8003066:	684b      	ldr	r3, [r1, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	dc05      	bgt.n	8003078 <__sflush_r+0x20>
 800306c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc02      	bgt.n	8003078 <__sflush_r+0x20>
 8003072:	2000      	movs	r0, #0
 8003074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800307a:	2e00      	cmp	r6, #0
 800307c:	d0f9      	beq.n	8003072 <__sflush_r+0x1a>
 800307e:	2300      	movs	r3, #0
 8003080:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003084:	682f      	ldr	r7, [r5, #0]
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	d032      	beq.n	80030f0 <__sflush_r+0x98>
 800308a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	075a      	lsls	r2, r3, #29
 8003090:	d505      	bpl.n	800309e <__sflush_r+0x46>
 8003092:	6863      	ldr	r3, [r4, #4]
 8003094:	1ac0      	subs	r0, r0, r3
 8003096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003098:	b10b      	cbz	r3, 800309e <__sflush_r+0x46>
 800309a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800309c:	1ac0      	subs	r0, r0, r3
 800309e:	2300      	movs	r3, #0
 80030a0:	4602      	mov	r2, r0
 80030a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030a4:	4628      	mov	r0, r5
 80030a6:	6a21      	ldr	r1, [r4, #32]
 80030a8:	47b0      	blx	r6
 80030aa:	1c43      	adds	r3, r0, #1
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	d106      	bne.n	80030be <__sflush_r+0x66>
 80030b0:	6829      	ldr	r1, [r5, #0]
 80030b2:	291d      	cmp	r1, #29
 80030b4:	d82c      	bhi.n	8003110 <__sflush_r+0xb8>
 80030b6:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <__sflush_r+0x108>)
 80030b8:	40ca      	lsrs	r2, r1
 80030ba:	07d6      	lsls	r6, r2, #31
 80030bc:	d528      	bpl.n	8003110 <__sflush_r+0xb8>
 80030be:	2200      	movs	r2, #0
 80030c0:	6062      	str	r2, [r4, #4]
 80030c2:	6922      	ldr	r2, [r4, #16]
 80030c4:	04d9      	lsls	r1, r3, #19
 80030c6:	6022      	str	r2, [r4, #0]
 80030c8:	d504      	bpl.n	80030d4 <__sflush_r+0x7c>
 80030ca:	1c42      	adds	r2, r0, #1
 80030cc:	d101      	bne.n	80030d2 <__sflush_r+0x7a>
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	b903      	cbnz	r3, 80030d4 <__sflush_r+0x7c>
 80030d2:	6560      	str	r0, [r4, #84]	; 0x54
 80030d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d6:	602f      	str	r7, [r5, #0]
 80030d8:	2900      	cmp	r1, #0
 80030da:	d0ca      	beq.n	8003072 <__sflush_r+0x1a>
 80030dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030e0:	4299      	cmp	r1, r3
 80030e2:	d002      	beq.n	80030ea <__sflush_r+0x92>
 80030e4:	4628      	mov	r0, r5
 80030e6:	f7ff fdcb 	bl	8002c80 <_free_r>
 80030ea:	2000      	movs	r0, #0
 80030ec:	6360      	str	r0, [r4, #52]	; 0x34
 80030ee:	e7c1      	b.n	8003074 <__sflush_r+0x1c>
 80030f0:	6a21      	ldr	r1, [r4, #32]
 80030f2:	2301      	movs	r3, #1
 80030f4:	4628      	mov	r0, r5
 80030f6:	47b0      	blx	r6
 80030f8:	1c41      	adds	r1, r0, #1
 80030fa:	d1c7      	bne.n	800308c <__sflush_r+0x34>
 80030fc:	682b      	ldr	r3, [r5, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0c4      	beq.n	800308c <__sflush_r+0x34>
 8003102:	2b1d      	cmp	r3, #29
 8003104:	d001      	beq.n	800310a <__sflush_r+0xb2>
 8003106:	2b16      	cmp	r3, #22
 8003108:	d101      	bne.n	800310e <__sflush_r+0xb6>
 800310a:	602f      	str	r7, [r5, #0]
 800310c:	e7b1      	b.n	8003072 <__sflush_r+0x1a>
 800310e:	89a3      	ldrh	r3, [r4, #12]
 8003110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	e7ad      	b.n	8003074 <__sflush_r+0x1c>
 8003118:	690f      	ldr	r7, [r1, #16]
 800311a:	2f00      	cmp	r7, #0
 800311c:	d0a9      	beq.n	8003072 <__sflush_r+0x1a>
 800311e:	0793      	lsls	r3, r2, #30
 8003120:	bf18      	it	ne
 8003122:	2300      	movne	r3, #0
 8003124:	680e      	ldr	r6, [r1, #0]
 8003126:	bf08      	it	eq
 8003128:	694b      	ldreq	r3, [r1, #20]
 800312a:	eba6 0807 	sub.w	r8, r6, r7
 800312e:	600f      	str	r7, [r1, #0]
 8003130:	608b      	str	r3, [r1, #8]
 8003132:	f1b8 0f00 	cmp.w	r8, #0
 8003136:	dd9c      	ble.n	8003072 <__sflush_r+0x1a>
 8003138:	4643      	mov	r3, r8
 800313a:	463a      	mov	r2, r7
 800313c:	4628      	mov	r0, r5
 800313e:	6a21      	ldr	r1, [r4, #32]
 8003140:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003142:	47b0      	blx	r6
 8003144:	2800      	cmp	r0, #0
 8003146:	dc06      	bgt.n	8003156 <__sflush_r+0xfe>
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	f04f 30ff 	mov.w	r0, #4294967295
 800314e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003152:	81a3      	strh	r3, [r4, #12]
 8003154:	e78e      	b.n	8003074 <__sflush_r+0x1c>
 8003156:	4407      	add	r7, r0
 8003158:	eba8 0800 	sub.w	r8, r8, r0
 800315c:	e7e9      	b.n	8003132 <__sflush_r+0xda>
 800315e:	bf00      	nop
 8003160:	20400001 	.word	0x20400001

08003164 <_fflush_r>:
 8003164:	b538      	push	{r3, r4, r5, lr}
 8003166:	690b      	ldr	r3, [r1, #16]
 8003168:	4605      	mov	r5, r0
 800316a:	460c      	mov	r4, r1
 800316c:	b913      	cbnz	r3, 8003174 <_fflush_r+0x10>
 800316e:	2500      	movs	r5, #0
 8003170:	4628      	mov	r0, r5
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	b118      	cbz	r0, 800317e <_fflush_r+0x1a>
 8003176:	6983      	ldr	r3, [r0, #24]
 8003178:	b90b      	cbnz	r3, 800317e <_fflush_r+0x1a>
 800317a:	f000 f887 	bl	800328c <__sinit>
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <_fflush_r+0x6c>)
 8003180:	429c      	cmp	r4, r3
 8003182:	d11b      	bne.n	80031bc <_fflush_r+0x58>
 8003184:	686c      	ldr	r4, [r5, #4]
 8003186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0ef      	beq.n	800316e <_fflush_r+0xa>
 800318e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003190:	07d0      	lsls	r0, r2, #31
 8003192:	d404      	bmi.n	800319e <_fflush_r+0x3a>
 8003194:	0599      	lsls	r1, r3, #22
 8003196:	d402      	bmi.n	800319e <_fflush_r+0x3a>
 8003198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800319a:	f000 f915 	bl	80033c8 <__retarget_lock_acquire_recursive>
 800319e:	4628      	mov	r0, r5
 80031a0:	4621      	mov	r1, r4
 80031a2:	f7ff ff59 	bl	8003058 <__sflush_r>
 80031a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031a8:	4605      	mov	r5, r0
 80031aa:	07da      	lsls	r2, r3, #31
 80031ac:	d4e0      	bmi.n	8003170 <_fflush_r+0xc>
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	059b      	lsls	r3, r3, #22
 80031b2:	d4dd      	bmi.n	8003170 <_fflush_r+0xc>
 80031b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031b6:	f000 f908 	bl	80033ca <__retarget_lock_release_recursive>
 80031ba:	e7d9      	b.n	8003170 <_fflush_r+0xc>
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <_fflush_r+0x70>)
 80031be:	429c      	cmp	r4, r3
 80031c0:	d101      	bne.n	80031c6 <_fflush_r+0x62>
 80031c2:	68ac      	ldr	r4, [r5, #8]
 80031c4:	e7df      	b.n	8003186 <_fflush_r+0x22>
 80031c6:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <_fflush_r+0x74>)
 80031c8:	429c      	cmp	r4, r3
 80031ca:	bf08      	it	eq
 80031cc:	68ec      	ldreq	r4, [r5, #12]
 80031ce:	e7da      	b.n	8003186 <_fflush_r+0x22>
 80031d0:	08005678 	.word	0x08005678
 80031d4:	08005698 	.word	0x08005698
 80031d8:	08005658 	.word	0x08005658

080031dc <std>:
 80031dc:	2300      	movs	r3, #0
 80031de:	b510      	push	{r4, lr}
 80031e0:	4604      	mov	r4, r0
 80031e2:	e9c0 3300 	strd	r3, r3, [r0]
 80031e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031ea:	6083      	str	r3, [r0, #8]
 80031ec:	8181      	strh	r1, [r0, #12]
 80031ee:	6643      	str	r3, [r0, #100]	; 0x64
 80031f0:	81c2      	strh	r2, [r0, #14]
 80031f2:	6183      	str	r3, [r0, #24]
 80031f4:	4619      	mov	r1, r3
 80031f6:	2208      	movs	r2, #8
 80031f8:	305c      	adds	r0, #92	; 0x5c
 80031fa:	f7ff fd39 	bl	8002c70 <memset>
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <std+0x38>)
 8003200:	6224      	str	r4, [r4, #32]
 8003202:	6263      	str	r3, [r4, #36]	; 0x24
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <std+0x3c>)
 8003206:	62a3      	str	r3, [r4, #40]	; 0x28
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <std+0x40>)
 800320a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <std+0x44>)
 800320e:	6323      	str	r3, [r4, #48]	; 0x30
 8003210:	bd10      	pop	{r4, pc}
 8003212:	bf00      	nop
 8003214:	080034ad 	.word	0x080034ad
 8003218:	080034cf 	.word	0x080034cf
 800321c:	08003507 	.word	0x08003507
 8003220:	0800352b 	.word	0x0800352b

08003224 <_cleanup_r>:
 8003224:	4901      	ldr	r1, [pc, #4]	; (800322c <_cleanup_r+0x8>)
 8003226:	f000 b8af 	b.w	8003388 <_fwalk_reent>
 800322a:	bf00      	nop
 800322c:	08003165 	.word	0x08003165

08003230 <__sfmoreglue>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	2568      	movs	r5, #104	; 0x68
 8003234:	1e4a      	subs	r2, r1, #1
 8003236:	4355      	muls	r5, r2
 8003238:	460e      	mov	r6, r1
 800323a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800323e:	f7ff fd6b 	bl	8002d18 <_malloc_r>
 8003242:	4604      	mov	r4, r0
 8003244:	b140      	cbz	r0, 8003258 <__sfmoreglue+0x28>
 8003246:	2100      	movs	r1, #0
 8003248:	e9c0 1600 	strd	r1, r6, [r0]
 800324c:	300c      	adds	r0, #12
 800324e:	60a0      	str	r0, [r4, #8]
 8003250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003254:	f7ff fd0c 	bl	8002c70 <memset>
 8003258:	4620      	mov	r0, r4
 800325a:	bd70      	pop	{r4, r5, r6, pc}

0800325c <__sfp_lock_acquire>:
 800325c:	4801      	ldr	r0, [pc, #4]	; (8003264 <__sfp_lock_acquire+0x8>)
 800325e:	f000 b8b3 	b.w	80033c8 <__retarget_lock_acquire_recursive>
 8003262:	bf00      	nop
 8003264:	2000011c 	.word	0x2000011c

08003268 <__sfp_lock_release>:
 8003268:	4801      	ldr	r0, [pc, #4]	; (8003270 <__sfp_lock_release+0x8>)
 800326a:	f000 b8ae 	b.w	80033ca <__retarget_lock_release_recursive>
 800326e:	bf00      	nop
 8003270:	2000011c 	.word	0x2000011c

08003274 <__sinit_lock_acquire>:
 8003274:	4801      	ldr	r0, [pc, #4]	; (800327c <__sinit_lock_acquire+0x8>)
 8003276:	f000 b8a7 	b.w	80033c8 <__retarget_lock_acquire_recursive>
 800327a:	bf00      	nop
 800327c:	20000117 	.word	0x20000117

08003280 <__sinit_lock_release>:
 8003280:	4801      	ldr	r0, [pc, #4]	; (8003288 <__sinit_lock_release+0x8>)
 8003282:	f000 b8a2 	b.w	80033ca <__retarget_lock_release_recursive>
 8003286:	bf00      	nop
 8003288:	20000117 	.word	0x20000117

0800328c <__sinit>:
 800328c:	b510      	push	{r4, lr}
 800328e:	4604      	mov	r4, r0
 8003290:	f7ff fff0 	bl	8003274 <__sinit_lock_acquire>
 8003294:	69a3      	ldr	r3, [r4, #24]
 8003296:	b11b      	cbz	r3, 80032a0 <__sinit+0x14>
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329c:	f7ff bff0 	b.w	8003280 <__sinit_lock_release>
 80032a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032a4:	6523      	str	r3, [r4, #80]	; 0x50
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <__sinit+0x68>)
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <__sinit+0x6c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80032ae:	42a3      	cmp	r3, r4
 80032b0:	bf08      	it	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	4620      	mov	r0, r4
 80032b6:	bf08      	it	eq
 80032b8:	61a3      	streq	r3, [r4, #24]
 80032ba:	f000 f81f 	bl	80032fc <__sfp>
 80032be:	6060      	str	r0, [r4, #4]
 80032c0:	4620      	mov	r0, r4
 80032c2:	f000 f81b 	bl	80032fc <__sfp>
 80032c6:	60a0      	str	r0, [r4, #8]
 80032c8:	4620      	mov	r0, r4
 80032ca:	f000 f817 	bl	80032fc <__sfp>
 80032ce:	2200      	movs	r2, #0
 80032d0:	2104      	movs	r1, #4
 80032d2:	60e0      	str	r0, [r4, #12]
 80032d4:	6860      	ldr	r0, [r4, #4]
 80032d6:	f7ff ff81 	bl	80031dc <std>
 80032da:	2201      	movs	r2, #1
 80032dc:	2109      	movs	r1, #9
 80032de:	68a0      	ldr	r0, [r4, #8]
 80032e0:	f7ff ff7c 	bl	80031dc <std>
 80032e4:	2202      	movs	r2, #2
 80032e6:	2112      	movs	r1, #18
 80032e8:	68e0      	ldr	r0, [r4, #12]
 80032ea:	f7ff ff77 	bl	80031dc <std>
 80032ee:	2301      	movs	r3, #1
 80032f0:	61a3      	str	r3, [r4, #24]
 80032f2:	e7d1      	b.n	8003298 <__sinit+0xc>
 80032f4:	08005654 	.word	0x08005654
 80032f8:	08003225 	.word	0x08003225

080032fc <__sfp>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	4607      	mov	r7, r0
 8003300:	f7ff ffac 	bl	800325c <__sfp_lock_acquire>
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <__sfp+0x84>)
 8003306:	681e      	ldr	r6, [r3, #0]
 8003308:	69b3      	ldr	r3, [r6, #24]
 800330a:	b913      	cbnz	r3, 8003312 <__sfp+0x16>
 800330c:	4630      	mov	r0, r6
 800330e:	f7ff ffbd 	bl	800328c <__sinit>
 8003312:	3648      	adds	r6, #72	; 0x48
 8003314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003318:	3b01      	subs	r3, #1
 800331a:	d503      	bpl.n	8003324 <__sfp+0x28>
 800331c:	6833      	ldr	r3, [r6, #0]
 800331e:	b30b      	cbz	r3, 8003364 <__sfp+0x68>
 8003320:	6836      	ldr	r6, [r6, #0]
 8003322:	e7f7      	b.n	8003314 <__sfp+0x18>
 8003324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003328:	b9d5      	cbnz	r5, 8003360 <__sfp+0x64>
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <__sfp+0x88>)
 800332c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003330:	60e3      	str	r3, [r4, #12]
 8003332:	6665      	str	r5, [r4, #100]	; 0x64
 8003334:	f000 f847 	bl	80033c6 <__retarget_lock_init_recursive>
 8003338:	f7ff ff96 	bl	8003268 <__sfp_lock_release>
 800333c:	2208      	movs	r2, #8
 800333e:	4629      	mov	r1, r5
 8003340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003348:	6025      	str	r5, [r4, #0]
 800334a:	61a5      	str	r5, [r4, #24]
 800334c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003350:	f7ff fc8e 	bl	8002c70 <memset>
 8003354:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003358:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800335c:	4620      	mov	r0, r4
 800335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003360:	3468      	adds	r4, #104	; 0x68
 8003362:	e7d9      	b.n	8003318 <__sfp+0x1c>
 8003364:	2104      	movs	r1, #4
 8003366:	4638      	mov	r0, r7
 8003368:	f7ff ff62 	bl	8003230 <__sfmoreglue>
 800336c:	4604      	mov	r4, r0
 800336e:	6030      	str	r0, [r6, #0]
 8003370:	2800      	cmp	r0, #0
 8003372:	d1d5      	bne.n	8003320 <__sfp+0x24>
 8003374:	f7ff ff78 	bl	8003268 <__sfp_lock_release>
 8003378:	230c      	movs	r3, #12
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	e7ee      	b.n	800335c <__sfp+0x60>
 800337e:	bf00      	nop
 8003380:	08005654 	.word	0x08005654
 8003384:	ffff0001 	.word	0xffff0001

08003388 <_fwalk_reent>:
 8003388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800338c:	4606      	mov	r6, r0
 800338e:	4688      	mov	r8, r1
 8003390:	2700      	movs	r7, #0
 8003392:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003396:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800339a:	f1b9 0901 	subs.w	r9, r9, #1
 800339e:	d505      	bpl.n	80033ac <_fwalk_reent+0x24>
 80033a0:	6824      	ldr	r4, [r4, #0]
 80033a2:	2c00      	cmp	r4, #0
 80033a4:	d1f7      	bne.n	8003396 <_fwalk_reent+0xe>
 80033a6:	4638      	mov	r0, r7
 80033a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ac:	89ab      	ldrh	r3, [r5, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d907      	bls.n	80033c2 <_fwalk_reent+0x3a>
 80033b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033b6:	3301      	adds	r3, #1
 80033b8:	d003      	beq.n	80033c2 <_fwalk_reent+0x3a>
 80033ba:	4629      	mov	r1, r5
 80033bc:	4630      	mov	r0, r6
 80033be:	47c0      	blx	r8
 80033c0:	4307      	orrs	r7, r0
 80033c2:	3568      	adds	r5, #104	; 0x68
 80033c4:	e7e9      	b.n	800339a <_fwalk_reent+0x12>

080033c6 <__retarget_lock_init_recursive>:
 80033c6:	4770      	bx	lr

080033c8 <__retarget_lock_acquire_recursive>:
 80033c8:	4770      	bx	lr

080033ca <__retarget_lock_release_recursive>:
 80033ca:	4770      	bx	lr

080033cc <__swhatbuf_r>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	460e      	mov	r6, r1
 80033d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d4:	4614      	mov	r4, r2
 80033d6:	2900      	cmp	r1, #0
 80033d8:	461d      	mov	r5, r3
 80033da:	b096      	sub	sp, #88	; 0x58
 80033dc:	da07      	bge.n	80033ee <__swhatbuf_r+0x22>
 80033de:	2300      	movs	r3, #0
 80033e0:	602b      	str	r3, [r5, #0]
 80033e2:	89b3      	ldrh	r3, [r6, #12]
 80033e4:	061a      	lsls	r2, r3, #24
 80033e6:	d410      	bmi.n	800340a <__swhatbuf_r+0x3e>
 80033e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ec:	e00e      	b.n	800340c <__swhatbuf_r+0x40>
 80033ee:	466a      	mov	r2, sp
 80033f0:	f000 f8c2 	bl	8003578 <_fstat_r>
 80033f4:	2800      	cmp	r0, #0
 80033f6:	dbf2      	blt.n	80033de <__swhatbuf_r+0x12>
 80033f8:	9a01      	ldr	r2, [sp, #4]
 80033fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003402:	425a      	negs	r2, r3
 8003404:	415a      	adcs	r2, r3
 8003406:	602a      	str	r2, [r5, #0]
 8003408:	e7ee      	b.n	80033e8 <__swhatbuf_r+0x1c>
 800340a:	2340      	movs	r3, #64	; 0x40
 800340c:	2000      	movs	r0, #0
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	b016      	add	sp, #88	; 0x58
 8003412:	bd70      	pop	{r4, r5, r6, pc}

08003414 <__smakebuf_r>:
 8003414:	898b      	ldrh	r3, [r1, #12]
 8003416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003418:	079d      	lsls	r5, r3, #30
 800341a:	4606      	mov	r6, r0
 800341c:	460c      	mov	r4, r1
 800341e:	d507      	bpl.n	8003430 <__smakebuf_r+0x1c>
 8003420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	2301      	movs	r3, #1
 800342a:	6163      	str	r3, [r4, #20]
 800342c:	b002      	add	sp, #8
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	466a      	mov	r2, sp
 8003432:	ab01      	add	r3, sp, #4
 8003434:	f7ff ffca 	bl	80033cc <__swhatbuf_r>
 8003438:	9900      	ldr	r1, [sp, #0]
 800343a:	4605      	mov	r5, r0
 800343c:	4630      	mov	r0, r6
 800343e:	f7ff fc6b 	bl	8002d18 <_malloc_r>
 8003442:	b948      	cbnz	r0, 8003458 <__smakebuf_r+0x44>
 8003444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003448:	059a      	lsls	r2, r3, #22
 800344a:	d4ef      	bmi.n	800342c <__smakebuf_r+0x18>
 800344c:	f023 0303 	bic.w	r3, r3, #3
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	e7e3      	b.n	8003420 <__smakebuf_r+0xc>
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <__smakebuf_r+0x7c>)
 800345a:	62b3      	str	r3, [r6, #40]	; 0x28
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	6020      	str	r0, [r4, #0]
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	81a3      	strh	r3, [r4, #12]
 8003466:	9b00      	ldr	r3, [sp, #0]
 8003468:	6120      	str	r0, [r4, #16]
 800346a:	6163      	str	r3, [r4, #20]
 800346c:	9b01      	ldr	r3, [sp, #4]
 800346e:	b15b      	cbz	r3, 8003488 <__smakebuf_r+0x74>
 8003470:	4630      	mov	r0, r6
 8003472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003476:	f000 f891 	bl	800359c <_isatty_r>
 800347a:	b128      	cbz	r0, 8003488 <__smakebuf_r+0x74>
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	81a3      	strh	r3, [r4, #12]
 8003488:	89a0      	ldrh	r0, [r4, #12]
 800348a:	4305      	orrs	r5, r0
 800348c:	81a5      	strh	r5, [r4, #12]
 800348e:	e7cd      	b.n	800342c <__smakebuf_r+0x18>
 8003490:	08003225 	.word	0x08003225

08003494 <__malloc_lock>:
 8003494:	4801      	ldr	r0, [pc, #4]	; (800349c <__malloc_lock+0x8>)
 8003496:	f7ff bf97 	b.w	80033c8 <__retarget_lock_acquire_recursive>
 800349a:	bf00      	nop
 800349c:	20000118 	.word	0x20000118

080034a0 <__malloc_unlock>:
 80034a0:	4801      	ldr	r0, [pc, #4]	; (80034a8 <__malloc_unlock+0x8>)
 80034a2:	f7ff bf92 	b.w	80033ca <__retarget_lock_release_recursive>
 80034a6:	bf00      	nop
 80034a8:	20000118 	.word	0x20000118

080034ac <__sread>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	460c      	mov	r4, r1
 80034b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b4:	f000 f894 	bl	80035e0 <_read_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	bfab      	itete	ge
 80034bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034be:	89a3      	ldrhlt	r3, [r4, #12]
 80034c0:	181b      	addge	r3, r3, r0
 80034c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034c6:	bfac      	ite	ge
 80034c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80034ca:	81a3      	strhlt	r3, [r4, #12]
 80034cc:	bd10      	pop	{r4, pc}

080034ce <__swrite>:
 80034ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d2:	461f      	mov	r7, r3
 80034d4:	898b      	ldrh	r3, [r1, #12]
 80034d6:	4605      	mov	r5, r0
 80034d8:	05db      	lsls	r3, r3, #23
 80034da:	460c      	mov	r4, r1
 80034dc:	4616      	mov	r6, r2
 80034de:	d505      	bpl.n	80034ec <__swrite+0x1e>
 80034e0:	2302      	movs	r3, #2
 80034e2:	2200      	movs	r2, #0
 80034e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034e8:	f000 f868 	bl	80035bc <_lseek_r>
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	4632      	mov	r2, r6
 80034f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	4628      	mov	r0, r5
 80034f8:	463b      	mov	r3, r7
 80034fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003502:	f000 b817 	b.w	8003534 <_write_r>

08003506 <__sseek>:
 8003506:	b510      	push	{r4, lr}
 8003508:	460c      	mov	r4, r1
 800350a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800350e:	f000 f855 	bl	80035bc <_lseek_r>
 8003512:	1c43      	adds	r3, r0, #1
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	bf15      	itete	ne
 8003518:	6560      	strne	r0, [r4, #84]	; 0x54
 800351a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800351e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003522:	81a3      	strheq	r3, [r4, #12]
 8003524:	bf18      	it	ne
 8003526:	81a3      	strhne	r3, [r4, #12]
 8003528:	bd10      	pop	{r4, pc}

0800352a <__sclose>:
 800352a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800352e:	f000 b813 	b.w	8003558 <_close_r>
	...

08003534 <_write_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	2200      	movs	r2, #0
 800353e:	4d05      	ldr	r5, [pc, #20]	; (8003554 <_write_r+0x20>)
 8003540:	602a      	str	r2, [r5, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f7fe f8f6 	bl	8001734 <_write>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_write_r+0x1e>
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	b103      	cbz	r3, 8003552 <_write_r+0x1e>
 8003550:	6023      	str	r3, [r4, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	20000120 	.word	0x20000120

08003558 <_close_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	2300      	movs	r3, #0
 800355c:	4d05      	ldr	r5, [pc, #20]	; (8003574 <_close_r+0x1c>)
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	f7fe f902 	bl	800176c <_close>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_close_r+0x1a>
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	b103      	cbz	r3, 8003572 <_close_r+0x1a>
 8003570:	6023      	str	r3, [r4, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	20000120 	.word	0x20000120

08003578 <_fstat_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	2300      	movs	r3, #0
 800357c:	4d06      	ldr	r5, [pc, #24]	; (8003598 <_fstat_r+0x20>)
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	f7fe f8fc 	bl	8001782 <_fstat>
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	d102      	bne.n	8003594 <_fstat_r+0x1c>
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	b103      	cbz	r3, 8003594 <_fstat_r+0x1c>
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	bf00      	nop
 8003598:	20000120 	.word	0x20000120

0800359c <_isatty_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	2300      	movs	r3, #0
 80035a0:	4d05      	ldr	r5, [pc, #20]	; (80035b8 <_isatty_r+0x1c>)
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fe f8fa 	bl	80017a0 <_isatty>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_isatty_r+0x1a>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_isatty_r+0x1a>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000120 	.word	0x20000120

080035bc <_lseek_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4604      	mov	r4, r0
 80035c0:	4608      	mov	r0, r1
 80035c2:	4611      	mov	r1, r2
 80035c4:	2200      	movs	r2, #0
 80035c6:	4d05      	ldr	r5, [pc, #20]	; (80035dc <_lseek_r+0x20>)
 80035c8:	602a      	str	r2, [r5, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f7fe f8f2 	bl	80017b4 <_lseek>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_lseek_r+0x1e>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_lseek_r+0x1e>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	20000120 	.word	0x20000120

080035e0 <_read_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	2200      	movs	r2, #0
 80035ea:	4d05      	ldr	r5, [pc, #20]	; (8003600 <_read_r+0x20>)
 80035ec:	602a      	str	r2, [r5, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f7fe f883 	bl	80016fa <_read>
 80035f4:	1c43      	adds	r3, r0, #1
 80035f6:	d102      	bne.n	80035fe <_read_r+0x1e>
 80035f8:	682b      	ldr	r3, [r5, #0]
 80035fa:	b103      	cbz	r3, 80035fe <_read_r+0x1e>
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20000120 	.word	0x20000120

08003604 <_init>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr

08003610 <_fini>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr
