
SteeringWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000405c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003020  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007200  08007200  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007208  08007208  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000080  08007290  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08007290  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008929  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d48  00000000  00000000  000289d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a16  00000000  00000000  0002b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b374  00000000  00000000  0004c14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbfec  00000000  00000000  000574c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001134ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  00113500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000080 	.word	0x20000080
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080041c8 	.word	0x080041c8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000084 	.word	0x20000084
 80001c0:	080041c8 	.word	0x080041c8

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	4608      	mov	r0, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	461a      	mov	r2, r3
 80004da:	4603      	mov	r3, r0
 80004dc:	817b      	strh	r3, [r7, #10]
 80004de:	460b      	mov	r3, r1
 80004e0:	813b      	strh	r3, [r7, #8]
 80004e2:	4613      	mov	r3, r2
 80004e4:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80004e6:	4b22      	ldr	r3, [pc, #136]	; (8000570 <Paint_NewImage+0xa4>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 80004ec:	4a20      	ldr	r2, [pc, #128]	; (8000570 <Paint_NewImage+0xa4>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <Paint_NewImage+0xa4>)
 80004f4:	897b      	ldrh	r3, [r7, #10]
 80004f6:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 80004f8:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <Paint_NewImage+0xa4>)
 80004fa:	893b      	ldrh	r3, [r7, #8]
 80004fc:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <Paint_NewImage+0xa4>)
 8000500:	8b3b      	ldrh	r3, [r7, #24]
 8000502:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <Paint_NewImage+0xa4>)
 8000506:	2202      	movs	r2, #2
 8000508:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800050a:	897b      	ldrh	r3, [r7, #10]
 800050c:	f003 0307 	and.w	r3, r3, #7
 8000510:	b29b      	uxth	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d103      	bne.n	800051e <Paint_NewImage+0x52>
 8000516:	897b      	ldrh	r3, [r7, #10]
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	b29b      	uxth	r3, r3
 800051c:	e004      	b.n	8000528 <Paint_NewImage+0x5c>
 800051e:	897b      	ldrh	r3, [r7, #10]
 8000520:	08db      	lsrs	r3, r3, #3
 8000522:	b29b      	uxth	r3, r3
 8000524:	3301      	adds	r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <Paint_NewImage+0xa4>)
 800052a:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800052c:	4a10      	ldr	r2, [pc, #64]	; (8000570 <Paint_NewImage+0xa4>)
 800052e:	893b      	ldrh	r3, [r7, #8]
 8000530:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <Paint_NewImage+0xa4>)
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <Paint_NewImage+0xa4>)
 800053a:	2200      	movs	r2, #0
 800053c:	821a      	strh	r2, [r3, #16]

    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <Paint_NewImage+0x7e>
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	2bb4      	cmp	r3, #180	; 0xb4
 8000548:	d106      	bne.n	8000558 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <Paint_NewImage+0xa4>)
 800054c:	897b      	ldrh	r3, [r7, #10]
 800054e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <Paint_NewImage+0xa4>)
 8000552:	893b      	ldrh	r3, [r7, #8]
 8000554:	80d3      	strh	r3, [r2, #6]
 8000556:	e006      	b.n	8000566 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <Paint_NewImage+0xa4>)
 800055a:	893b      	ldrh	r3, [r7, #8]
 800055c:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <Paint_NewImage+0xa4>)
 8000560:	897b      	ldrh	r3, [r7, #10]
 8000562:	80d3      	strh	r3, [r2, #6]
    }
}
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr
 8000570:	2000009c 	.word	0x2000009c

08000574 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <Paint_SelectImage+0x18>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	2000009c 	.word	0x2000009c

08000590 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d118      	bne.n	80005d2 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <Paint_SetScale+0xc8>)
 80005a6:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <Paint_SetScale+0xc8>)
 80005aa:	891b      	ldrh	r3, [r3, #8]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d104      	bne.n	80005c0 <Paint_SetScale+0x30>
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <Paint_SetScale+0xc8>)
 80005b8:	891b      	ldrh	r3, [r3, #8]
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	e005      	b.n	80005cc <Paint_SetScale+0x3c>
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <Paint_SetScale+0xc8>)
 80005c2:	891b      	ldrh	r3, [r3, #8]
 80005c4:	08db      	lsrs	r3, r3, #3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	3301      	adds	r3, #1
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4a22      	ldr	r2, [pc, #136]	; (8000658 <Paint_SetScale+0xc8>)
 80005ce:	8253      	strh	r3, [r2, #18]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
		}else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 7\r\n");
    }
}
 80005d0:	e03d      	b.n	800064e <Paint_SetScale+0xbe>
    }else if(scale == 4){
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d118      	bne.n	800060a <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <Paint_SetScale+0xc8>)
 80005de:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <Paint_SetScale+0xc8>)
 80005e2:	891b      	ldrh	r3, [r3, #8]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d104      	bne.n	80005f8 <Paint_SetScale+0x68>
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <Paint_SetScale+0xc8>)
 80005f0:	891b      	ldrh	r3, [r3, #8]
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	e005      	b.n	8000604 <Paint_SetScale+0x74>
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <Paint_SetScale+0xc8>)
 80005fa:	891b      	ldrh	r3, [r3, #8]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	b29b      	uxth	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b29b      	uxth	r3, r3
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <Paint_SetScale+0xc8>)
 8000606:	8253      	strh	r3, [r2, #18]
}
 8000608:	e021      	b.n	800064e <Paint_SetScale+0xbe>
    }else if(scale == 7){//Only applicable with 5in65 e-Paper
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b07      	cmp	r3, #7
 800060e:	d118      	bne.n	8000642 <Paint_SetScale+0xb2>
				Paint.Scale = scale;
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <Paint_SetScale+0xc8>)
 8000616:	82da      	strh	r2, [r3, #22]
				Paint.WidthByte = (Paint.WidthMemory % 2 == 0)? (Paint.WidthMemory / 2 ): (Paint.WidthMemory / 2 + 1);;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <Paint_SetScale+0xc8>)
 800061a:	891b      	ldrh	r3, [r3, #8]
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b29b      	uxth	r3, r3
 8000622:	2b00      	cmp	r3, #0
 8000624:	d104      	bne.n	8000630 <Paint_SetScale+0xa0>
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <Paint_SetScale+0xc8>)
 8000628:	891b      	ldrh	r3, [r3, #8]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	b29b      	uxth	r3, r3
 800062e:	e005      	b.n	800063c <Paint_SetScale+0xac>
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <Paint_SetScale+0xc8>)
 8000632:	891b      	ldrh	r3, [r3, #8]
 8000634:	085b      	lsrs	r3, r3, #1
 8000636:	b29b      	uxth	r3, r3
 8000638:	3301      	adds	r3, #1
 800063a:	b29b      	uxth	r3, r3
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <Paint_SetScale+0xc8>)
 800063e:	8253      	strh	r3, [r2, #18]
}
 8000640:	e005      	b.n	800064e <Paint_SetScale+0xbe>
        Debug("Set Scale Input parameter error\r\n");
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <Paint_SetScale+0xcc>)
 8000644:	f002 fe94 	bl	8003370 <puts>
        Debug("Scale Only support: 2 4 7\r\n");
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <Paint_SetScale+0xd0>)
 800064a:	f002 fe91 	bl	8003370 <puts>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000009c 	.word	0x2000009c
 800065c:	08004224 	.word	0x08004224
 8000660:	0800424c 	.word	0x0800424c

08000664 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
 800066e:	460b      	mov	r3, r1
 8000670:	80bb      	strh	r3, [r7, #4]
 8000672:	4613      	mov	r3, r2
 8000674:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000676:	4b9f      	ldr	r3, [pc, #636]	; (80008f4 <Paint_SetPixel+0x290>)
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	88fa      	ldrh	r2, [r7, #6]
 800067c:	429a      	cmp	r2, r3
 800067e:	d804      	bhi.n	800068a <Paint_SetPixel+0x26>
 8000680:	4b9c      	ldr	r3, [pc, #624]	; (80008f4 <Paint_SetPixel+0x290>)
 8000682:	88db      	ldrh	r3, [r3, #6]
 8000684:	88ba      	ldrh	r2, [r7, #4]
 8000686:	429a      	cmp	r2, r3
 8000688:	d903      	bls.n	8000692 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800068a:	489b      	ldr	r0, [pc, #620]	; (80008f8 <Paint_SetPixel+0x294>)
 800068c:	f002 fe70 	bl	8003370 <puts>
        return;
 8000690:	e12d      	b.n	80008ee <Paint_SetPixel+0x28a>
    }
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000692:	4b98      	ldr	r3, [pc, #608]	; (80008f4 <Paint_SetPixel+0x290>)
 8000694:	89db      	ldrh	r3, [r3, #14]
 8000696:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800069a:	d02b      	beq.n	80006f4 <Paint_SetPixel+0x90>
 800069c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80006a0:	f300 8122 	bgt.w	80008e8 <Paint_SetPixel+0x284>
 80006a4:	2bb4      	cmp	r3, #180	; 0xb4
 80006a6:	d016      	beq.n	80006d6 <Paint_SetPixel+0x72>
 80006a8:	2bb4      	cmp	r3, #180	; 0xb4
 80006aa:	f300 811d 	bgt.w	80008e8 <Paint_SetPixel+0x284>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <Paint_SetPixel+0x54>
 80006b2:	2b5a      	cmp	r3, #90	; 0x5a
 80006b4:	d005      	beq.n	80006c2 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80006b6:	e117      	b.n	80008e8 <Paint_SetPixel+0x284>
        X = Xpoint;
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;
 80006bc:	88bb      	ldrh	r3, [r7, #4]
 80006be:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006c0:	e022      	b.n	8000708 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 80006c2:	4b8c      	ldr	r3, [pc, #560]	; (80008f4 <Paint_SetPixel+0x290>)
 80006c4:	891a      	ldrh	r2, [r3, #8]
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3b01      	subs	r3, #1
 80006ce:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006d4:	e018      	b.n	8000708 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 80006d6:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <Paint_SetPixel+0x290>)
 80006d8:	891a      	ldrh	r2, [r3, #8]
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	3b01      	subs	r3, #1
 80006e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 80006e4:	4b83      	ldr	r3, [pc, #524]	; (80008f4 <Paint_SetPixel+0x290>)
 80006e6:	895a      	ldrh	r2, [r3, #10]
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3b01      	subs	r3, #1
 80006f0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80006f2:	e009      	b.n	8000708 <Paint_SetPixel+0xa4>
        X = Ypoint;
 80006f4:	88bb      	ldrh	r3, [r7, #4]
 80006f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 80006f8:	4b7e      	ldr	r3, [pc, #504]	; (80008f4 <Paint_SetPixel+0x290>)
 80006fa:	895a      	ldrh	r2, [r3, #10]
 80006fc:	88fb      	ldrh	r3, [r7, #6]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	b29b      	uxth	r3, r3
 8000702:	3b01      	subs	r3, #1
 8000704:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000706:	bf00      	nop
    }

    switch(Paint.Mirror) {
 8000708:	4b7a      	ldr	r3, [pc, #488]	; (80008f4 <Paint_SetPixel+0x290>)
 800070a:	8a1b      	ldrh	r3, [r3, #16]
 800070c:	2b03      	cmp	r3, #3
 800070e:	f200 80ed 	bhi.w	80008ec <Paint_SetPixel+0x288>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <Paint_SetPixel+0xb4>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000767 	.word	0x08000767
 800071c:	08000729 	.word	0x08000729
 8000720:	08000739 	.word	0x08000739
 8000724:	08000749 	.word	0x08000749
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000728:	4b72      	ldr	r3, [pc, #456]	; (80008f4 <Paint_SetPixel+0x290>)
 800072a:	891a      	ldrh	r2, [r3, #8]
 800072c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8000736:	e017      	b.n	8000768 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000738:	4b6e      	ldr	r3, [pc, #440]	; (80008f4 <Paint_SetPixel+0x290>)
 800073a:	895a      	ldrh	r2, [r3, #10]
 800073c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b29b      	uxth	r3, r3
 8000742:	3b01      	subs	r3, #1
 8000744:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000746:	e00f      	b.n	8000768 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000748:	4b6a      	ldr	r3, [pc, #424]	; (80008f4 <Paint_SetPixel+0x290>)
 800074a:	891a      	ldrh	r2, [r3, #8]
 800074c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b29b      	uxth	r3, r3
 8000752:	3b01      	subs	r3, #1
 8000754:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8000756:	4b67      	ldr	r3, [pc, #412]	; (80008f4 <Paint_SetPixel+0x290>)
 8000758:	895a      	ldrh	r2, [r3, #10]
 800075a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	3b01      	subs	r3, #1
 8000762:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000764:	e000      	b.n	8000768 <Paint_SetPixel+0x104>
        break;
 8000766:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000768:	4b62      	ldr	r3, [pc, #392]	; (80008f4 <Paint_SetPixel+0x290>)
 800076a:	891b      	ldrh	r3, [r3, #8]
 800076c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800076e:	429a      	cmp	r2, r3
 8000770:	d804      	bhi.n	800077c <Paint_SetPixel+0x118>
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <Paint_SetPixel+0x290>)
 8000774:	895b      	ldrh	r3, [r3, #10]
 8000776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000778:	429a      	cmp	r2, r3
 800077a:	d903      	bls.n	8000784 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800077c:	485e      	ldr	r0, [pc, #376]	; (80008f8 <Paint_SetPixel+0x294>)
 800077e:	f002 fdf7 	bl	8003370 <puts>
        return;
 8000782:	e0b4      	b.n	80008ee <Paint_SetPixel+0x28a>
    }

    if(Paint.Scale == 2){
 8000784:	4b5b      	ldr	r3, [pc, #364]	; (80008f4 <Paint_SetPixel+0x290>)
 8000786:	8adb      	ldrh	r3, [r3, #22]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d139      	bne.n	8000800 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	b29b      	uxth	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000796:	4a57      	ldr	r2, [pc, #348]	; (80008f4 <Paint_SetPixel+0x290>)
 8000798:	8a52      	ldrh	r2, [r2, #18]
 800079a:	fb02 f303 	mul.w	r3, r2, r3
 800079e:	440b      	add	r3, r1
 80007a0:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80007a2:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <Paint_SetPixel+0x290>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80007ae:	887b      	ldrh	r3, [r7, #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d113      	bne.n	80007dc <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80007b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	fa42 f303 	asr.w	r3, r2, r3
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	b25a      	sxtb	r2, r3
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4013      	ands	r3, r2
 80007cc:	b259      	sxtb	r1, r3
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <Paint_SetPixel+0x290>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	4413      	add	r3, r2
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	e088      	b.n	80008ee <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 80007dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	fa42 f303 	asr.w	r3, r2, r3
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b259      	sxtb	r1, r3
 80007f2:	4b40      	ldr	r3, [pc, #256]	; (80008f4 <Paint_SetPixel+0x290>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	4413      	add	r3, r2
 80007fa:	b2ca      	uxtb	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e076      	b.n	80008ee <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8000800:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <Paint_SetPixel+0x290>)
 8000802:	8adb      	ldrh	r3, [r3, #22]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d137      	bne.n	8000878 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8000808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	b29b      	uxth	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000812:	4a38      	ldr	r2, [pc, #224]	; (80008f4 <Paint_SetPixel+0x290>)
 8000814:	8a52      	ldrh	r2, [r2, #18]
 8000816:	fb02 f303 	mul.w	r3, r2, r3
 800081a:	440b      	add	r3, r1
 800081c:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <Paint_SetPixel+0x290>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	75fb      	strb	r3, [r7, #23]

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8000832:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000834:	f003 0303 	and.w	r3, r3, #3
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	22c0      	movs	r2, #192	; 0xc0
 800083c:	fa42 f303 	asr.w	r3, r2, r3
 8000840:	b25b      	sxtb	r3, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	b25a      	sxtb	r2, r3
 8000846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800084a:	4013      	ands	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	019a      	lsls	r2, r3, #6
 8000854:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000856:	f003 0303 	and.w	r3, r3, #3
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	fa42 f303 	asr.w	r3, r2, r3
 8000860:	b25a      	sxtb	r2, r3
 8000862:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000866:	4313      	orrs	r3, r2
 8000868:	b259      	sxtb	r1, r3
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <Paint_SetPixel+0x290>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	b2ca      	uxtb	r2, r1
 8000874:	701a      	strb	r2, [r3, #0]
 8000876:	e03a      	b.n	80008ee <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <Paint_SetPixel+0x290>)
 800087a:	8adb      	ldrh	r3, [r3, #22]
 800087c:	2b07      	cmp	r3, #7
 800087e:	d136      	bne.n	80008ee <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000882:	085b      	lsrs	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	4619      	mov	r1, r3
 8000888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <Paint_SetPixel+0x290>)
 800088c:	8a52      	ldrh	r2, [r2, #18]
 800088e:	fb02 f303 	mul.w	r3, r2, r3
 8000892:	440b      	add	r3, r1
 8000894:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <Paint_SetPixel+0x290>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80008a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	22f0      	movs	r2, #240	; 0xf0
 80008ac:	fa42 f303 	asr.w	r3, r2, r3
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	b25a      	sxtb	r2, r3
 80008b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008ba:	4013      	ands	r3, r2
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80008c0:	887b      	ldrh	r3, [r7, #2]
 80008c2:	011a      	lsls	r2, r3, #4
 80008c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	fa42 f303 	asr.w	r3, r2, r3
 80008d0:	b25a      	sxtb	r2, r3
 80008d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b259      	sxtb	r1, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <Paint_SetPixel+0x290>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	6a3b      	ldr	r3, [r7, #32]
 80008e0:	4413      	add	r3, r2
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	e002      	b.n	80008ee <Paint_SetPixel+0x28a>
        return;
 80008e8:	bf00      	nop
 80008ea:	e000      	b.n	80008ee <Paint_SetPixel+0x28a>
        return;
 80008ec:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	08004308 	.word	0x08004308

080008fc <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2 || Paint.Scale == 4){
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <Paint_Clear+0xd0>)
 8000908:	8adb      	ldrh	r3, [r3, #22]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <Paint_Clear+0x1a>
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <Paint_Clear+0xd0>)
 8000910:	8adb      	ldrh	r3, [r3, #22]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d125      	bne.n	8000962 <Paint_Clear+0x66>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000916:	2300      	movs	r3, #0
 8000918:	82fb      	strh	r3, [r7, #22]
 800091a:	e01c      	b.n	8000956 <Paint_Clear+0x5a>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800091c:	2300      	movs	r3, #0
 800091e:	82bb      	strh	r3, [r7, #20]
 8000920:	e011      	b.n	8000946 <Paint_Clear+0x4a>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000922:	8aba      	ldrh	r2, [r7, #20]
 8000924:	8afb      	ldrh	r3, [r7, #22]
 8000926:	4929      	ldr	r1, [pc, #164]	; (80009cc <Paint_Clear+0xd0>)
 8000928:	8a49      	ldrh	r1, [r1, #18]
 800092a:	fb01 f303 	mul.w	r3, r1, r3
 800092e:	4413      	add	r3, r2
 8000930:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <Paint_Clear+0xd0>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	88fa      	ldrh	r2, [r7, #6]
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8000940:	8abb      	ldrh	r3, [r7, #20]
 8000942:	3301      	adds	r3, #1
 8000944:	82bb      	strh	r3, [r7, #20]
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <Paint_Clear+0xd0>)
 8000948:	8a5b      	ldrh	r3, [r3, #18]
 800094a:	8aba      	ldrh	r2, [r7, #20]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3e8      	bcc.n	8000922 <Paint_Clear+0x26>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8000950:	8afb      	ldrh	r3, [r7, #22]
 8000952:	3301      	adds	r3, #1
 8000954:	82fb      	strh	r3, [r7, #22]
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <Paint_Clear+0xd0>)
 8000958:	8a9b      	ldrh	r3, [r3, #20]
 800095a:	8afa      	ldrh	r2, [r7, #22]
 800095c:	429a      	cmp	r2, r3
 800095e:	d3dd      	bcc.n	800091c <Paint_Clear+0x20>
 8000960:	e02f      	b.n	80009c2 <Paint_Clear+0xc6>
			}
		}
	}else if(Paint.Scale == 7){
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <Paint_Clear+0xd0>)
 8000964:	8adb      	ldrh	r3, [r3, #22]
 8000966:	2b07      	cmp	r3, #7
 8000968:	d12b      	bne.n	80009c2 <Paint_Clear+0xc6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800096a:	2300      	movs	r3, #0
 800096c:	827b      	strh	r3, [r7, #18]
 800096e:	e022      	b.n	80009b6 <Paint_Clear+0xba>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8000970:	2300      	movs	r3, #0
 8000972:	823b      	strh	r3, [r7, #16]
 8000974:	e017      	b.n	80009a6 <Paint_Clear+0xaa>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8000976:	8a3a      	ldrh	r2, [r7, #16]
 8000978:	8a7b      	ldrh	r3, [r7, #18]
 800097a:	4914      	ldr	r1, [pc, #80]	; (80009cc <Paint_Clear+0xd0>)
 800097c:	8a49      	ldrh	r1, [r1, #18]
 800097e:	fb01 f303 	mul.w	r3, r1, r3
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<4)|Color;
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b25a      	sxtb	r2, r3
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b259      	sxtb	r1, r3
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <Paint_Clear+0xd0>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4413      	add	r3, r2
 800099c:	b2ca      	uxtb	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80009a0:	8a3b      	ldrh	r3, [r7, #16]
 80009a2:	3301      	adds	r3, #1
 80009a4:	823b      	strh	r3, [r7, #16]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <Paint_Clear+0xd0>)
 80009a8:	8a5b      	ldrh	r3, [r3, #18]
 80009aa:	8a3a      	ldrh	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3e2      	bcc.n	8000976 <Paint_Clear+0x7a>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80009b0:	8a7b      	ldrh	r3, [r7, #18]
 80009b2:	3301      	adds	r3, #1
 80009b4:	827b      	strh	r3, [r7, #18]
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <Paint_Clear+0xd0>)
 80009b8:	8a9b      	ldrh	r3, [r3, #20]
 80009ba:	8a7a      	ldrh	r2, [r7, #18]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3d7      	bcc.n	8000970 <Paint_Clear+0x74>
			}
		}
	}
}
 80009c0:	e7ff      	b.n	80009c2 <Paint_Clear+0xc6>
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	2000009c 	.word	0x2000009c

080009d0 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4604      	mov	r4, r0
 80009d8:	4608      	mov	r0, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	4623      	mov	r3, r4
 80009e0:	80fb      	strh	r3, [r7, #6]
 80009e2:	4603      	mov	r3, r0
 80009e4:	80bb      	strh	r3, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	807b      	strh	r3, [r7, #2]
 80009ea:	4613      	mov	r3, r2
 80009ec:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	81bb      	strh	r3, [r7, #12]
 80009f2:	e012      	b.n	8000a1a <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	81fb      	strh	r3, [r7, #14]
 80009f8:	e008      	b.n	8000a0c <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 80009fa:	8c3a      	ldrh	r2, [r7, #32]
 80009fc:	89b9      	ldrh	r1, [r7, #12]
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fe2f 	bl	8000664 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	81fb      	strh	r3, [r7, #14]
 8000a0c:	89fa      	ldrh	r2, [r7, #14]
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d3f2      	bcc.n	80009fa <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 8000a14:	89bb      	ldrh	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	81bb      	strh	r3, [r7, #12]
 8000a1a:	89ba      	ldrh	r2, [r7, #12]
 8000a1c:	883b      	ldrh	r3, [r7, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3e8      	bcc.n	80009f4 <Paint_ClearWindows+0x24>
        }
    }
}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd90      	pop	{r4, r7, pc}

08000a2c <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4603      	mov	r3, r0
 8000a36:	81fb      	strh	r3, [r7, #14]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	81bb      	strh	r3, [r7, #12]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000a40:	4b4c      	ldr	r3, [pc, #304]	; (8000b74 <Paint_DrawChar+0x148>)
 8000a42:	889b      	ldrh	r3, [r3, #4]
 8000a44:	89fa      	ldrh	r2, [r7, #14]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d804      	bhi.n	8000a54 <Paint_DrawChar+0x28>
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <Paint_DrawChar+0x148>)
 8000a4c:	88db      	ldrh	r3, [r3, #6]
 8000a4e:	89ba      	ldrh	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d903      	bls.n	8000a5c <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8000a54:	4848      	ldr	r0, [pc, #288]	; (8000b78 <Paint_DrawChar+0x14c>)
 8000a56:	f002 fc8b 	bl	8003370 <puts>
        return;
 8000a5a:	e087      	b.n	8000b6c <Paint_DrawChar+0x140>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	3b20      	subs	r3, #32
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	88d2      	ldrh	r2, [r2, #6]
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	8892      	ldrh	r2, [r2, #4]
 8000a6c:	08d2      	lsrs	r2, r2, #3
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	8892      	ldrh	r2, [r2, #4]
 8000a76:	f002 0207 	and.w	r2, r2, #7
 8000a7a:	b292      	uxth	r2, r2
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	bf14      	ite	ne
 8000a80:	2201      	movne	r2, #1
 8000a82:	2200      	moveq	r2, #0
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440a      	add	r2, r1
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4413      	add	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	83fb      	strh	r3, [r7, #30]
 8000a9c:	e061      	b.n	8000b62 <Paint_DrawChar+0x136>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	83bb      	strh	r3, [r7, #28]
 8000aa2:	e04c      	b.n	8000b3e <Paint_DrawChar+0x112>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000aa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d118      	bne.n	8000adc <Paint_DrawChar+0xb0>
                if (*ptr & (0x80 >> (Column % 8)))
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	8bbb      	ldrh	r3, [r7, #28]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	fa42 f303 	asr.w	r3, r2, r3
 8000abc:	400b      	ands	r3, r1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d031      	beq.n	8000b26 <Paint_DrawChar+0xfa>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000ac2:	89fa      	ldrh	r2, [r7, #14]
 8000ac4:	8bbb      	ldrh	r3, [r7, #28]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	89ba      	ldrh	r2, [r7, #12]
 8000acc:	8bfb      	ldrh	r3, [r7, #30]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f7ff fdc5 	bl	8000664 <Paint_SetPixel>
 8000ada:	e024      	b.n	8000b26 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	8bbb      	ldrh	r3, [r7, #28]
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	fa42 f303 	asr.w	r3, r2, r3
 8000aee:	400b      	ands	r3, r1
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d00c      	beq.n	8000b0e <Paint_DrawChar+0xe2>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	8bbb      	ldrh	r3, [r7, #28]
 8000af8:	4413      	add	r3, r2
 8000afa:	b298      	uxth	r0, r3
 8000afc:	89ba      	ldrh	r2, [r7, #12]
 8000afe:	8bfb      	ldrh	r3, [r7, #30]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b06:	4619      	mov	r1, r3
 8000b08:	f7ff fdac 	bl	8000664 <Paint_SetPixel>
 8000b0c:	e00b      	b.n	8000b26 <Paint_DrawChar+0xfa>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000b0e:	89fa      	ldrh	r2, [r7, #14]
 8000b10:	8bbb      	ldrh	r3, [r7, #28]
 8000b12:	4413      	add	r3, r2
 8000b14:	b298      	uxth	r0, r3
 8000b16:	89ba      	ldrh	r2, [r7, #12]
 8000b18:	8bfb      	ldrh	r3, [r7, #30]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	f7ff fd9f 	bl	8000664 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000b26:	8bbb      	ldrh	r3, [r7, #28]
 8000b28:	f003 0307 	and.w	r3, r3, #7
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	2b07      	cmp	r3, #7
 8000b30:	d102      	bne.n	8000b38 <Paint_DrawChar+0x10c>
                ptr++;
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	3301      	adds	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000b38:	8bbb      	ldrh	r3, [r7, #28]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	83bb      	strh	r3, [r7, #28]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	889b      	ldrh	r3, [r3, #4]
 8000b42:	8bba      	ldrh	r2, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3ad      	bcc.n	8000aa4 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <Paint_DrawChar+0x130>
            ptr++;
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000b5c:	8bfb      	ldrh	r3, [r7, #30]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	83fb      	strh	r3, [r7, #30]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	88db      	ldrh	r3, [r3, #6]
 8000b66:	8bfa      	ldrh	r2, [r7, #30]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d398      	bcc.n	8000a9e <Paint_DrawChar+0x72>
    }// Write all
}
 8000b6c:	3720      	adds	r7, #32
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	0800446c 	.word	0x0800446c

08000b7c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	60ba      	str	r2, [r7, #8]
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4603      	mov	r3, r0
 8000b88:	81fb      	strh	r3, [r7, #14]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000b92:	89bb      	ldrh	r3, [r7, #12]
 8000b94:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000b98:	889b      	ldrh	r3, [r3, #4]
 8000b9a:	89fa      	ldrh	r2, [r7, #14]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d804      	bhi.n	8000baa <Paint_DrawString_EN+0x2e>
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000ba2:	88db      	ldrh	r3, [r3, #6]
 8000ba4:	89ba      	ldrh	r2, [r7, #12]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d931      	bls.n	8000c0e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 8000baa:	481d      	ldr	r0, [pc, #116]	; (8000c20 <Paint_DrawString_EN+0xa4>)
 8000bac:	f002 fbe0 	bl	8003370 <puts>
        return;
 8000bb0:	e031      	b.n	8000c16 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000bb2:	8afb      	ldrh	r3, [r7, #22]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	8892      	ldrh	r2, [r2, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000bbc:	8892      	ldrh	r2, [r2, #4]
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	dd06      	ble.n	8000bd0 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88da      	ldrh	r2, [r3, #6]
 8000bca:	8abb      	ldrh	r3, [r7, #20]
 8000bcc:	4413      	add	r3, r2
 8000bce:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000bd0:	8abb      	ldrh	r3, [r7, #20]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	88d2      	ldrh	r2, [r2, #6]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <Paint_DrawString_EN+0xa0>)
 8000bda:	88d2      	ldrh	r2, [r2, #6]
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	dd03      	ble.n	8000be8 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	8ab9      	ldrh	r1, [r7, #20]
 8000bee:	8af8      	ldrh	r0, [r7, #22]
 8000bf0:	8c3b      	ldrh	r3, [r7, #32]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f7ff ff17 	bl	8000a2c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	889a      	ldrh	r2, [r3, #4]
 8000c08:	8afb      	ldrh	r3, [r7, #22]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1cd      	bne.n	8000bb2 <Paint_DrawString_EN+0x36>
    }
}
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000009c 	.word	0x2000009c
 8000c20:	080044ac 	.word	0x080044ac

08000c24 <Screen_Static_Init>:

extern UBYTE *STATIC_CANVAS;
extern UBYTE *DYNAMIC_CANVAS;

void Screen_Static_Init(UBYTE *Canvas)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	6078      	str	r0, [r7, #4]
	Screen_4Gray_Init();
 8000c2c:	f000 f9ee 	bl	800100c <Screen_4Gray_Init>
	Screen_4Gray_Clear();
 8000c30:	f000 fb40 	bl	80012b4 <Screen_4Gray_Clear>
	Screen_Delay_ms(500);
 8000c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c38:	f001 f8b4 	bl	8001da4 <HAL_Delay>
	Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_ORIENTATION, NONINVERTED);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	23b4      	movs	r3, #180	; 0xb4
 8000c42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fc3e 	bl	80004cc <Paint_NewImage>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <Static_Display>:

void Static_Display(UBYTE *Canvas)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	Screen_4Gray_Display(Canvas);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fbd3 	bl	800140c <Screen_4Gray_Display>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Screen_Dynamic_Init>:

void Screen_Dynamic_Init(UBYTE *Canvas)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af02      	add	r7, sp, #8
 8000c74:	6078      	str	r0, [r7, #4]
	Screen_1Gray_Init();
 8000c76:	f000 fa73 	bl	8001160 <Screen_1Gray_Init>
	Screen_1Gray_Clear();
 8000c7a:	f000 fb93 	bl	80013a4 <Screen_1Gray_Clear>
	Screen_Delay_ms(500);
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f001 f88f 	bl	8001da4 <HAL_Delay>
	Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_ORIENTATION, NONINVERTED);
 8000c86:	2300      	movs	r3, #0
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	23b4      	movs	r3, #180	; 0xb4
 8000c8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c90:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff fc19 	bl	80004cc <Paint_NewImage>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <Dynamic_Display>:

void Dynamic_Display(UBYTE *Canvas)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	Screen_1Gray_Display(Canvas);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 fcc6 	bl	800163c <Screen_1Gray_Display>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <Canvas_Init>:

UBYTE* Canvas_Init()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
	UBYTE *canvas;
	UWORD Imagesize = ((SCREEN_WIDTH % 4 == 0)? (SCREEN_WIDTH / 4 ): (SCREEN_WIDTH / 4 + 1)) * SCREEN_HEIGHT;
 8000cbe:	f248 3340 	movw	r3, #33600	; 0x8340
 8000cc2:	80fb      	strh	r3, [r7, #6]
	if((canvas = (UBYTE *)malloc(Imagesize)) == NULL) {
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 f9f0 	bl	80030ac <malloc>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d101      	bne.n	8000cda <Canvas_Init+0x22>
		return NULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <Canvas_Init+0x24>
	}
	return canvas;
 8000cda:	683b      	ldr	r3, [r7, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Screen_Startup>:

void Screen_Startup(UBYTE * Canvas)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
	Paint_NewImage(Canvas, SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_ORIENTATION, NONINVERTED);
 8000cec:	2300      	movs	r3, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	23b4      	movs	r3, #180	; 0xb4
 8000cf2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cf6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fbe6 	bl	80004cc <Paint_NewImage>
	Paint_SelectImage(Canvas);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fc37 	bl	8000574 <Paint_SelectImage>
	Paint_SetScale(4);
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff fc42 	bl	8000590 <Paint_SetScale>
	Paint_Clear(WHITE);
 8000d0c:	20ff      	movs	r0, #255	; 0xff
 8000d0e:	f7ff fdf5 	bl	80008fc <Paint_Clear>
	Static_Display(Canvas);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa0 	bl	8000c58 <Static_Display>
	HAL_Delay(2000);
 8000d18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1c:	f001 f842 	bl	8001da4 <HAL_Delay>
	Paint_DrawString_EN(15, 200, "QUT Motorsports", &Font24, WHITE, ClrBlack);
 8000d20:	2300      	movs	r3, #0
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	23ff      	movs	r3, #255	; 0xff
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <Screen_Startup+0x9c>)
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <Screen_Startup+0xa0>)
 8000d2c:	21c8      	movs	r1, #200	; 0xc8
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f7ff ff24 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(25, 225, "Steering Wheel", &Font24, WHITE, ClrBlack);
 8000d34:	2300      	movs	r3, #0
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	23ff      	movs	r3, #255	; 0xff
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <Screen_Startup+0x9c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <Screen_Startup+0xa4>)
 8000d40:	21e1      	movs	r1, #225	; 0xe1
 8000d42:	2019      	movs	r0, #25
 8000d44:	f7ff ff1a 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(35, 250, "Version 1.0", &Font24, WHITE, ClrBlack);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <Screen_Startup+0x9c>)
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <Screen_Startup+0xa8>)
 8000d54:	21fa      	movs	r1, #250	; 0xfa
 8000d56:	2023      	movs	r0, #35	; 0x23
 8000d58:	f7ff ff10 	bl	8000b7c <Paint_DrawString_EN>
	Static_Display(Canvas);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff7b 	bl	8000c58 <Static_Display>
	HAL_Delay(5000);
 8000d62:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d66:	f001 f81d 	bl	8001da4 <HAL_Delay>
	Paint_Clear(WHITE);
 8000d6a:	20ff      	movs	r0, #255	; 0xff
 8000d6c:	f7ff fdc6 	bl	80008fc <Paint_Clear>
	Static_Display(Canvas);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff71 	bl	8000c58 <Static_Display>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000000c 	.word	0x2000000c
 8000d84:	08004538 	.word	0x08004538
 8000d88:	08004548 	.word	0x08004548
 8000d8c:	08004558 	.word	0x08004558

08000d90 <Dynamic_Counter>:

void Dynamic_Counter(UBYTE *Canvas, int8_t *VCU_STATES)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	Paint_SelectImage(Canvas);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fbea 	bl	8000574 <Paint_SelectImage>
	Paint_SetScale(2);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fbf5 	bl	8000590 <Paint_SetScale>
	Paint_Clear(WHITE);
 8000da6:	20ff      	movs	r0, #255	; 0xff
 8000da8:	f7ff fda8 	bl	80008fc <Paint_Clear>
	Paint_ClearWindows(20, 20, 260, 460, WHITE);
 8000dac:	23ff      	movs	r3, #255	; 0xff
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	2114      	movs	r1, #20
 8000dba:	2014      	movs	r0, #20
 8000dbc:	f7ff fe08 	bl	80009d0 <Paint_ClearWindows>
	//Paint_DrawNum(50, 50, value, &Font24, ClrBlack, ClrWhite);
	Paint_DrawString_EN(25, 50, "QUT MS VCU STATUS", &Font20, WHITE, ClrBlack);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	23ff      	movs	r3, #255	; 0xff
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000dca:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <Dynamic_Counter+0xd4>)
 8000dcc:	2132      	movs	r1, #50	; 0x32
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f7ff fed4 	bl	8000b7c <Paint_DrawString_EN>
	char text[15];
	sprintf(text, "CTRL: 0x%02X", VCU_STATES[0]);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	4921      	ldr	r1, [pc, #132]	; (8000e68 <Dynamic_Counter+0xd8>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fadc 	bl	80033a0 <siprintf>
	Paint_DrawString_EN(75, 100, text, &Font20, WHITE, ClrBlack);
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	2300      	movs	r3, #0
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	23ff      	movs	r3, #255	; 0xff
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000df6:	2164      	movs	r1, #100	; 0x64
 8000df8:	204b      	movs	r0, #75	; 0x4b
 8000dfa:	f7ff febf 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 150, "DASH: 0x00", &Font20, WHITE, ClrBlack);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	9301      	str	r3, [sp, #4]
 8000e02:	23ff      	movs	r3, #255	; 0xff
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <Dynamic_Counter+0xdc>)
 8000e0a:	2196      	movs	r1, #150	; 0x96
 8000e0c:	204b      	movs	r0, #75	; 0x4b
 8000e0e:	f7ff feb5 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 200, "EBS:  0x00", &Font20, WHITE, ClrBlack);
 8000e12:	2300      	movs	r3, #0
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	23ff      	movs	r3, #255	; 0xff
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <Dynamic_Counter+0xe0>)
 8000e1e:	21c8      	movs	r1, #200	; 0xc8
 8000e20:	204b      	movs	r0, #75	; 0x4b
 8000e22:	f7ff feab 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 250, "BMU:  0x00", &Font20, WHITE, ClrBlack);
 8000e26:	2300      	movs	r3, #0
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	23ff      	movs	r3, #255	; 0xff
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e30:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <Dynamic_Counter+0xe4>)
 8000e32:	21fa      	movs	r1, #250	; 0xfa
 8000e34:	204b      	movs	r0, #75	; 0x4b
 8000e36:	f7ff fea1 	bl	8000b7c <Paint_DrawString_EN>
	Paint_DrawString_EN(75, 300, "DVL:  0x00", &Font20, WHITE, ClrBlack);
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	23ff      	movs	r3, #255	; 0xff
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <Dynamic_Counter+0xd0>)
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <Dynamic_Counter+0xe8>)
 8000e46:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000e4a:	204b      	movs	r0, #75	; 0x4b
 8000e4c:	f7ff fe96 	bl	8000b7c <Paint_DrawString_EN>
	Dynamic_Display(Canvas);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff26 	bl	8000ca2 <Dynamic_Display>
//	HAL_Delay(100);
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000004 	.word	0x20000004
 8000e64:	08004564 	.word	0x08004564
 8000e68:	08004578 	.word	0x08004578
 8000e6c:	08004588 	.word	0x08004588
 8000e70:	08004594 	.word	0x08004594
 8000e74:	080045a0 	.word	0x080045a0
 8000e78:	080045ac 	.word	0x080045ac

08000e7c <Screen_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void Screen_Reset(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8000e80:	2201      	movs	r2, #1
 8000e82:	490d      	ldr	r1, [pc, #52]	; (8000eb8 <Screen_Reset+0x3c>)
 8000e84:	2010      	movs	r0, #16
 8000e86:	f000 fc29 	bl	80016dc <Screen_Digital_Write>
    Screen_Delay_ms(300);
 8000e8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e8e:	f000 ff89 	bl	8001da4 <HAL_Delay>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	4908      	ldr	r1, [pc, #32]	; (8000eb8 <Screen_Reset+0x3c>)
 8000e96:	2010      	movs	r0, #16
 8000e98:	f000 fc20 	bl	80016dc <Screen_Digital_Write>
    Screen_Delay_ms(3);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 ff81 	bl	8001da4 <HAL_Delay>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4904      	ldr	r1, [pc, #16]	; (8000eb8 <Screen_Reset+0x3c>)
 8000ea6:	2010      	movs	r0, #16
 8000ea8:	f000 fc18 	bl	80016dc <Screen_Digital_Write>
    Screen_Delay_ms(300);
 8000eac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eb0:	f000 ff78 	bl	8001da4 <HAL_Delay>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020800 	.word	0x40020800

08000ebc <Screen_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void Screen_SendCommand(UBYTE Reg)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <Screen_SendCommand+0x38>)
 8000eca:	2040      	movs	r0, #64	; 0x40
 8000ecc:	f000 fc06 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <Screen_SendCommand+0x38>)
 8000ed4:	2010      	movs	r0, #16
 8000ed6:	f000 fc01 	bl	80016dc <Screen_Digital_Write>
    Screen_WriteByte(Reg);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fbe7 	bl	80016b0 <Screen_WriteByte>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4903      	ldr	r1, [pc, #12]	; (8000ef4 <Screen_SendCommand+0x38>)
 8000ee6:	2010      	movs	r0, #16
 8000ee8:	f000 fbf8 	bl	80016dc <Screen_Digital_Write>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <Screen_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void Screen_SendData(UBYTE Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	490a      	ldr	r1, [pc, #40]	; (8000f30 <Screen_SendData+0x38>)
 8000f06:	2040      	movs	r0, #64	; 0x40
 8000f08:	f000 fbe8 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <Screen_SendData+0x38>)
 8000f10:	2010      	movs	r0, #16
 8000f12:	f000 fbe3 	bl	80016dc <Screen_Digital_Write>
    Screen_WriteByte(Data);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fbc9 	bl	80016b0 <Screen_WriteByte>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4903      	ldr	r1, [pc, #12]	; (8000f30 <Screen_SendData+0x38>)
 8000f22:	2010      	movs	r0, #16
 8000f24:	f000 fbda 	bl	80016dc <Screen_Digital_Write>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020000 	.word	0x40020000

08000f34 <Screen_ReadBusy_HIGH>:

static void Screen_ReadBusy_HIGH(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
    Debug("e-Paper busy\r\n");
 8000f3a:	480b      	ldr	r0, [pc, #44]	; (8000f68 <Screen_ReadBusy_HIGH+0x34>)
 8000f3c:	f002 fa18 	bl	8003370 <puts>
    UBYTE busy;
    do {
        busy = Screen_Digital_Read(SBUSY_Pin, SBUSY_GPIO_Port);
 8000f40:	490a      	ldr	r1, [pc, #40]	; (8000f6c <Screen_ReadBusy_HIGH+0x38>)
 8000f42:	2008      	movs	r0, #8
 8000f44:	f000 fbe2 	bl	800170c <Screen_Digital_Read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
    } while(busy);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f6      	bne.n	8000f40 <Screen_ReadBusy_HIGH+0xc>
    Screen_Delay_ms(200);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f000 ff26 	bl	8001da4 <HAL_Delay>
    Debug("e-Paper busy release\r\n");
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <Screen_ReadBusy_HIGH+0x3c>)
 8000f5a:	f002 fa09 	bl	8003370 <puts>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	080045b8 	.word	0x080045b8
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	080045d0 	.word	0x080045d0

08000f74 <Screen_Load_LUT>:
/******************************************************************************
function :	set the look-up tables
parameter:
******************************************************************************/
void Screen_Load_LUT(UBYTE lut)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  UWORD i;
  Screen_SendCommand(0x32);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f7ff ff9c 	bl	8000ebc <Screen_SendCommand>
  for (i = 0; i < 105; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	81fb      	strh	r3, [r7, #14]
 8000f88:	e02d      	b.n	8000fe6 <Screen_Load_LUT+0x72>
  {
    if(lut == 0)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d106      	bne.n	8000f9e <Screen_Load_LUT+0x2a>
        Screen_SendData(lut_4Gray_GC[i]);
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <Screen_Load_LUT+0x84>)
 8000f94:	5cd3      	ldrb	r3, [r2, r3]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffae 	bl	8000ef8 <Screen_SendData>
 8000f9c:	e020      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else if(lut == 1)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d106      	bne.n	8000fb2 <Screen_Load_LUT+0x3e>
        Screen_SendData(lut_1Gray_GC[i]);
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <Screen_Load_LUT+0x88>)
 8000fa8:	5cd3      	ldrb	r3, [r2, r3]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ffa4 	bl	8000ef8 <Screen_SendData>
 8000fb0:	e016      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else if(lut == 2)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d106      	bne.n	8000fc6 <Screen_Load_LUT+0x52>
        Screen_SendData(lut_1Gray_DU[i]);
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <Screen_Load_LUT+0x8c>)
 8000fbc:	5cd3      	ldrb	r3, [r2, r3]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff9a 	bl	8000ef8 <Screen_SendData>
 8000fc4:	e00c      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else if(lut == 3)
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d106      	bne.n	8000fda <Screen_Load_LUT+0x66>
        Screen_SendData(lut_1Gray_A2[i]);
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <Screen_Load_LUT+0x90>)
 8000fd0:	5cd3      	ldrb	r3, [r2, r3]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff90 	bl	8000ef8 <Screen_SendData>
 8000fd8:	e002      	b.n	8000fe0 <Screen_Load_LUT+0x6c>
    else
        Debug("There is no such lut \r\n");
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <Screen_Load_LUT+0x94>)
 8000fdc:	f002 f9c8 	bl	8003370 <puts>
  for (i = 0; i < 105; i++)
 8000fe0:	89fb      	ldrh	r3, [r7, #14]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	81fb      	strh	r3, [r7, #14]
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	2b68      	cmp	r3, #104	; 0x68
 8000fea:	d9ce      	bls.n	8000f8a <Screen_Load_LUT+0x16>
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	08004618 	.word	0x08004618
 8000ffc:	08004684 	.word	0x08004684
 8001000:	080046f0 	.word	0x080046f0
 8001004:	0800475c 	.word	0x0800475c
 8001008:	080045f0 	.word	0x080045f0

0800100c <Screen_4Gray_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void Screen_4Gray_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    Screen_Reset();
 8001010:	f7ff ff34 	bl	8000e7c <Screen_Reset>

    Screen_SendCommand(0x12);
 8001014:	2012      	movs	r0, #18
 8001016:	f7ff ff51 	bl	8000ebc <Screen_SendCommand>
    Screen_Delay_ms(300);
 800101a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800101e:	f000 fec1 	bl	8001da4 <HAL_Delay>

    Screen_SendCommand(0x46);
 8001022:	2046      	movs	r0, #70	; 0x46
 8001024:	f7ff ff4a 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 8001028:	20f7      	movs	r0, #247	; 0xf7
 800102a:	f7ff ff65 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 800102e:	f7ff ff81 	bl	8000f34 <Screen_ReadBusy_HIGH>
    Screen_SendCommand(0x47);
 8001032:	2047      	movs	r0, #71	; 0x47
 8001034:	f7ff ff42 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 8001038:	20f7      	movs	r0, #247	; 0xf7
 800103a:	f7ff ff5d 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 800103e:	f7ff ff79 	bl	8000f34 <Screen_ReadBusy_HIGH>

    Screen_SendCommand(0x01); // setting gate number
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff ff3a 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xDF);
 8001048:	20df      	movs	r0, #223	; 0xdf
 800104a:	f7ff ff55 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800104e:	2001      	movs	r0, #1
 8001050:	f7ff ff52 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff4f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x03); // set gate voltage
 800105a:	2003      	movs	r0, #3
 800105c:	f7ff ff2e 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff49 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x04); // set source voltage
 8001066:	2004      	movs	r0, #4
 8001068:	f7ff ff28 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x41);
 800106c:	2041      	movs	r0, #65	; 0x41
 800106e:	f7ff ff43 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xA8);
 8001072:	20a8      	movs	r0, #168	; 0xa8
 8001074:	f7ff ff40 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x32);
 8001078:	2032      	movs	r0, #50	; 0x32
 800107a:	f7ff ff3d 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x11); // set data entry sequence
 800107e:	2011      	movs	r0, #17
 8001080:	f7ff ff1c 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x03);
 8001084:	2003      	movs	r0, #3
 8001086:	f7ff ff37 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x3C); // set border
 800108a:	203c      	movs	r0, #60	; 0x3c
 800108c:	f7ff ff16 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff31 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x0C); // set booster strength
 8001096:	200c      	movs	r0, #12
 8001098:	f7ff ff10 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xAE);
 800109c:	20ae      	movs	r0, #174	; 0xae
 800109e:	f7ff ff2b 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC7);
 80010a2:	20c7      	movs	r0, #199	; 0xc7
 80010a4:	f7ff ff28 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC3);
 80010a8:	20c3      	movs	r0, #195	; 0xc3
 80010aa:	f7ff ff25 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 80010ae:	20c0      	movs	r0, #192	; 0xc0
 80010b0:	f7ff ff22 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 80010b4:	20c0      	movs	r0, #192	; 0xc0
 80010b6:	f7ff ff1f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x18); // set internal sensor on
 80010ba:	2018      	movs	r0, #24
 80010bc:	f7ff fefe 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x80);
 80010c0:	2080      	movs	r0, #128	; 0x80
 80010c2:	f7ff ff19 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x2C); // set vcom value
 80010c6:	202c      	movs	r0, #44	; 0x2c
 80010c8:	f7ff fef8 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x44);
 80010cc:	2044      	movs	r0, #68	; 0x44
 80010ce:	f7ff ff13 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x37); // set display option, these setting turn on previous function
 80010d2:	2037      	movs	r0, #55	; 0x37
 80010d4:	f7ff fef2 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff ff0d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ff0a 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff07 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff04 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ff01 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fefe 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff fefb 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fef8 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff fef5 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fef2 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x44); // setting X direction start/end position of RAM
 8001114:	2044      	movs	r0, #68	; 0x44
 8001116:	f7ff fed1 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff feec 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fee9 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x17);
 8001126:	2017      	movs	r0, #23
 8001128:	f7ff fee6 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff fee3 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x45); // setting Y direction start/end position of RAM
 8001132:	2045      	movs	r0, #69	; 0x45
 8001134:	f7ff fec2 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff fedd 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff feda 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xDF);
 8001144:	20df      	movs	r0, #223	; 0xdf
 8001146:	f7ff fed7 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff fed4 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x22); // Display Update Control 2
 8001150:	2022      	movs	r0, #34	; 0x22
 8001152:	f7ff feb3 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xCF);
 8001156:	20cf      	movs	r0, #207	; 0xcf
 8001158:	f7ff fece 	bl	8000ef8 <Screen_SendData>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <Screen_1Gray_Init>:
/******************************************************************************
function :  Initialize the e-Paper register
parameter:
******************************************************************************/
void Screen_1Gray_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    Screen_Reset();
 8001164:	f7ff fe8a 	bl	8000e7c <Screen_Reset>

    Screen_SendCommand(0x12);
 8001168:	2012      	movs	r0, #18
 800116a:	f7ff fea7 	bl	8000ebc <Screen_SendCommand>
    Screen_Delay_ms(300);
 800116e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001172:	f000 fe17 	bl	8001da4 <HAL_Delay>

    Screen_SendCommand(0x46);
 8001176:	2046      	movs	r0, #70	; 0x46
 8001178:	f7ff fea0 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 800117c:	20f7      	movs	r0, #247	; 0xf7
 800117e:	f7ff febb 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 8001182:	f7ff fed7 	bl	8000f34 <Screen_ReadBusy_HIGH>
    Screen_SendCommand(0x47);
 8001186:	2047      	movs	r0, #71	; 0x47
 8001188:	f7ff fe98 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xF7);
 800118c:	20f7      	movs	r0, #247	; 0xf7
 800118e:	f7ff feb3 	bl	8000ef8 <Screen_SendData>
    Screen_ReadBusy_HIGH();
 8001192:	f7ff fecf 	bl	8000f34 <Screen_ReadBusy_HIGH>

    Screen_SendCommand(0x01); // setting gaet number
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff fe90 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xDF);
 800119c:	20df      	movs	r0, #223	; 0xdf
 800119e:	f7ff feab 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fea8 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fea5 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x03); // set gate voltage
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff fe84 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fe9f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x04); // set source voltage
 80011ba:	2004      	movs	r0, #4
 80011bc:	f7ff fe7e 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x41);
 80011c0:	2041      	movs	r0, #65	; 0x41
 80011c2:	f7ff fe99 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xA8);
 80011c6:	20a8      	movs	r0, #168	; 0xa8
 80011c8:	f7ff fe96 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x32);
 80011cc:	2032      	movs	r0, #50	; 0x32
 80011ce:	f7ff fe93 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x11); // set data entry sequence
 80011d2:	2011      	movs	r0, #17
 80011d4:	f7ff fe72 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x03);
 80011d8:	2003      	movs	r0, #3
 80011da:	f7ff fe8d 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x3C); // set border
 80011de:	203c      	movs	r0, #60	; 0x3c
 80011e0:	f7ff fe6c 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe87 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x0C); // set booster strength
 80011ea:	200c      	movs	r0, #12
 80011ec:	f7ff fe66 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xAE);
 80011f0:	20ae      	movs	r0, #174	; 0xae
 80011f2:	f7ff fe81 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC7);
 80011f6:	20c7      	movs	r0, #199	; 0xc7
 80011f8:	f7ff fe7e 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC3);
 80011fc:	20c3      	movs	r0, #195	; 0xc3
 80011fe:	f7ff fe7b 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 8001202:	20c0      	movs	r0, #192	; 0xc0
 8001204:	f7ff fe78 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xC0);
 8001208:	20c0      	movs	r0, #192	; 0xc0
 800120a:	f7ff fe75 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x18); // set internal sensor on
 800120e:	2018      	movs	r0, #24
 8001210:	f7ff fe54 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x80);
 8001214:	2080      	movs	r0, #128	; 0x80
 8001216:	f7ff fe6f 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x2C); // set vcom value
 800121a:	202c      	movs	r0, #44	; 0x2c
 800121c:	f7ff fe4e 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x44);
 8001220:	2044      	movs	r0, #68	; 0x44
 8001222:	f7ff fe69 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x37); // set display option, these setting turn on previous function
 8001226:	2037      	movs	r0, #55	; 0x37
 8001228:	f7ff fe48 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);     //can switch 1 gray or 4 gray
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fe63 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001232:	20ff      	movs	r0, #255	; 0xff
 8001234:	f7ff fe60 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001238:	20ff      	movs	r0, #255	; 0xff
 800123a:	f7ff fe5d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 800123e:	20ff      	movs	r0, #255	; 0xff
 8001240:	f7ff fe5a 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001244:	20ff      	movs	r0, #255	; 0xff
 8001246:	f7ff fe57 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x4F);
 800124a:	204f      	movs	r0, #79	; 0x4f
 800124c:	f7ff fe54 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001250:	20ff      	movs	r0, #255	; 0xff
 8001252:	f7ff fe51 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001256:	20ff      	movs	r0, #255	; 0xff
 8001258:	f7ff fe4e 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 800125c:	20ff      	movs	r0, #255	; 0xff
 800125e:	f7ff fe4b 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xFF);
 8001262:	20ff      	movs	r0, #255	; 0xff
 8001264:	f7ff fe48 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x44); // setting X direction start/end position of RAM
 8001268:	2044      	movs	r0, #68	; 0x44
 800126a:	f7ff fe27 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fe42 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fe3f 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x17);
 800127a:	2017      	movs	r0, #23
 800127c:	f7ff fe3c 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fe39 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x45); // setting Y direction start/end position of RAM
 8001286:	2045      	movs	r0, #69	; 0x45
 8001288:	f7ff fe18 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe33 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fe30 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0xDF);
 8001298:	20df      	movs	r0, #223	; 0xdf
 800129a:	f7ff fe2d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x01);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fe2a 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x22); // Display Update Control 2
 80012a4:	2022      	movs	r0, #34	; 0x22
 80012a6:	f7ff fe09 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xCF);
 80012aa:	20cf      	movs	r0, #207	; 0xcf
 80012ac:	f7ff fe24 	bl	8000ef8 <Screen_SendData>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <Screen_4Gray_Clear>:
    Screen_ReadBusy_HIGH();
}


void Screen_4Gray_Clear(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
    UWORD Width, Height;
    Width = (SCREEN_WIDTH % 8 == 0)? (SCREEN_WIDTH / 8 ): (SCREEN_WIDTH / 8 + 1);
 80012ba:	2323      	movs	r3, #35	; 0x23
 80012bc:	80fb      	strh	r3, [r7, #6]
    Height = SCREEN_HEIGHT;
 80012be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80012c2:	80bb      	strh	r3, [r7, #4]

    Screen_SendCommand(0x49);
 80012c4:	2049      	movs	r0, #73	; 0x49
 80012c6:	f7ff fdf9 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fe14 	bl	8000ef8 <Screen_SendData>
    Screen_SendCommand(0x4E);
 80012d0:	204e      	movs	r0, #78	; 0x4e
 80012d2:	f7ff fdf3 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff fe0e 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fe0b 	bl	8000ef8 <Screen_SendData>
    Screen_SendCommand(0x4F);
 80012e2:	204f      	movs	r0, #79	; 0x4f
 80012e4:	f7ff fdea 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fe05 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fe02 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x24);
 80012f4:	2024      	movs	r0, #36	; 0x24
 80012f6:	f7ff fde1 	bl	8000ebc <Screen_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	81fb      	strh	r3, [r7, #14]
 80012fe:	e00f      	b.n	8001320 <Screen_4Gray_Clear+0x6c>
       for (UWORD i = 0; i < Width; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	81bb      	strh	r3, [r7, #12]
 8001304:	e005      	b.n	8001312 <Screen_4Gray_Clear+0x5e>
           Screen_SendData(0xff);
 8001306:	20ff      	movs	r0, #255	; 0xff
 8001308:	f7ff fdf6 	bl	8000ef8 <Screen_SendData>
       for (UWORD i = 0; i < Width; i++) {
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	81bb      	strh	r3, [r7, #12]
 8001312:	89ba      	ldrh	r2, [r7, #12]
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	429a      	cmp	r2, r3
 8001318:	d3f5      	bcc.n	8001306 <Screen_4Gray_Clear+0x52>
    for (UWORD j = 0; j < Height; j++) {
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	3301      	adds	r3, #1
 800131e:	81fb      	strh	r3, [r7, #14]
 8001320:	89fa      	ldrh	r2, [r7, #14]
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d3eb      	bcc.n	8001300 <Screen_4Gray_Clear+0x4c>
       }
    }

    Screen_SendCommand(0x4E);
 8001328:	204e      	movs	r0, #78	; 0x4e
 800132a:	f7ff fdc7 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fde2 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fddf 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x4F);
 800133a:	204f      	movs	r0, #79	; 0x4f
 800133c:	f7ff fdbe 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fdd9 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff fdd6 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x26);
 800134c:	2026      	movs	r0, #38	; 0x26
 800134e:	f7ff fdb5 	bl	8000ebc <Screen_SendCommand>
    for (UWORD j = 0; j < Height; j++) {
 8001352:	2300      	movs	r3, #0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	e00f      	b.n	8001378 <Screen_4Gray_Clear+0xc4>
       for (UWORD i = 0; i < Width; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	813b      	strh	r3, [r7, #8]
 800135c:	e005      	b.n	800136a <Screen_4Gray_Clear+0xb6>
           Screen_SendData(0xff);
 800135e:	20ff      	movs	r0, #255	; 0xff
 8001360:	f7ff fdca 	bl	8000ef8 <Screen_SendData>
       for (UWORD i = 0; i < Width; i++) {
 8001364:	893b      	ldrh	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	813b      	strh	r3, [r7, #8]
 800136a:	893a      	ldrh	r2, [r7, #8]
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	429a      	cmp	r2, r3
 8001370:	d3f5      	bcc.n	800135e <Screen_4Gray_Clear+0xaa>
    for (UWORD j = 0; j < Height; j++) {
 8001372:	897b      	ldrh	r3, [r7, #10]
 8001374:	3301      	adds	r3, #1
 8001376:	817b      	strh	r3, [r7, #10]
 8001378:	897a      	ldrh	r2, [r7, #10]
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3eb      	bcc.n	8001358 <Screen_4Gray_Clear+0xa4>
       }
    }

    Screen_Load_LUT(0);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fdf7 	bl	8000f74 <Screen_Load_LUT>
    Screen_SendCommand(0x22);
 8001386:	2022      	movs	r0, #34	; 0x22
 8001388:	f7ff fd98 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xC7);
 800138c:	20c7      	movs	r0, #199	; 0xc7
 800138e:	f7ff fdb3 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x20);
 8001392:	2020      	movs	r0, #32
 8001394:	f7ff fd92 	bl	8000ebc <Screen_SendCommand>
    Screen_ReadBusy_HIGH();
 8001398:	f7ff fdcc 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <Screen_1Gray_Clear>:
/******************************************************************************
function :  Clear screen
parameter:
******************************************************************************/
void Screen_1Gray_Clear(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  UWORD i;
  UWORD IMAGE_COUNTER = SCREEN_WIDTH * SCREEN_HEIGHT / 8;
 80013aa:	f244 13a0 	movw	r3, #16800	; 0x41a0
 80013ae:	80bb      	strh	r3, [r7, #4]

  Screen_SendCommand(0x4E);
 80013b0:	204e      	movs	r0, #78	; 0x4e
 80013b2:	f7ff fd83 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff fd9e 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fd9b 	bl	8000ef8 <Screen_SendData>
  Screen_SendCommand(0x4F);
 80013c2:	204f      	movs	r0, #79	; 0x4f
 80013c4:	f7ff fd7a 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fd95 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fd92 	bl	8000ef8 <Screen_SendData>

  Screen_SendCommand(0x24);
 80013d4:	2024      	movs	r0, #36	; 0x24
 80013d6:	f7ff fd71 	bl	8000ebc <Screen_SendCommand>
  for (i = 0; i < IMAGE_COUNTER; i++)
 80013da:	2300      	movs	r3, #0
 80013dc:	80fb      	strh	r3, [r7, #6]
 80013de:	e005      	b.n	80013ec <Screen_1Gray_Clear+0x48>
  {
    Screen_SendData(0xff);
 80013e0:	20ff      	movs	r0, #255	; 0xff
 80013e2:	f7ff fd89 	bl	8000ef8 <Screen_SendData>
  for (i = 0; i < IMAGE_COUNTER; i++)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	3301      	adds	r3, #1
 80013ea:	80fb      	strh	r3, [r7, #6]
 80013ec:	88fa      	ldrh	r2, [r7, #6]
 80013ee:	88bb      	ldrh	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3f5      	bcc.n	80013e0 <Screen_1Gray_Clear+0x3c>
  }

  Screen_Load_LUT(2);
 80013f4:	2002      	movs	r0, #2
 80013f6:	f7ff fdbd 	bl	8000f74 <Screen_Load_LUT>

  Screen_SendCommand(0x20);
 80013fa:	2020      	movs	r0, #32
 80013fc:	f7ff fd5e 	bl	8000ebc <Screen_SendCommand>
  Screen_ReadBusy_HIGH();
 8001400:	f7ff fd98 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <Screen_4Gray_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void Screen_4Gray_Display(const UBYTE *Image)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
    UDOUBLE i,j,k;
    UBYTE temp1,temp2,temp3;

    Screen_SendCommand(0x49);
 8001414:	2049      	movs	r0, #73	; 0x49
 8001416:	f7ff fd51 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fd6c 	bl	8000ef8 <Screen_SendData>


    Screen_SendCommand(0x4E);
 8001420:	204e      	movs	r0, #78	; 0x4e
 8001422:	f7ff fd4b 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fd66 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fd63 	bl	8000ef8 <Screen_SendData>


    Screen_SendCommand(0x4F);
 8001432:	204f      	movs	r0, #79	; 0x4f
 8001434:	f7ff fd42 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fd5d 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff fd5a 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x24);
 8001444:	2024      	movs	r0, #36	; 0x24
 8001446:	f7ff fd39 	bl	8000ebc <Screen_SendCommand>
    for(i=0;i<16800;i++){
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e060      	b.n	8001512 <Screen_4Gray_Display+0x106>
        temp3=0;
 8001450:	2300      	movs	r3, #0
 8001452:	72bb      	strb	r3, [r7, #10]
        for(j=0; j<2; j++) {
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e051      	b.n	80014fe <Screen_4Gray_Display+0xf2>
            temp1 = Image[i*2+j];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005a      	lsls	r2, r3, #1
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e040      	b.n	80014f2 <Screen_4Gray_Display+0xe6>
                temp2 = temp1&0xC0;
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001476:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)
 8001478:	7a7b      	ldrb	r3, [r7, #9]
 800147a:	2bc0      	cmp	r3, #192	; 0xc0
 800147c:	d104      	bne.n	8001488 <Screen_4Gray_Display+0x7c>
                    temp3 |= 0x01;//white
 800147e:	7abb      	ldrb	r3, [r7, #10]
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	72bb      	strb	r3, [r7, #10]
 8001486:	e009      	b.n	800149c <Screen_4Gray_Display+0x90>
                else if(temp2 == 0x00)
 8001488:	7a7b      	ldrb	r3, [r7, #9]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <Screen_4Gray_Display+0x90>
                    temp3 |= 0x00;  //black
                else if(temp2 == 0x80)
 800148e:	7a7b      	ldrb	r3, [r7, #9]
 8001490:	2b80      	cmp	r3, #128	; 0x80
 8001492:	d003      	beq.n	800149c <Screen_4Gray_Display+0x90>
                    temp3 |= 0x00;  //gray1
                else //0x40
                    temp3 |= 0x01; //gray2
 8001494:	7abb      	ldrb	r3, [r7, #10]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	72bb      	strb	r3, [r7, #10]
                temp3 <<= 1;
 800149c:	7abb      	ldrb	r3, [r7, #10]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 80014a2:	7afb      	ldrb	r3, [r7, #11]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	72fb      	strb	r3, [r7, #11]
                temp2 = temp1&0xC0 ;
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014ae:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)  //white
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	2bc0      	cmp	r3, #192	; 0xc0
 80014b4:	d104      	bne.n	80014c0 <Screen_4Gray_Display+0xb4>
                    temp3 |= 0x01;
 80014b6:	7abb      	ldrb	r3, [r7, #10]
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	72bb      	strb	r3, [r7, #10]
 80014be:	e009      	b.n	80014d4 <Screen_4Gray_Display+0xc8>
                else if(temp2 == 0x00) //black
 80014c0:	7a7b      	ldrb	r3, [r7, #9]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <Screen_4Gray_Display+0xc8>
                    temp3 |= 0x00;
                else if(temp2 == 0x80)
 80014c6:	7a7b      	ldrb	r3, [r7, #9]
 80014c8:	2b80      	cmp	r3, #128	; 0x80
 80014ca:	d003      	beq.n	80014d4 <Screen_4Gray_Display+0xc8>
                    temp3 |= 0x00; //gray1
                else    //0x40
                    temp3 |= 0x01;	//gray2
 80014cc:	7abb      	ldrb	r3, [r7, #10]
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	72bb      	strb	r3, [r7, #10]
                if(j!=1 || k!=1)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <Screen_4Gray_Display+0xd4>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d002      	beq.n	80014e6 <Screen_4Gray_Display+0xda>
                    temp3 <<= 1;
 80014e0:	7abb      	ldrb	r3, [r7, #10]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 80014e6:	7afb      	ldrb	r3, [r7, #11]
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d9bb      	bls.n	8001470 <Screen_4Gray_Display+0x64>
        for(j=0; j<2; j++) {
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	3301      	adds	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d9aa      	bls.n	800145a <Screen_4Gray_Display+0x4e>
            }

        }
        Screen_SendData(temp3);
 8001504:	7abb      	ldrb	r3, [r7, #10]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fcf6 	bl	8000ef8 <Screen_SendData>
    for(i=0;i<16800;i++){
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f244 129f 	movw	r2, #16799	; 0x419f
 8001518:	4293      	cmp	r3, r2
 800151a:	d999      	bls.n	8001450 <Screen_4Gray_Display+0x44>
    }
    // new  data
    Screen_SendCommand(0x4E);
 800151c:	204e      	movs	r0, #78	; 0x4e
 800151e:	f7ff fccd 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fce8 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fce5 	bl	8000ef8 <Screen_SendData>


    Screen_SendCommand(0x4F);
 800152e:	204f      	movs	r0, #79	; 0x4f
 8001530:	f7ff fcc4 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0x00);
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fcdf 	bl	8000ef8 <Screen_SendData>
    Screen_SendData(0x00);
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fcdc 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x26);
 8001540:	2026      	movs	r0, #38	; 0x26
 8001542:	f7ff fcbb 	bl	8000ebc <Screen_SendCommand>
    for(i=0; i<16800; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e060      	b.n	800160e <Screen_4Gray_Display+0x202>
        temp3=0;
 800154c:	2300      	movs	r3, #0
 800154e:	72bb      	strb	r3, [r7, #10]
        for(j=0; j<2; j++) {
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	e051      	b.n	80015fa <Screen_4Gray_Display+0x1ee>
            temp1 = Image[i*2+j];
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4413      	add	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e040      	b.n	80015ee <Screen_4Gray_Display+0x1e2>
                temp2 = temp1&0xC0 ;
 800156c:	7afb      	ldrb	r3, [r7, #11]
 800156e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001572:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	2bc0      	cmp	r3, #192	; 0xc0
 8001578:	d104      	bne.n	8001584 <Screen_4Gray_Display+0x178>
                    temp3 |= 0x01;//white
 800157a:	7abb      	ldrb	r3, [r7, #10]
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	72bb      	strb	r3, [r7, #10]
 8001582:	e009      	b.n	8001598 <Screen_4Gray_Display+0x18c>
                else if(temp2 == 0x00)
 8001584:	7a7b      	ldrb	r3, [r7, #9]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <Screen_4Gray_Display+0x18c>
                    temp3 |= 0x00;  //black
                else if(temp2 == 0x80)
 800158a:	7a7b      	ldrb	r3, [r7, #9]
 800158c:	2b80      	cmp	r3, #128	; 0x80
 800158e:	d103      	bne.n	8001598 <Screen_4Gray_Display+0x18c>
                    temp3 |= 0x01;  //gray1
 8001590:	7abb      	ldrb	r3, [r7, #10]
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	72bb      	strb	r3, [r7, #10]
                else //0x40
                    temp3 |= 0x00; //gray2
                temp3 <<= 1;
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	72fb      	strb	r3, [r7, #11]
                temp2 = temp1&0xC0 ;
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015aa:	727b      	strb	r3, [r7, #9]
                if(temp2 == 0xC0)  //white
 80015ac:	7a7b      	ldrb	r3, [r7, #9]
 80015ae:	2bc0      	cmp	r3, #192	; 0xc0
 80015b0:	d104      	bne.n	80015bc <Screen_4Gray_Display+0x1b0>
                    temp3 |= 0x01;
 80015b2:	7abb      	ldrb	r3, [r7, #10]
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	72bb      	strb	r3, [r7, #10]
 80015ba:	e009      	b.n	80015d0 <Screen_4Gray_Display+0x1c4>
                else if(temp2 == 0x00) //black
 80015bc:	7a7b      	ldrb	r3, [r7, #9]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <Screen_4Gray_Display+0x1c4>
                    temp3 |= 0x00;
                else if(temp2 == 0x80)
 80015c2:	7a7b      	ldrb	r3, [r7, #9]
 80015c4:	2b80      	cmp	r3, #128	; 0x80
 80015c6:	d103      	bne.n	80015d0 <Screen_4Gray_Display+0x1c4>
                    temp3 |= 0x01; //gray1
 80015c8:	7abb      	ldrb	r3, [r7, #10]
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	72bb      	strb	r3, [r7, #10]
                else    //0x40
                    temp3 |= 0x00;	//gray2
                if(j!=1 || k!=1)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <Screen_4Gray_Display+0x1d0>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d002      	beq.n	80015e2 <Screen_4Gray_Display+0x1d6>
                    temp3 <<= 1;
 80015dc:	7abb      	ldrb	r3, [r7, #10]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	72bb      	strb	r3, [r7, #10]

                temp1 <<= 2;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	72fb      	strb	r3, [r7, #11]
            for(k=0; k<2; k++) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d9bb      	bls.n	800156c <Screen_4Gray_Display+0x160>
        for(j=0; j<2; j++) {
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	3301      	adds	r3, #1
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d9aa      	bls.n	8001556 <Screen_4Gray_Display+0x14a>
            }
        }
        Screen_SendData(temp3);
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc78 	bl	8000ef8 <Screen_SendData>
    for(i=0; i<16800; i++) {
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f244 129f 	movw	r2, #16799	; 0x419f
 8001614:	4293      	cmp	r3, r2
 8001616:	d999      	bls.n	800154c <Screen_4Gray_Display+0x140>
    }

    Screen_Load_LUT(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fcab 	bl	8000f74 <Screen_Load_LUT>

    Screen_SendCommand(0x22);
 800161e:	2022      	movs	r0, #34	; 0x22
 8001620:	f7ff fc4c 	bl	8000ebc <Screen_SendCommand>
    Screen_SendData(0xC7);
 8001624:	20c7      	movs	r0, #199	; 0xc7
 8001626:	f7ff fc67 	bl	8000ef8 <Screen_SendData>

    Screen_SendCommand(0x20);
 800162a:	2020      	movs	r0, #32
 800162c:	f7ff fc46 	bl	8000ebc <Screen_SendCommand>

    Screen_ReadBusy_HIGH();
 8001630:	f7ff fc80 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <Screen_1Gray_Display>:
/******************************************************************************
function :  Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void Screen_1Gray_Display(const UBYTE *Image)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  UWORD i;
  UWORD IMAGE_COUNTER = SCREEN_WIDTH * SCREEN_HEIGHT / 8;
 8001644:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8001648:	81bb      	strh	r3, [r7, #12]

  Screen_SendCommand(0x4E);
 800164a:	204e      	movs	r0, #78	; 0x4e
 800164c:	f7ff fc36 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fc51 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fc4e 	bl	8000ef8 <Screen_SendData>
  Screen_SendCommand(0x4F);
 800165c:	204f      	movs	r0, #79	; 0x4f
 800165e:	f7ff fc2d 	bl	8000ebc <Screen_SendCommand>
  Screen_SendData(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fc48 	bl	8000ef8 <Screen_SendData>
  Screen_SendData(0x00);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fc45 	bl	8000ef8 <Screen_SendData>

  Screen_SendCommand(0x24);
 800166e:	2024      	movs	r0, #36	; 0x24
 8001670:	f7ff fc24 	bl	8000ebc <Screen_SendCommand>
  for (i = 0; i < IMAGE_COUNTER; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	81fb      	strh	r3, [r7, #14]
 8001678:	e009      	b.n	800168e <Screen_1Gray_Display+0x52>
  {
    Screen_SendData(Image[i]);
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fc38 	bl	8000ef8 <Screen_SendData>
  for (i = 0; i < IMAGE_COUNTER; i++)
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	3301      	adds	r3, #1
 800168c:	81fb      	strh	r3, [r7, #14]
 800168e:	89fa      	ldrh	r2, [r7, #14]
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3f1      	bcc.n	800167a <Screen_1Gray_Display+0x3e>
  }

  Screen_Load_LUT(2);
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fc6c 	bl	8000f74 <Screen_Load_LUT>
  Screen_SendCommand(0x20);
 800169c:	2020      	movs	r0, #32
 800169e:	f7ff fc0d 	bl	8000ebc <Screen_SendCommand>
  Screen_ReadBusy_HIGH();
 80016a2:	f7ff fc47 	bl	8000f34 <Screen_ReadBusy_HIGH>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <Screen_WriteByte>:
#include "stm32f2xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;

void Screen_WriteByte(UBYTE value)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = value;
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80016be:	f107 010f 	add.w	r1, r7, #15
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	2201      	movs	r2, #1
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <Screen_WriteByte+0x28>)
 80016ca:	f001 fae2 	bl	8002c92 <HAL_SPI_Transmit>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000b4 	.word	0x200000b4

080016dc <Screen_Digital_Write>:

void Screen_Digital_Write(uint16_t pin, GPIO_TypeDef* port, uint8_t value) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	80fb      	strh	r3, [r7, #6]
 80016e8:	4613      	mov	r3, r2
 80016ea:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(port, pin, value == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4619      	mov	r1, r3
 80016fe:	6838      	ldr	r0, [r7, #0]
 8001700:	f000 fe0d 	bl	800231e <HAL_GPIO_WritePin>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <Screen_Digital_Read>:

uint8_t Screen_Digital_Read(uint16_t pin, GPIO_TypeDef* port) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	80fb      	strh	r3, [r7, #6]
	return HAL_GPIO_ReadPin(port, pin);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4619      	mov	r1, r3
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f000 fde7 	bl	80022f0 <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <Screen_Init>:

int Screen_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    Screen_Digital_Write(SDC_Pin, SDC_GPIO_Port, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <Screen_Init+0x28>)
 8001734:	2040      	movs	r0, #64	; 0x40
 8001736:	f7ff ffd1 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SCS_Pin, SCS_GPIO_Port, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	4905      	ldr	r1, [pc, #20]	; (8001754 <Screen_Init+0x28>)
 800173e:	2010      	movs	r0, #16
 8001740:	f7ff ffcc 	bl	80016dc <Screen_Digital_Write>
    Screen_Digital_Write(SRST_Pin, SRST_GPIO_Port, 1);
 8001744:	2201      	movs	r2, #1
 8001746:	4904      	ldr	r1, [pc, #16]	; (8001758 <Screen_Init+0x2c>)
 8001748:	2010      	movs	r0, #16
 800174a:	f7ff ffc7 	bl	80016dc <Screen_Digital_Write>
	return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40020000 	.word	0x40020000
 8001758:	40020800 	.word	0x40020800

0800175c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001762:	f000 fab1 	bl	8001cc8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001766:	f000 f849 	bl	80017fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800176a:	f000 f8b9 	bl	80018e0 <MX_GPIO_Init>
	MX_SPI1_Init();
 800176e:	f000 f881 	bl	8001874 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	// Initialise the screen
	if (Screen_Init() != 0) {
 8001772:	f7ff ffdb 	bl	800172c <Screen_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <main+0x2a>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	481c      	ldr	r0, [pc, #112]	; (80017f4 <main+0x98>)
 8001782:	f000 fde4 	bl	800234e <HAL_GPIO_TogglePin>
	}
	/* you have to edit the startup_stm32fxxx.s file and set a big enough heap size */
	UBYTE *Canvas = Canvas_Init();
 8001786:	f7ff fa97 	bl	8000cb8 <Canvas_Init>
 800178a:	60f8      	str	r0, [r7, #12]
	UBYTE *CountScreen = Canvas_Init();
 800178c:	f7ff fa94 	bl	8000cb8 <Canvas_Init>
 8001790:	60b8      	str	r0, [r7, #8]

	Screen_Static_Init(Canvas);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7ff fa46 	bl	8000c24 <Screen_Static_Init>

	Screen_Startup(Canvas);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff faa3 	bl	8000ce4 <Screen_Startup>
	free(Canvas);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f001 fc8c 	bl	80030bc <free>

	HAL_Delay(5000);
 80017a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80017a8:	f000 fafc 	bl	8001da4 <HAL_Delay>
	Screen_Dynamic_Init(CountScreen);
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f7ff fa5e 	bl	8000c6e <Screen_Dynamic_Init>
	int8_t VCU_STATES[5] = { 0, 2, 3, 4, 5 };
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <main+0x9c>)
 80017b4:	463b      	mov	r3, r7
 80017b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ba:	6018      	str	r0, [r3, #0]
 80017bc:	3304      	adds	r3, #4
 80017be:	7019      	strb	r1, [r3, #0]
		 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		 HAL_Delay(1000);
		 Screen_1Gray_Clear();
		 HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		 */
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80017c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <main+0x98>)
 80017c6:	f000 fdc2 	bl	800234e <HAL_GPIO_TogglePin>
		Dynamic_Counter(CountScreen, VCU_STATES);
 80017ca:	463b      	mov	r3, r7
 80017cc:	4619      	mov	r1, r3
 80017ce:	68b8      	ldr	r0, [r7, #8]
 80017d0:	f7ff fade 	bl	8000d90 <Dynamic_Counter>
		if (VCU_STATES[0] < 15) {
 80017d4:	f997 3000 	ldrsb.w	r3, [r7]
 80017d8:	2b0e      	cmp	r3, #14
 80017da:	dc07      	bgt.n	80017ec <main+0x90>
			VCU_STATES[0]++;
 80017dc:	f997 3000 	ldrsb.w	r3, [r7]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	703b      	strb	r3, [r7, #0]
 80017ea:	e7e9      	b.n	80017c0 <main+0x64>
		} else {
			VCU_STATES[0] = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	703b      	strb	r3, [r7, #0]
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80017f0:	e7e6      	b.n	80017c0 <main+0x64>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08004610 	.word	0x08004610

080017fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b092      	sub	sp, #72	; 0x48
 8001800:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	2230      	movs	r2, #48	; 0x30
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fc5e 	bl	80030cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800181e:	2302      	movs	r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001822:	2301      	movs	r3, #1
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001826:	2310      	movs	r3, #16
 8001828:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800182e:	f107 0318 	add.w	r3, r7, #24
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fda4 	bl	8002380 <HAL_RCC_OscConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x46>
		Error_Handler();
 800183e:	f000 f8d9 	bl	80019f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001842:	230f      	movs	r3, #15
 8001844:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f000 ffde 	bl	800281c <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x6e>
		Error_Handler();
 8001866:	f000 f8c5 	bl	80019f4 <Error_Handler>
	}
}
 800186a:	bf00      	nop
 800186c:	3748      	adds	r7, #72	; 0x48
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_SPI1_Init+0x64>)
 800187a:	4a18      	ldr	r2, [pc, #96]	; (80018dc <MX_SPI1_Init+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001884:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_SPI1_Init+0x64>)
 8001894:	2202      	movs	r2, #2
 8001896:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_SPI1_Init+0x64>)
 800189a:	2201      	movs	r2, #1
 800189c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018a8:	2210      	movs	r2, #16
 80018aa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018c0:	220a      	movs	r2, #10
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_SPI1_Init+0x64>)
 80018c6:	f001 f95b 	bl	8002b80 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SPI1_Init+0x60>
		Error_Handler();
 80018d0:	f000 f890 	bl	80019f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200000b4 	.word	0x200000b4
 80018dc:	40013000 	.word	0x40013000

080018e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <MX_GPIO_Init+0x104>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a39      	ldr	r2, [pc, #228]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a32      	ldr	r2, [pc, #200]	; (80019e4 <MX_GPIO_Init+0x104>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001938:	f043 0310 	orr.w	r3, r3, #16
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <MX_GPIO_Init+0x104>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_GPIO_Init+0x104>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SBUSY_Pin | SCS_Pin | SDC_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2158      	movs	r1, #88	; 0x58
 800196a:	481f      	ldr	r0, [pc, #124]	; (80019e8 <MX_GPIO_Init+0x108>)
 800196c:	f000 fcd7 	bl	800231e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SRST_GPIO_Port, SRST_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	2110      	movs	r1, #16
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <MX_GPIO_Init+0x10c>)
 8001976:	f000 fcd2 	bl	800231e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LED1_Pin | LED2_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001980:	481b      	ldr	r0, [pc, #108]	; (80019f0 <MX_GPIO_Init+0x110>)
 8001982:	f000 fccc 	bl	800231e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : SBUSY_Pin SCS_Pin SDC_Pin */
	GPIO_InitStruct.Pin = SBUSY_Pin | SCS_Pin | SDC_Pin;
 8001986:	2358      	movs	r3, #88	; 0x58
 8001988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <MX_GPIO_Init+0x108>)
 800199e:	f000 fb09 	bl	8001fb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SRST_Pin */
	GPIO_InitStruct.Pin = SRST_Pin;
 80019a2:	2310      	movs	r3, #16
 80019a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SRST_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <MX_GPIO_Init+0x10c>)
 80019ba:	f000 fafb 	bl	8001fb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin;
 80019be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <MX_GPIO_Init+0x110>)
 80019d8:	f000 faec 	bl	8001fb4 <HAL_GPIO_Init>

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40021000 	.word	0x40021000

080019f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x48>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_MspInit+0x48>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_MspInit+0x48>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_MspInit+0x48>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_MspInit+0x48>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_MspInit+0x48>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	40023800 	.word	0x40023800

08001a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_SPI_MspInit+0x84>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d12b      	bne.n	8001ac6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_SPI_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001aa6:	23a0      	movs	r3, #160	; 0xa0
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_SPI_MspInit+0x8c>)
 8001ac2:	f000 fa77 	bl	8001fb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40013000 	.word	0x40013000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <MemManage_Handler+0x4>

08001aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <BusFault_Handler+0x4>

08001af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <UsageFault_Handler+0x4>

08001afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b22:	f000 f923 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e00a      	b.n	8001b52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b3c:	f3af 8000 	nop.w
 8001b40:	4601      	mov	r1, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf0      	blt.n	8001b3c <_read+0x12>
	}

return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e009      	b.n	8001b8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbf1      	blt.n	8001b76 <_write+0x12>
	}
	return len;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_close>:

int _close(int file)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <_isatty>:

int _isatty(int file)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f001 fa14 	bl	8003058 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20020000 	.word	0x20020000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	2000010c 	.word	0x2000010c
 8001c64:	20000128 	.word	0x20000128

08001c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c7a:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	; (8001cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c90:	4c0b      	ldr	r4, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c9e:	f7ff ffe3 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f001 f9df 	bl	8003064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fd59 	bl	800175c <main>
  bx  lr
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001cb8:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 8001cbc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001cc0:	20000124 	.word	0x20000124

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <HAL_Init+0x40>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_Init+0x40>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_Init+0x40>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 f92b 	bl	8001f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fe80 	bl	8001a00 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f935 	bl	8001f9a <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 f90b 	bl	8001f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000018 	.word	0x20000018
 8001d68:	20000014 	.word	0x20000014

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_IncTick+0x1c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_IncTick+0x20>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a03      	ldr	r2, [pc, #12]	; (8001d8c <HAL_IncTick+0x20>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000018 	.word	0x20000018
 8001d8c:	20000110 	.word	0x20000110

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <HAL_GetTick+0x10>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000110 	.word	0x20000110

08001da4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d005      	beq.n	8001dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_Delay+0x44>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffe0 	bl	8001d90 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <HAL_Delay+0x28>
  {
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000018 	.word	0x20000018

08001dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	db0a      	blt.n	8001e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <__NVIC_SetPriority+0x4c>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	440b      	add	r3, r1
 8001e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e78:	e00a      	b.n	8001e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4908      	ldr	r1, [pc, #32]	; (8001ea0 <__NVIC_SetPriority+0x50>)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	3b04      	subs	r3, #4
 8001e88:	0112      	lsls	r2, r2, #4
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	761a      	strb	r2, [r3, #24]
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f1c3 0307 	rsb	r3, r3, #7
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf28      	it	cs
 8001ec2:	2304      	movcs	r3, #4
 8001ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2b06      	cmp	r3, #6
 8001ecc:	d902      	bls.n	8001ed4 <NVIC_EncodePriority+0x30>
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3b03      	subs	r3, #3
 8001ed2:	e000      	b.n	8001ed6 <NVIC_EncodePriority+0x32>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef6:	43d9      	mvns	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	4313      	orrs	r3, r2
         );
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3724      	adds	r7, #36	; 0x24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f18:	d301      	bcc.n	8001f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e00f      	b.n	8001f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <SysTick_Config+0x40>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f26:	210f      	movs	r1, #15
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f7ff ff90 	bl	8001e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <SysTick_Config+0x40>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SysTick_Config+0x40>)
 8001f38:	2207      	movs	r2, #7
 8001f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010

08001f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff49 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f74:	f7ff ff5e 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f7ff ff90 	bl	8001ea4 <NVIC_EncodePriority>
 8001f84:	4602      	mov	r2, r0
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff5f 	bl	8001e50 <__NVIC_SetPriority>
}
 8001f92:	bf00      	nop
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffb0 	bl	8001f08 <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	e16f      	b.n	80022a4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8161 	beq.w	800229e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d005      	beq.n	8001ff4 <HAL_GPIO_Init+0x40>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d130      	bne.n	8002056 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202a:	2201      	movs	r2, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 0201 	and.w	r2, r3, #1
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b03      	cmp	r3, #3
 8002060:	d017      	beq.n	8002092 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d123      	bne.n	80020e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80bb 	beq.w	800229e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_GPIO_Init+0x30c>)
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_GPIO_Init+0x30c>)
 8002132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002136:	6453      	str	r3, [r2, #68]	; 0x44
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <HAL_GPIO_Init+0x30c>)
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002144:	4a5f      	ldr	r2, [pc, #380]	; (80022c4 <HAL_GPIO_Init+0x310>)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a57      	ldr	r2, [pc, #348]	; (80022c8 <HAL_GPIO_Init+0x314>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <HAL_GPIO_Init+0x220>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a56      	ldr	r2, [pc, #344]	; (80022cc <HAL_GPIO_Init+0x318>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d02b      	beq.n	80021d0 <HAL_GPIO_Init+0x21c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a55      	ldr	r2, [pc, #340]	; (80022d0 <HAL_GPIO_Init+0x31c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d025      	beq.n	80021cc <HAL_GPIO_Init+0x218>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a54      	ldr	r2, [pc, #336]	; (80022d4 <HAL_GPIO_Init+0x320>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d01f      	beq.n	80021c8 <HAL_GPIO_Init+0x214>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a53      	ldr	r2, [pc, #332]	; (80022d8 <HAL_GPIO_Init+0x324>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d019      	beq.n	80021c4 <HAL_GPIO_Init+0x210>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a52      	ldr	r2, [pc, #328]	; (80022dc <HAL_GPIO_Init+0x328>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d013      	beq.n	80021c0 <HAL_GPIO_Init+0x20c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a51      	ldr	r2, [pc, #324]	; (80022e0 <HAL_GPIO_Init+0x32c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00d      	beq.n	80021bc <HAL_GPIO_Init+0x208>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <HAL_GPIO_Init+0x330>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_Init+0x204>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a4f      	ldr	r2, [pc, #316]	; (80022e8 <HAL_GPIO_Init+0x334>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_GPIO_Init+0x200>
 80021b0:	2308      	movs	r3, #8
 80021b2:	e010      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021b4:	2309      	movs	r3, #9
 80021b6:	e00e      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021b8:	2307      	movs	r3, #7
 80021ba:	e00c      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021bc:	2306      	movs	r3, #6
 80021be:	e00a      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021c0:	2305      	movs	r3, #5
 80021c2:	e008      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e006      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e004      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e002      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_GPIO_Init+0x222>
 80021d4:	2300      	movs	r3, #0
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	f002 0203 	and.w	r2, r2, #3
 80021dc:	0092      	lsls	r2, r2, #2
 80021de:	4093      	lsls	r3, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e8:	4936      	ldr	r1, [pc, #216]	; (80022c4 <HAL_GPIO_Init+0x310>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f6:	4b3d      	ldr	r3, [pc, #244]	; (80022ec <HAL_GPIO_Init+0x338>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800221a:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_GPIO_Init+0x338>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_GPIO_Init+0x338>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43db      	mvns	r3, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002244:	4a29      	ldr	r2, [pc, #164]	; (80022ec <HAL_GPIO_Init+0x338>)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <HAL_GPIO_Init+0x338>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800226e:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <HAL_GPIO_Init+0x338>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_GPIO_Init+0x338>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_GPIO_Init+0x338>)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f ae88 	bne.w	8001fc4 <HAL_GPIO_Init+0x10>
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40021400 	.word	0x40021400
 80022e0:	40021800 	.word	0x40021800
 80022e4:	40021c00 	.word	0x40021c00
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e001      	b.n	8002312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]
 800232a:	4613      	mov	r3, r2
 800232c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232e:	787b      	ldrb	r3, [r7, #1]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002334:	887a      	ldrh	r2, [r7, #2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800233a:	e003      	b.n	8002344 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	041a      	lsls	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234e:	b480      	push	{r7}
 8002350:	b085      	sub	sp, #20
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	041a      	lsls	r2, r3, #16
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	43d9      	mvns	r1, r3
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	400b      	ands	r3, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	619a      	str	r2, [r3, #24]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e236      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d050      	beq.n	8002440 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239e:	4b9e      	ldr	r3, [pc, #632]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d00c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b9b      	ldr	r3, [pc, #620]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b98      	ldr	r3, [pc, #608]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023c2:	d10b      	bne.n	80023dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	4b94      	ldr	r3, [pc, #592]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d036      	beq.n	800243e <HAL_RCC_OscConfig+0xbe>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d132      	bne.n	800243e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e211      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4b8e      	ldr	r3, [pc, #568]	; (800261c <HAL_RCC_OscConfig+0x29c>)
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7ff fccf 	bl	8001d90 <HAL_GetTick>
 80023f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f6:	f7ff fccb 	bl	8001d90 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1fb      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002408:	4b83      	ldr	r3, [pc, #524]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x76>
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff fcbb 	bl	8001d90 <HAL_GetTick>
 800241a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800241e:	f7ff fcb7 	bl	8001d90 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b64      	cmp	r3, #100	; 0x64
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1e7      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002430:	4b79      	ldr	r3, [pc, #484]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x9e>
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d077      	beq.n	800253c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244c:	4b72      	ldr	r3, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002460:	2b08      	cmp	r3, #8
 8002462:	d126      	bne.n	80024b2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002464:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d120      	bne.n	80024b2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_OscConfig+0x108>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e1bb      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	21f8      	movs	r1, #248	; 0xf8
 8002496:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	69b9      	ldr	r1, [r7, #24]
 800249a:	fa91 f1a1 	rbit	r1, r1
 800249e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	fab1 f181 	clz	r1, r1
 80024a6:	b2c9      	uxtb	r1, r1
 80024a8:	408b      	lsls	r3, r1
 80024aa:	495b      	ldr	r1, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b0:	e044      	b.n	800253c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d02a      	beq.n	8002510 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_OscConfig+0x2a0>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fc66 	bl	8001d90 <HAL_GetTick>
 80024c4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c8:	f7ff fc62 	bl	8001d90 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e192      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	21f8      	movs	r1, #248	; 0xf8
 80024f4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	6939      	ldr	r1, [r7, #16]
 80024f8:	fa91 f1a1 	rbit	r1, r1
 80024fc:	60f9      	str	r1, [r7, #12]
  return result;
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	fab1 f181 	clz	r1, r1
 8002504:	b2c9      	uxtb	r1, r1
 8002506:	408b      	lsls	r3, r1
 8002508:	4943      	ldr	r1, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
 800250e:	e015      	b.n	800253c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCC_OscConfig+0x2a0>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff fc3b 	bl	8001d90 <HAL_GetTick>
 800251a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff fc37 	bl	8001d90 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e167      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f0      	bne.n	800251e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0308 	and.w	r3, r3, #8
 8002544:	2b00      	cmp	r3, #0
 8002546:	d030      	beq.n	80025aa <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002550:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCC_OscConfig+0x2a4>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff fc1b 	bl	8001d90 <HAL_GetTick>
 800255a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255e:	f7ff fc17 	bl	8001d90 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e147      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 8002572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x1de>
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	4b29      	ldr	r3, [pc, #164]	; (8002624 <HAL_RCC_OscConfig+0x2a4>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002584:	f7ff fc04 	bl	8001d90 <HAL_GetTick>
 8002588:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff fc00 	bl	8001d90 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e130      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8087 	beq.w	80026c6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d110      	bne.n	80025ec <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_OscConfig+0x298>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCC_OscConfig+0x2a8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <HAL_RCC_OscConfig+0x2a8>)
 80025f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x2a8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d122      	bne.n	800264a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_RCC_OscConfig+0x2a8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_RCC_OscConfig+0x2a8>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002610:	f7ff fbbe 	bl	8001d90 <HAL_GetTick>
 8002614:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	e012      	b.n	800263e <HAL_RCC_OscConfig+0x2be>
 8002618:	40023800 	.word	0x40023800
 800261c:	40023802 	.word	0x40023802
 8002620:	42470000 	.word	0x42470000
 8002624:	42470e80 	.word	0x42470e80
 8002628:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262c:	f7ff fbb0 	bl	8001d90 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0e0      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x488>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x48c>)
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d015      	beq.n	8002688 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7ff fb98 	bl	8001d90 <HAL_GetTick>
 8002660:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7ff fb94 	bl	8001d90 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e0c2      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	4b65      	ldr	r3, [pc, #404]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ee      	beq.n	8002664 <HAL_RCC_OscConfig+0x2e4>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002688:	f7ff fb82 	bl	8001d90 <HAL_GetTick>
 800268c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7ff fb7e 	bl	8001d90 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0ac      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a6:	4b5a      	ldr	r3, [pc, #360]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1ee      	bne.n	8002690 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	4b55      	ldr	r3, [pc, #340]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a54      	ldr	r2, [pc, #336]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 80026c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8097 	beq.w	80027fe <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d0:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d061      	beq.n	80027a0 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d146      	bne.n	8002772 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCC_OscConfig+0x494>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ea:	f7ff fb51 	bl	8001d90 <HAL_GetTick>
 80026ee:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff fb4d 	bl	8001d90 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e07d      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002704:	4b42      	ldr	r3, [pc, #264]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCC_OscConfig+0x498>)
 8002716:	4013      	ands	r3, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	69d1      	ldr	r1, [r2, #28]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6a12      	ldr	r2, [r2, #32]
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002726:	0192      	lsls	r2, r2, #6
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800272e:	0612      	lsls	r2, r2, #24
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002736:	0852      	lsrs	r2, r2, #1
 8002738:	3a01      	subs	r2, #1
 800273a:	0412      	lsls	r2, r2, #16
 800273c:	430a      	orrs	r2, r1
 800273e:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002744:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_RCC_OscConfig+0x494>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7ff fb21 	bl	8001d90 <HAL_GetTick>
 800274e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f7ff fb1d 	bl	8001d90 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b64      	cmp	r3, #100	; 0x64
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e04d      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x3d2>
 8002770:	e045      	b.n	80027fe <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002772:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_RCC_OscConfig+0x494>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7ff fb0a 	bl	8001d90 <HAL_GetTick>
 800277c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff fb06 	bl	8001d90 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e036      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x400>
 800279e:	e02e      	b.n	80027fe <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e029      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_RCC_OscConfig+0x490>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d11c      	bne.n	80027fa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d115      	bne.n	80027fa <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d10d      	bne.n	80027fa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3728      	adds	r7, #40	; 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40007000 	.word	0x40007000
 800280c:	40023870 	.word	0x40023870
 8002810:	40023800 	.word	0x40023800
 8002814:	42470060 	.word	0x42470060
 8002818:	f0bc8000 	.word	0xf0bc8000

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d2      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b6b      	ldr	r3, [pc, #428]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0be      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b5c      	ldr	r3, [pc, #368]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a5b      	ldr	r2, [pc, #364]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002888:	4b56      	ldr	r3, [pc, #344]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4950      	ldr	r1, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d040      	beq.n	8002934 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b4a      	ldr	r3, [pc, #296]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d115      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e085      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b44      	ldr	r3, [pc, #272]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e079      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e071      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b3c      	ldr	r3, [pc, #240]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4939      	ldr	r1, [pc, #228]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7ff fa44 	bl	8001d90 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7ff fa40 	bl	8001d90 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e059      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b30      	ldr	r3, [pc, #192]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d20c      	bcs.n	800295c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e03c      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	491b      	ldr	r1, [pc, #108]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002986:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4913      	ldr	r1, [pc, #76]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800299a:	f000 f82b 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 800299e:	4601      	mov	r1, r0
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	22f0      	movs	r2, #240	; 0xf0
 80029aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	fa92 f2a2 	rbit	r2, r2
 80029b2:	60fa      	str	r2, [r7, #12]
  return result;
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	40d3      	lsrs	r3, r2
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1cc>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	fa21 f303 	lsr.w	r3, r1, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1d0>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1d4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f99c 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080047c8 	.word	0x080047c8
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000014 	.word	0x20000014

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f8:	b090      	sub	sp, #64	; 0x40
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	2300      	movs	r3, #0
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80a2 	bhi.w	8002b62 <HAL_RCC_GetSysClockFreq+0x16e>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e09c      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a2c:	e09c      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a32:	e099      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b4f      	ldr	r3, [pc, #316]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d027      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	2200      	movs	r2, #0
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	627a      	str	r2, [r7, #36]	; 0x24
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a60:	fb03 f201 	mul.w	r2, r3, r1
 8002a64:	2300      	movs	r3, #0
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a43      	ldr	r2, [pc, #268]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x188>)
 8002a6e:	fba0 2102 	umull	r2, r1, r0, r2
 8002a72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a74:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	4413      	add	r3, r2
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	61fa      	str	r2, [r7, #28]
 8002a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a8c:	f7fd fb9a 	bl	80001c4 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	e055      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	617a      	str	r2, [r7, #20]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aac:	f04f 0b00 	mov.w	fp, #0
 8002ab0:	4652      	mov	r2, sl
 8002ab2:	465b      	mov	r3, fp
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	0159      	lsls	r1, r3, #5
 8002abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac2:	0150      	lsls	r0, r2, #5
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	ebb2 080a 	subs.w	r8, r2, sl
 8002acc:	eb63 090b 	sbc.w	r9, r3, fp
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002adc:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ae0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ae4:	ebb2 0408 	subs.w	r4, r2, r8
 8002ae8:	eb63 0509 	sbc.w	r5, r3, r9
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	00eb      	lsls	r3, r5, #3
 8002af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	eb14 030a 	adds.w	r3, r4, sl
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	eb45 030b 	adc.w	r3, r5, fp
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b18:	4629      	mov	r1, r5
 8002b1a:	028b      	lsls	r3, r1, #10
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4604      	mov	r4, r0
 8002b22:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002b26:	4601      	mov	r1, r0
 8002b28:	028a      	lsls	r2, r1, #10
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	2200      	movs	r2, #0
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	60fa      	str	r2, [r7, #12]
 8002b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b3a:	f7fd fb43 	bl	80001c4 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4613      	mov	r3, r2
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0c1b      	lsrs	r3, r3, #16
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	3301      	adds	r3, #1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b60:	e002      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3740      	adds	r7, #64	; 0x40
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	017d7840 	.word	0x017d7840

08002b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e07b      	b.n	8002c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d009      	beq.n	8002bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe ff3a 	bl	8001a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	ea42 0103 	orr.w	r1, r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0104 	and.w	r1, r3, #4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0210 	and.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b088      	sub	sp, #32
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_SPI_Transmit+0x22>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e126      	b.n	8002f02 <HAL_SPI_Transmit+0x270>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cbc:	f7ff f868 	bl	8001d90 <HAL_GetTick>
 8002cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d002      	beq.n	8002cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cd6:	e10b      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Transmit+0x52>
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce8:	e102      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d30:	d10f      	bne.n	8002d52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d007      	beq.n	8002d70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d78:	d14b      	bne.n	8002e12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_Transmit+0xf6>
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d13e      	bne.n	8002e06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	1c9a      	adds	r2, r3, #2
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dac:	e02b      	b.n	8002e06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d112      	bne.n	8002de2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de0:	e011      	b.n	8002e06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de2:	f7fe ffd5 	bl	8001d90 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d803      	bhi.n	8002dfa <HAL_SPI_Transmit+0x168>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_Transmit+0x16e>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e04:	e074      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ce      	bne.n	8002dae <HAL_SPI_Transmit+0x11c>
 8002e10:	e04c      	b.n	8002eac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x18e>
 8002e1a:	8afb      	ldrh	r3, [r7, #22]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d140      	bne.n	8002ea2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e46:	e02c      	b.n	8002ea2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d113      	bne.n	8002e7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e7c:	e011      	b.n	8002ea2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e7e:	f7fe ff87 	bl	8001d90 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d803      	bhi.n	8002e96 <HAL_SPI_Transmit+0x204>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d102      	bne.n	8002e9c <HAL_SPI_Transmit+0x20a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea0:	e026      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1cd      	bne.n	8002e48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f8b3 	bl	800301c <SPI_EndRxTxTransaction>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e000      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f1c:	f7fe ff38 	bl	8001d90 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f2c:	f7fe ff30 	bl	8001d90 <HAL_GetTick>
 8002f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	0d1b      	lsrs	r3, r3, #20
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f42:	e054      	b.n	8002fee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d050      	beq.n	8002fee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f4c:	f7fe ff20 	bl	8001d90 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d902      	bls.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13d      	bne.n	8002fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d111      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f84:	d004      	beq.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d107      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d10f      	bne.n	8002fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e017      	b.n	800300e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	429a      	cmp	r2, r3
 800300a:	d19b      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000000 	.word	0x20000000

0800301c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff ff6a 	bl	8002f0c <SPI_WaitFlagStateUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e000      	b.n	8003050 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <__errno>:
 8003058:	4b01      	ldr	r3, [pc, #4]	; (8003060 <__errno+0x8>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	2000001c 	.word	0x2000001c

08003064 <__libc_init_array>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	2600      	movs	r6, #0
 8003068:	4d0c      	ldr	r5, [pc, #48]	; (800309c <__libc_init_array+0x38>)
 800306a:	4c0d      	ldr	r4, [pc, #52]	; (80030a0 <__libc_init_array+0x3c>)
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	42a6      	cmp	r6, r4
 8003072:	d109      	bne.n	8003088 <__libc_init_array+0x24>
 8003074:	f001 f8a8 	bl	80041c8 <_init>
 8003078:	2600      	movs	r6, #0
 800307a:	4d0a      	ldr	r5, [pc, #40]	; (80030a4 <__libc_init_array+0x40>)
 800307c:	4c0a      	ldr	r4, [pc, #40]	; (80030a8 <__libc_init_array+0x44>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	42a6      	cmp	r6, r4
 8003084:	d105      	bne.n	8003092 <__libc_init_array+0x2e>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	f855 3b04 	ldr.w	r3, [r5], #4
 800308c:	4798      	blx	r3
 800308e:	3601      	adds	r6, #1
 8003090:	e7ee      	b.n	8003070 <__libc_init_array+0xc>
 8003092:	f855 3b04 	ldr.w	r3, [r5], #4
 8003096:	4798      	blx	r3
 8003098:	3601      	adds	r6, #1
 800309a:	e7f2      	b.n	8003082 <__libc_init_array+0x1e>
 800309c:	08007208 	.word	0x08007208
 80030a0:	08007208 	.word	0x08007208
 80030a4:	08007208 	.word	0x08007208
 80030a8:	0800720c 	.word	0x0800720c

080030ac <malloc>:
 80030ac:	4b02      	ldr	r3, [pc, #8]	; (80030b8 <malloc+0xc>)
 80030ae:	4601      	mov	r1, r0
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	f000 b87b 	b.w	80031ac <_malloc_r>
 80030b6:	bf00      	nop
 80030b8:	2000001c 	.word	0x2000001c

080030bc <free>:
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <free+0xc>)
 80030be:	4601      	mov	r1, r0
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f000 b80b 	b.w	80030dc <_free_r>
 80030c6:	bf00      	nop
 80030c8:	2000001c 	.word	0x2000001c

080030cc <memset>:
 80030cc:	4603      	mov	r3, r0
 80030ce:	4402      	add	r2, r0
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d100      	bne.n	80030d6 <memset+0xa>
 80030d4:	4770      	bx	lr
 80030d6:	f803 1b01 	strb.w	r1, [r3], #1
 80030da:	e7f9      	b.n	80030d0 <memset+0x4>

080030dc <_free_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	4605      	mov	r5, r0
 80030e0:	2900      	cmp	r1, #0
 80030e2:	d040      	beq.n	8003166 <_free_r+0x8a>
 80030e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e8:	1f0c      	subs	r4, r1, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bfb8      	it	lt
 80030ee:	18e4      	addlt	r4, r4, r3
 80030f0:	f000 fc52 	bl	8003998 <__malloc_lock>
 80030f4:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <_free_r+0x8c>)
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	b933      	cbnz	r3, 8003108 <_free_r+0x2c>
 80030fa:	6063      	str	r3, [r4, #4]
 80030fc:	6014      	str	r4, [r2, #0]
 80030fe:	4628      	mov	r0, r5
 8003100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003104:	f000 bc4e 	b.w	80039a4 <__malloc_unlock>
 8003108:	42a3      	cmp	r3, r4
 800310a:	d908      	bls.n	800311e <_free_r+0x42>
 800310c:	6820      	ldr	r0, [r4, #0]
 800310e:	1821      	adds	r1, r4, r0
 8003110:	428b      	cmp	r3, r1
 8003112:	bf01      	itttt	eq
 8003114:	6819      	ldreq	r1, [r3, #0]
 8003116:	685b      	ldreq	r3, [r3, #4]
 8003118:	1809      	addeq	r1, r1, r0
 800311a:	6021      	streq	r1, [r4, #0]
 800311c:	e7ed      	b.n	80030fa <_free_r+0x1e>
 800311e:	461a      	mov	r2, r3
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b10b      	cbz	r3, 8003128 <_free_r+0x4c>
 8003124:	42a3      	cmp	r3, r4
 8003126:	d9fa      	bls.n	800311e <_free_r+0x42>
 8003128:	6811      	ldr	r1, [r2, #0]
 800312a:	1850      	adds	r0, r2, r1
 800312c:	42a0      	cmp	r0, r4
 800312e:	d10b      	bne.n	8003148 <_free_r+0x6c>
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	4401      	add	r1, r0
 8003134:	1850      	adds	r0, r2, r1
 8003136:	4283      	cmp	r3, r0
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	d1e0      	bne.n	80030fe <_free_r+0x22>
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4401      	add	r1, r0
 8003142:	6011      	str	r1, [r2, #0]
 8003144:	6053      	str	r3, [r2, #4]
 8003146:	e7da      	b.n	80030fe <_free_r+0x22>
 8003148:	d902      	bls.n	8003150 <_free_r+0x74>
 800314a:	230c      	movs	r3, #12
 800314c:	602b      	str	r3, [r5, #0]
 800314e:	e7d6      	b.n	80030fe <_free_r+0x22>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	1821      	adds	r1, r4, r0
 8003154:	428b      	cmp	r3, r1
 8003156:	bf01      	itttt	eq
 8003158:	6819      	ldreq	r1, [r3, #0]
 800315a:	685b      	ldreq	r3, [r3, #4]
 800315c:	1809      	addeq	r1, r1, r0
 800315e:	6021      	streq	r1, [r4, #0]
 8003160:	6063      	str	r3, [r4, #4]
 8003162:	6054      	str	r4, [r2, #4]
 8003164:	e7cb      	b.n	80030fe <_free_r+0x22>
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	20000114 	.word	0x20000114

0800316c <sbrk_aligned>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4e0e      	ldr	r6, [pc, #56]	; (80031a8 <sbrk_aligned+0x3c>)
 8003170:	460c      	mov	r4, r1
 8003172:	6831      	ldr	r1, [r6, #0]
 8003174:	4605      	mov	r5, r0
 8003176:	b911      	cbnz	r1, 800317e <sbrk_aligned+0x12>
 8003178:	f000 f902 	bl	8003380 <_sbrk_r>
 800317c:	6030      	str	r0, [r6, #0]
 800317e:	4621      	mov	r1, r4
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f8fd 	bl	8003380 <_sbrk_r>
 8003186:	1c43      	adds	r3, r0, #1
 8003188:	d00a      	beq.n	80031a0 <sbrk_aligned+0x34>
 800318a:	1cc4      	adds	r4, r0, #3
 800318c:	f024 0403 	bic.w	r4, r4, #3
 8003190:	42a0      	cmp	r0, r4
 8003192:	d007      	beq.n	80031a4 <sbrk_aligned+0x38>
 8003194:	1a21      	subs	r1, r4, r0
 8003196:	4628      	mov	r0, r5
 8003198:	f000 f8f2 	bl	8003380 <_sbrk_r>
 800319c:	3001      	adds	r0, #1
 800319e:	d101      	bne.n	80031a4 <sbrk_aligned+0x38>
 80031a0:	f04f 34ff 	mov.w	r4, #4294967295
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	20000118 	.word	0x20000118

080031ac <_malloc_r>:
 80031ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b0:	1ccd      	adds	r5, r1, #3
 80031b2:	f025 0503 	bic.w	r5, r5, #3
 80031b6:	3508      	adds	r5, #8
 80031b8:	2d0c      	cmp	r5, #12
 80031ba:	bf38      	it	cc
 80031bc:	250c      	movcc	r5, #12
 80031be:	2d00      	cmp	r5, #0
 80031c0:	4607      	mov	r7, r0
 80031c2:	db01      	blt.n	80031c8 <_malloc_r+0x1c>
 80031c4:	42a9      	cmp	r1, r5
 80031c6:	d905      	bls.n	80031d4 <_malloc_r+0x28>
 80031c8:	230c      	movs	r3, #12
 80031ca:	2600      	movs	r6, #0
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4630      	mov	r0, r6
 80031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d4:	4e2e      	ldr	r6, [pc, #184]	; (8003290 <_malloc_r+0xe4>)
 80031d6:	f000 fbdf 	bl	8003998 <__malloc_lock>
 80031da:	6833      	ldr	r3, [r6, #0]
 80031dc:	461c      	mov	r4, r3
 80031de:	bb34      	cbnz	r4, 800322e <_malloc_r+0x82>
 80031e0:	4629      	mov	r1, r5
 80031e2:	4638      	mov	r0, r7
 80031e4:	f7ff ffc2 	bl	800316c <sbrk_aligned>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	4604      	mov	r4, r0
 80031ec:	d14d      	bne.n	800328a <_malloc_r+0xde>
 80031ee:	6834      	ldr	r4, [r6, #0]
 80031f0:	4626      	mov	r6, r4
 80031f2:	2e00      	cmp	r6, #0
 80031f4:	d140      	bne.n	8003278 <_malloc_r+0xcc>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	4631      	mov	r1, r6
 80031fa:	4638      	mov	r0, r7
 80031fc:	eb04 0803 	add.w	r8, r4, r3
 8003200:	f000 f8be 	bl	8003380 <_sbrk_r>
 8003204:	4580      	cmp	r8, r0
 8003206:	d13a      	bne.n	800327e <_malloc_r+0xd2>
 8003208:	6821      	ldr	r1, [r4, #0]
 800320a:	3503      	adds	r5, #3
 800320c:	1a6d      	subs	r5, r5, r1
 800320e:	f025 0503 	bic.w	r5, r5, #3
 8003212:	3508      	adds	r5, #8
 8003214:	2d0c      	cmp	r5, #12
 8003216:	bf38      	it	cc
 8003218:	250c      	movcc	r5, #12
 800321a:	4638      	mov	r0, r7
 800321c:	4629      	mov	r1, r5
 800321e:	f7ff ffa5 	bl	800316c <sbrk_aligned>
 8003222:	3001      	adds	r0, #1
 8003224:	d02b      	beq.n	800327e <_malloc_r+0xd2>
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	442b      	add	r3, r5
 800322a:	6023      	str	r3, [r4, #0]
 800322c:	e00e      	b.n	800324c <_malloc_r+0xa0>
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	1b52      	subs	r2, r2, r5
 8003232:	d41e      	bmi.n	8003272 <_malloc_r+0xc6>
 8003234:	2a0b      	cmp	r2, #11
 8003236:	d916      	bls.n	8003266 <_malloc_r+0xba>
 8003238:	1961      	adds	r1, r4, r5
 800323a:	42a3      	cmp	r3, r4
 800323c:	6025      	str	r5, [r4, #0]
 800323e:	bf18      	it	ne
 8003240:	6059      	strne	r1, [r3, #4]
 8003242:	6863      	ldr	r3, [r4, #4]
 8003244:	bf08      	it	eq
 8003246:	6031      	streq	r1, [r6, #0]
 8003248:	5162      	str	r2, [r4, r5]
 800324a:	604b      	str	r3, [r1, #4]
 800324c:	4638      	mov	r0, r7
 800324e:	f104 060b 	add.w	r6, r4, #11
 8003252:	f000 fba7 	bl	80039a4 <__malloc_unlock>
 8003256:	f026 0607 	bic.w	r6, r6, #7
 800325a:	1d23      	adds	r3, r4, #4
 800325c:	1af2      	subs	r2, r6, r3
 800325e:	d0b6      	beq.n	80031ce <_malloc_r+0x22>
 8003260:	1b9b      	subs	r3, r3, r6
 8003262:	50a3      	str	r3, [r4, r2]
 8003264:	e7b3      	b.n	80031ce <_malloc_r+0x22>
 8003266:	6862      	ldr	r2, [r4, #4]
 8003268:	42a3      	cmp	r3, r4
 800326a:	bf0c      	ite	eq
 800326c:	6032      	streq	r2, [r6, #0]
 800326e:	605a      	strne	r2, [r3, #4]
 8003270:	e7ec      	b.n	800324c <_malloc_r+0xa0>
 8003272:	4623      	mov	r3, r4
 8003274:	6864      	ldr	r4, [r4, #4]
 8003276:	e7b2      	b.n	80031de <_malloc_r+0x32>
 8003278:	4634      	mov	r4, r6
 800327a:	6876      	ldr	r6, [r6, #4]
 800327c:	e7b9      	b.n	80031f2 <_malloc_r+0x46>
 800327e:	230c      	movs	r3, #12
 8003280:	4638      	mov	r0, r7
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	f000 fb8e 	bl	80039a4 <__malloc_unlock>
 8003288:	e7a1      	b.n	80031ce <_malloc_r+0x22>
 800328a:	6025      	str	r5, [r4, #0]
 800328c:	e7de      	b.n	800324c <_malloc_r+0xa0>
 800328e:	bf00      	nop
 8003290:	20000114 	.word	0x20000114

08003294 <_puts_r>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	460e      	mov	r6, r1
 8003298:	4605      	mov	r5, r0
 800329a:	b118      	cbz	r0, 80032a4 <_puts_r+0x10>
 800329c:	6983      	ldr	r3, [r0, #24]
 800329e:	b90b      	cbnz	r3, 80032a4 <_puts_r+0x10>
 80032a0:	f000 fa74 	bl	800378c <__sinit>
 80032a4:	69ab      	ldr	r3, [r5, #24]
 80032a6:	68ac      	ldr	r4, [r5, #8]
 80032a8:	b913      	cbnz	r3, 80032b0 <_puts_r+0x1c>
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 fa6e 	bl	800378c <__sinit>
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <_puts_r+0xd0>)
 80032b2:	429c      	cmp	r4, r3
 80032b4:	d120      	bne.n	80032f8 <_puts_r+0x64>
 80032b6:	686c      	ldr	r4, [r5, #4]
 80032b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032ba:	07db      	lsls	r3, r3, #31
 80032bc:	d405      	bmi.n	80032ca <_puts_r+0x36>
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	0598      	lsls	r0, r3, #22
 80032c2:	d402      	bmi.n	80032ca <_puts_r+0x36>
 80032c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032c6:	f000 faff 	bl	80038c8 <__retarget_lock_acquire_recursive>
 80032ca:	89a3      	ldrh	r3, [r4, #12]
 80032cc:	0719      	lsls	r1, r3, #28
 80032ce:	d51d      	bpl.n	800330c <_puts_r+0x78>
 80032d0:	6923      	ldr	r3, [r4, #16]
 80032d2:	b1db      	cbz	r3, 800330c <_puts_r+0x78>
 80032d4:	3e01      	subs	r6, #1
 80032d6:	68a3      	ldr	r3, [r4, #8]
 80032d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80032dc:	3b01      	subs	r3, #1
 80032de:	60a3      	str	r3, [r4, #8]
 80032e0:	bb39      	cbnz	r1, 8003332 <_puts_r+0x9e>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da38      	bge.n	8003358 <_puts_r+0xc4>
 80032e6:	4622      	mov	r2, r4
 80032e8:	210a      	movs	r1, #10
 80032ea:	4628      	mov	r0, r5
 80032ec:	f000 f878 	bl	80033e0 <__swbuf_r>
 80032f0:	3001      	adds	r0, #1
 80032f2:	d011      	beq.n	8003318 <_puts_r+0x84>
 80032f4:	250a      	movs	r5, #10
 80032f6:	e011      	b.n	800331c <_puts_r+0x88>
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <_puts_r+0xd4>)
 80032fa:	429c      	cmp	r4, r3
 80032fc:	d101      	bne.n	8003302 <_puts_r+0x6e>
 80032fe:	68ac      	ldr	r4, [r5, #8]
 8003300:	e7da      	b.n	80032b8 <_puts_r+0x24>
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <_puts_r+0xd8>)
 8003304:	429c      	cmp	r4, r3
 8003306:	bf08      	it	eq
 8003308:	68ec      	ldreq	r4, [r5, #12]
 800330a:	e7d5      	b.n	80032b8 <_puts_r+0x24>
 800330c:	4621      	mov	r1, r4
 800330e:	4628      	mov	r0, r5
 8003310:	f000 f8b8 	bl	8003484 <__swsetup_r>
 8003314:	2800      	cmp	r0, #0
 8003316:	d0dd      	beq.n	80032d4 <_puts_r+0x40>
 8003318:	f04f 35ff 	mov.w	r5, #4294967295
 800331c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800331e:	07da      	lsls	r2, r3, #31
 8003320:	d405      	bmi.n	800332e <_puts_r+0x9a>
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	059b      	lsls	r3, r3, #22
 8003326:	d402      	bmi.n	800332e <_puts_r+0x9a>
 8003328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332a:	f000 face 	bl	80038ca <__retarget_lock_release_recursive>
 800332e:	4628      	mov	r0, r5
 8003330:	bd70      	pop	{r4, r5, r6, pc}
 8003332:	2b00      	cmp	r3, #0
 8003334:	da04      	bge.n	8003340 <_puts_r+0xac>
 8003336:	69a2      	ldr	r2, [r4, #24]
 8003338:	429a      	cmp	r2, r3
 800333a:	dc06      	bgt.n	800334a <_puts_r+0xb6>
 800333c:	290a      	cmp	r1, #10
 800333e:	d004      	beq.n	800334a <_puts_r+0xb6>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	6022      	str	r2, [r4, #0]
 8003346:	7019      	strb	r1, [r3, #0]
 8003348:	e7c5      	b.n	80032d6 <_puts_r+0x42>
 800334a:	4622      	mov	r2, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f847 	bl	80033e0 <__swbuf_r>
 8003352:	3001      	adds	r0, #1
 8003354:	d1bf      	bne.n	80032d6 <_puts_r+0x42>
 8003356:	e7df      	b.n	8003318 <_puts_r+0x84>
 8003358:	250a      	movs	r5, #10
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	6022      	str	r2, [r4, #0]
 8003360:	701d      	strb	r5, [r3, #0]
 8003362:	e7db      	b.n	800331c <_puts_r+0x88>
 8003364:	0800718c 	.word	0x0800718c
 8003368:	080071ac 	.word	0x080071ac
 800336c:	0800716c 	.word	0x0800716c

08003370 <puts>:
 8003370:	4b02      	ldr	r3, [pc, #8]	; (800337c <puts+0xc>)
 8003372:	4601      	mov	r1, r0
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	f7ff bf8d 	b.w	8003294 <_puts_r>
 800337a:	bf00      	nop
 800337c:	2000001c 	.word	0x2000001c

08003380 <_sbrk_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	2300      	movs	r3, #0
 8003384:	4d05      	ldr	r5, [pc, #20]	; (800339c <_sbrk_r+0x1c>)
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fe fc36 	bl	8001bfc <_sbrk>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_sbrk_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_sbrk_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000120 	.word	0x20000120

080033a0 <siprintf>:
 80033a0:	b40e      	push	{r1, r2, r3}
 80033a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033a6:	b500      	push	{lr}
 80033a8:	b09c      	sub	sp, #112	; 0x70
 80033aa:	ab1d      	add	r3, sp, #116	; 0x74
 80033ac:	9002      	str	r0, [sp, #8]
 80033ae:	9006      	str	r0, [sp, #24]
 80033b0:	9107      	str	r1, [sp, #28]
 80033b2:	9104      	str	r1, [sp, #16]
 80033b4:	4808      	ldr	r0, [pc, #32]	; (80033d8 <siprintf+0x38>)
 80033b6:	4909      	ldr	r1, [pc, #36]	; (80033dc <siprintf+0x3c>)
 80033b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80033bc:	9105      	str	r1, [sp, #20]
 80033be:	6800      	ldr	r0, [r0, #0]
 80033c0:	a902      	add	r1, sp, #8
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	f000 fb50 	bl	8003a68 <_svfiprintf_r>
 80033c8:	2200      	movs	r2, #0
 80033ca:	9b02      	ldr	r3, [sp, #8]
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	b01c      	add	sp, #112	; 0x70
 80033d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80033d4:	b003      	add	sp, #12
 80033d6:	4770      	bx	lr
 80033d8:	2000001c 	.word	0x2000001c
 80033dc:	ffff0208 	.word	0xffff0208

080033e0 <__swbuf_r>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	460e      	mov	r6, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	4605      	mov	r5, r0
 80033e8:	b118      	cbz	r0, 80033f2 <__swbuf_r+0x12>
 80033ea:	6983      	ldr	r3, [r0, #24]
 80033ec:	b90b      	cbnz	r3, 80033f2 <__swbuf_r+0x12>
 80033ee:	f000 f9cd 	bl	800378c <__sinit>
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <__swbuf_r+0x98>)
 80033f4:	429c      	cmp	r4, r3
 80033f6:	d12b      	bne.n	8003450 <__swbuf_r+0x70>
 80033f8:	686c      	ldr	r4, [r5, #4]
 80033fa:	69a3      	ldr	r3, [r4, #24]
 80033fc:	60a3      	str	r3, [r4, #8]
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	071a      	lsls	r2, r3, #28
 8003402:	d52f      	bpl.n	8003464 <__swbuf_r+0x84>
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	b36b      	cbz	r3, 8003464 <__swbuf_r+0x84>
 8003408:	6923      	ldr	r3, [r4, #16]
 800340a:	6820      	ldr	r0, [r4, #0]
 800340c:	b2f6      	uxtb	r6, r6
 800340e:	1ac0      	subs	r0, r0, r3
 8003410:	6963      	ldr	r3, [r4, #20]
 8003412:	4637      	mov	r7, r6
 8003414:	4283      	cmp	r3, r0
 8003416:	dc04      	bgt.n	8003422 <__swbuf_r+0x42>
 8003418:	4621      	mov	r1, r4
 800341a:	4628      	mov	r0, r5
 800341c:	f000 f922 	bl	8003664 <_fflush_r>
 8003420:	bb30      	cbnz	r0, 8003470 <__swbuf_r+0x90>
 8003422:	68a3      	ldr	r3, [r4, #8]
 8003424:	3001      	adds	r0, #1
 8003426:	3b01      	subs	r3, #1
 8003428:	60a3      	str	r3, [r4, #8]
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	6022      	str	r2, [r4, #0]
 8003430:	701e      	strb	r6, [r3, #0]
 8003432:	6963      	ldr	r3, [r4, #20]
 8003434:	4283      	cmp	r3, r0
 8003436:	d004      	beq.n	8003442 <__swbuf_r+0x62>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	07db      	lsls	r3, r3, #31
 800343c:	d506      	bpl.n	800344c <__swbuf_r+0x6c>
 800343e:	2e0a      	cmp	r6, #10
 8003440:	d104      	bne.n	800344c <__swbuf_r+0x6c>
 8003442:	4621      	mov	r1, r4
 8003444:	4628      	mov	r0, r5
 8003446:	f000 f90d 	bl	8003664 <_fflush_r>
 800344a:	b988      	cbnz	r0, 8003470 <__swbuf_r+0x90>
 800344c:	4638      	mov	r0, r7
 800344e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <__swbuf_r+0x9c>)
 8003452:	429c      	cmp	r4, r3
 8003454:	d101      	bne.n	800345a <__swbuf_r+0x7a>
 8003456:	68ac      	ldr	r4, [r5, #8]
 8003458:	e7cf      	b.n	80033fa <__swbuf_r+0x1a>
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <__swbuf_r+0xa0>)
 800345c:	429c      	cmp	r4, r3
 800345e:	bf08      	it	eq
 8003460:	68ec      	ldreq	r4, [r5, #12]
 8003462:	e7ca      	b.n	80033fa <__swbuf_r+0x1a>
 8003464:	4621      	mov	r1, r4
 8003466:	4628      	mov	r0, r5
 8003468:	f000 f80c 	bl	8003484 <__swsetup_r>
 800346c:	2800      	cmp	r0, #0
 800346e:	d0cb      	beq.n	8003408 <__swbuf_r+0x28>
 8003470:	f04f 37ff 	mov.w	r7, #4294967295
 8003474:	e7ea      	b.n	800344c <__swbuf_r+0x6c>
 8003476:	bf00      	nop
 8003478:	0800718c 	.word	0x0800718c
 800347c:	080071ac 	.word	0x080071ac
 8003480:	0800716c 	.word	0x0800716c

08003484 <__swsetup_r>:
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <__swsetup_r+0xcc>)
 8003486:	b570      	push	{r4, r5, r6, lr}
 8003488:	681d      	ldr	r5, [r3, #0]
 800348a:	4606      	mov	r6, r0
 800348c:	460c      	mov	r4, r1
 800348e:	b125      	cbz	r5, 800349a <__swsetup_r+0x16>
 8003490:	69ab      	ldr	r3, [r5, #24]
 8003492:	b913      	cbnz	r3, 800349a <__swsetup_r+0x16>
 8003494:	4628      	mov	r0, r5
 8003496:	f000 f979 	bl	800378c <__sinit>
 800349a:	4b2e      	ldr	r3, [pc, #184]	; (8003554 <__swsetup_r+0xd0>)
 800349c:	429c      	cmp	r4, r3
 800349e:	d10f      	bne.n	80034c0 <__swsetup_r+0x3c>
 80034a0:	686c      	ldr	r4, [r5, #4]
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034a8:	0719      	lsls	r1, r3, #28
 80034aa:	d42c      	bmi.n	8003506 <__swsetup_r+0x82>
 80034ac:	06dd      	lsls	r5, r3, #27
 80034ae:	d411      	bmi.n	80034d4 <__swsetup_r+0x50>
 80034b0:	2309      	movs	r3, #9
 80034b2:	6033      	str	r3, [r6, #0]
 80034b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	81a3      	strh	r3, [r4, #12]
 80034be:	e03e      	b.n	800353e <__swsetup_r+0xba>
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <__swsetup_r+0xd4>)
 80034c2:	429c      	cmp	r4, r3
 80034c4:	d101      	bne.n	80034ca <__swsetup_r+0x46>
 80034c6:	68ac      	ldr	r4, [r5, #8]
 80034c8:	e7eb      	b.n	80034a2 <__swsetup_r+0x1e>
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <__swsetup_r+0xd8>)
 80034cc:	429c      	cmp	r4, r3
 80034ce:	bf08      	it	eq
 80034d0:	68ec      	ldreq	r4, [r5, #12]
 80034d2:	e7e6      	b.n	80034a2 <__swsetup_r+0x1e>
 80034d4:	0758      	lsls	r0, r3, #29
 80034d6:	d512      	bpl.n	80034fe <__swsetup_r+0x7a>
 80034d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034da:	b141      	cbz	r1, 80034ee <__swsetup_r+0x6a>
 80034dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034e0:	4299      	cmp	r1, r3
 80034e2:	d002      	beq.n	80034ea <__swsetup_r+0x66>
 80034e4:	4630      	mov	r0, r6
 80034e6:	f7ff fdf9 	bl	80030dc <_free_r>
 80034ea:	2300      	movs	r3, #0
 80034ec:	6363      	str	r3, [r4, #52]	; 0x34
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	2300      	movs	r3, #0
 80034f8:	6063      	str	r3, [r4, #4]
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	89a3      	ldrh	r3, [r4, #12]
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	6923      	ldr	r3, [r4, #16]
 8003508:	b94b      	cbnz	r3, 800351e <__swsetup_r+0x9a>
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003514:	d003      	beq.n	800351e <__swsetup_r+0x9a>
 8003516:	4621      	mov	r1, r4
 8003518:	4630      	mov	r0, r6
 800351a:	f000 f9fd 	bl	8003918 <__smakebuf_r>
 800351e:	89a0      	ldrh	r0, [r4, #12]
 8003520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003524:	f010 0301 	ands.w	r3, r0, #1
 8003528:	d00a      	beq.n	8003540 <__swsetup_r+0xbc>
 800352a:	2300      	movs	r3, #0
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	6963      	ldr	r3, [r4, #20]
 8003530:	425b      	negs	r3, r3
 8003532:	61a3      	str	r3, [r4, #24]
 8003534:	6923      	ldr	r3, [r4, #16]
 8003536:	b943      	cbnz	r3, 800354a <__swsetup_r+0xc6>
 8003538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800353c:	d1ba      	bne.n	80034b4 <__swsetup_r+0x30>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	0781      	lsls	r1, r0, #30
 8003542:	bf58      	it	pl
 8003544:	6963      	ldrpl	r3, [r4, #20]
 8003546:	60a3      	str	r3, [r4, #8]
 8003548:	e7f4      	b.n	8003534 <__swsetup_r+0xb0>
 800354a:	2000      	movs	r0, #0
 800354c:	e7f7      	b.n	800353e <__swsetup_r+0xba>
 800354e:	bf00      	nop
 8003550:	2000001c 	.word	0x2000001c
 8003554:	0800718c 	.word	0x0800718c
 8003558:	080071ac 	.word	0x080071ac
 800355c:	0800716c 	.word	0x0800716c

08003560 <__sflush_r>:
 8003560:	898a      	ldrh	r2, [r1, #12]
 8003562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003564:	4605      	mov	r5, r0
 8003566:	0710      	lsls	r0, r2, #28
 8003568:	460c      	mov	r4, r1
 800356a:	d457      	bmi.n	800361c <__sflush_r+0xbc>
 800356c:	684b      	ldr	r3, [r1, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	dc04      	bgt.n	800357c <__sflush_r+0x1c>
 8003572:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	dc01      	bgt.n	800357c <__sflush_r+0x1c>
 8003578:	2000      	movs	r0, #0
 800357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800357c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800357e:	2e00      	cmp	r6, #0
 8003580:	d0fa      	beq.n	8003578 <__sflush_r+0x18>
 8003582:	2300      	movs	r3, #0
 8003584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003588:	682f      	ldr	r7, [r5, #0]
 800358a:	602b      	str	r3, [r5, #0]
 800358c:	d032      	beq.n	80035f4 <__sflush_r+0x94>
 800358e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003590:	89a3      	ldrh	r3, [r4, #12]
 8003592:	075a      	lsls	r2, r3, #29
 8003594:	d505      	bpl.n	80035a2 <__sflush_r+0x42>
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	1ac0      	subs	r0, r0, r3
 800359a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800359c:	b10b      	cbz	r3, 80035a2 <__sflush_r+0x42>
 800359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a0:	1ac0      	subs	r0, r0, r3
 80035a2:	2300      	movs	r3, #0
 80035a4:	4602      	mov	r2, r0
 80035a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035a8:	4628      	mov	r0, r5
 80035aa:	6a21      	ldr	r1, [r4, #32]
 80035ac:	47b0      	blx	r6
 80035ae:	1c43      	adds	r3, r0, #1
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	d106      	bne.n	80035c2 <__sflush_r+0x62>
 80035b4:	6829      	ldr	r1, [r5, #0]
 80035b6:	291d      	cmp	r1, #29
 80035b8:	d82c      	bhi.n	8003614 <__sflush_r+0xb4>
 80035ba:	4a29      	ldr	r2, [pc, #164]	; (8003660 <__sflush_r+0x100>)
 80035bc:	40ca      	lsrs	r2, r1
 80035be:	07d6      	lsls	r6, r2, #31
 80035c0:	d528      	bpl.n	8003614 <__sflush_r+0xb4>
 80035c2:	2200      	movs	r2, #0
 80035c4:	6062      	str	r2, [r4, #4]
 80035c6:	6922      	ldr	r2, [r4, #16]
 80035c8:	04d9      	lsls	r1, r3, #19
 80035ca:	6022      	str	r2, [r4, #0]
 80035cc:	d504      	bpl.n	80035d8 <__sflush_r+0x78>
 80035ce:	1c42      	adds	r2, r0, #1
 80035d0:	d101      	bne.n	80035d6 <__sflush_r+0x76>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	b903      	cbnz	r3, 80035d8 <__sflush_r+0x78>
 80035d6:	6560      	str	r0, [r4, #84]	; 0x54
 80035d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035da:	602f      	str	r7, [r5, #0]
 80035dc:	2900      	cmp	r1, #0
 80035de:	d0cb      	beq.n	8003578 <__sflush_r+0x18>
 80035e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035e4:	4299      	cmp	r1, r3
 80035e6:	d002      	beq.n	80035ee <__sflush_r+0x8e>
 80035e8:	4628      	mov	r0, r5
 80035ea:	f7ff fd77 	bl	80030dc <_free_r>
 80035ee:	2000      	movs	r0, #0
 80035f0:	6360      	str	r0, [r4, #52]	; 0x34
 80035f2:	e7c2      	b.n	800357a <__sflush_r+0x1a>
 80035f4:	6a21      	ldr	r1, [r4, #32]
 80035f6:	2301      	movs	r3, #1
 80035f8:	4628      	mov	r0, r5
 80035fa:	47b0      	blx	r6
 80035fc:	1c41      	adds	r1, r0, #1
 80035fe:	d1c7      	bne.n	8003590 <__sflush_r+0x30>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0c4      	beq.n	8003590 <__sflush_r+0x30>
 8003606:	2b1d      	cmp	r3, #29
 8003608:	d001      	beq.n	800360e <__sflush_r+0xae>
 800360a:	2b16      	cmp	r3, #22
 800360c:	d101      	bne.n	8003612 <__sflush_r+0xb2>
 800360e:	602f      	str	r7, [r5, #0]
 8003610:	e7b2      	b.n	8003578 <__sflush_r+0x18>
 8003612:	89a3      	ldrh	r3, [r4, #12]
 8003614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003618:	81a3      	strh	r3, [r4, #12]
 800361a:	e7ae      	b.n	800357a <__sflush_r+0x1a>
 800361c:	690f      	ldr	r7, [r1, #16]
 800361e:	2f00      	cmp	r7, #0
 8003620:	d0aa      	beq.n	8003578 <__sflush_r+0x18>
 8003622:	0793      	lsls	r3, r2, #30
 8003624:	bf18      	it	ne
 8003626:	2300      	movne	r3, #0
 8003628:	680e      	ldr	r6, [r1, #0]
 800362a:	bf08      	it	eq
 800362c:	694b      	ldreq	r3, [r1, #20]
 800362e:	1bf6      	subs	r6, r6, r7
 8003630:	600f      	str	r7, [r1, #0]
 8003632:	608b      	str	r3, [r1, #8]
 8003634:	2e00      	cmp	r6, #0
 8003636:	dd9f      	ble.n	8003578 <__sflush_r+0x18>
 8003638:	4633      	mov	r3, r6
 800363a:	463a      	mov	r2, r7
 800363c:	4628      	mov	r0, r5
 800363e:	6a21      	ldr	r1, [r4, #32]
 8003640:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003644:	47e0      	blx	ip
 8003646:	2800      	cmp	r0, #0
 8003648:	dc06      	bgt.n	8003658 <__sflush_r+0xf8>
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	e790      	b.n	800357a <__sflush_r+0x1a>
 8003658:	4407      	add	r7, r0
 800365a:	1a36      	subs	r6, r6, r0
 800365c:	e7ea      	b.n	8003634 <__sflush_r+0xd4>
 800365e:	bf00      	nop
 8003660:	20400001 	.word	0x20400001

08003664 <_fflush_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	690b      	ldr	r3, [r1, #16]
 8003668:	4605      	mov	r5, r0
 800366a:	460c      	mov	r4, r1
 800366c:	b913      	cbnz	r3, 8003674 <_fflush_r+0x10>
 800366e:	2500      	movs	r5, #0
 8003670:	4628      	mov	r0, r5
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	b118      	cbz	r0, 800367e <_fflush_r+0x1a>
 8003676:	6983      	ldr	r3, [r0, #24]
 8003678:	b90b      	cbnz	r3, 800367e <_fflush_r+0x1a>
 800367a:	f000 f887 	bl	800378c <__sinit>
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <_fflush_r+0x6c>)
 8003680:	429c      	cmp	r4, r3
 8003682:	d11b      	bne.n	80036bc <_fflush_r+0x58>
 8003684:	686c      	ldr	r4, [r5, #4]
 8003686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0ef      	beq.n	800366e <_fflush_r+0xa>
 800368e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003690:	07d0      	lsls	r0, r2, #31
 8003692:	d404      	bmi.n	800369e <_fflush_r+0x3a>
 8003694:	0599      	lsls	r1, r3, #22
 8003696:	d402      	bmi.n	800369e <_fflush_r+0x3a>
 8003698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800369a:	f000 f915 	bl	80038c8 <__retarget_lock_acquire_recursive>
 800369e:	4628      	mov	r0, r5
 80036a0:	4621      	mov	r1, r4
 80036a2:	f7ff ff5d 	bl	8003560 <__sflush_r>
 80036a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a8:	4605      	mov	r5, r0
 80036aa:	07da      	lsls	r2, r3, #31
 80036ac:	d4e0      	bmi.n	8003670 <_fflush_r+0xc>
 80036ae:	89a3      	ldrh	r3, [r4, #12]
 80036b0:	059b      	lsls	r3, r3, #22
 80036b2:	d4dd      	bmi.n	8003670 <_fflush_r+0xc>
 80036b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b6:	f000 f908 	bl	80038ca <__retarget_lock_release_recursive>
 80036ba:	e7d9      	b.n	8003670 <_fflush_r+0xc>
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <_fflush_r+0x70>)
 80036be:	429c      	cmp	r4, r3
 80036c0:	d101      	bne.n	80036c6 <_fflush_r+0x62>
 80036c2:	68ac      	ldr	r4, [r5, #8]
 80036c4:	e7df      	b.n	8003686 <_fflush_r+0x22>
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <_fflush_r+0x74>)
 80036c8:	429c      	cmp	r4, r3
 80036ca:	bf08      	it	eq
 80036cc:	68ec      	ldreq	r4, [r5, #12]
 80036ce:	e7da      	b.n	8003686 <_fflush_r+0x22>
 80036d0:	0800718c 	.word	0x0800718c
 80036d4:	080071ac 	.word	0x080071ac
 80036d8:	0800716c 	.word	0x0800716c

080036dc <std>:
 80036dc:	2300      	movs	r3, #0
 80036de:	b510      	push	{r4, lr}
 80036e0:	4604      	mov	r4, r0
 80036e2:	e9c0 3300 	strd	r3, r3, [r0]
 80036e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036ea:	6083      	str	r3, [r0, #8]
 80036ec:	8181      	strh	r1, [r0, #12]
 80036ee:	6643      	str	r3, [r0, #100]	; 0x64
 80036f0:	81c2      	strh	r2, [r0, #14]
 80036f2:	6183      	str	r3, [r0, #24]
 80036f4:	4619      	mov	r1, r3
 80036f6:	2208      	movs	r2, #8
 80036f8:	305c      	adds	r0, #92	; 0x5c
 80036fa:	f7ff fce7 	bl	80030cc <memset>
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <std+0x38>)
 8003700:	6224      	str	r4, [r4, #32]
 8003702:	6263      	str	r3, [r4, #36]	; 0x24
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <std+0x3c>)
 8003706:	62a3      	str	r3, [r4, #40]	; 0x28
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <std+0x40>)
 800370a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <std+0x44>)
 800370e:	6323      	str	r3, [r4, #48]	; 0x30
 8003710:	bd10      	pop	{r4, pc}
 8003712:	bf00      	nop
 8003714:	08003f95 	.word	0x08003f95
 8003718:	08003fb7 	.word	0x08003fb7
 800371c:	08003fef 	.word	0x08003fef
 8003720:	08004013 	.word	0x08004013

08003724 <_cleanup_r>:
 8003724:	4901      	ldr	r1, [pc, #4]	; (800372c <_cleanup_r+0x8>)
 8003726:	f000 b8af 	b.w	8003888 <_fwalk_reent>
 800372a:	bf00      	nop
 800372c:	08003665 	.word	0x08003665

08003730 <__sfmoreglue>:
 8003730:	2268      	movs	r2, #104	; 0x68
 8003732:	b570      	push	{r4, r5, r6, lr}
 8003734:	1e4d      	subs	r5, r1, #1
 8003736:	4355      	muls	r5, r2
 8003738:	460e      	mov	r6, r1
 800373a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800373e:	f7ff fd35 	bl	80031ac <_malloc_r>
 8003742:	4604      	mov	r4, r0
 8003744:	b140      	cbz	r0, 8003758 <__sfmoreglue+0x28>
 8003746:	2100      	movs	r1, #0
 8003748:	e9c0 1600 	strd	r1, r6, [r0]
 800374c:	300c      	adds	r0, #12
 800374e:	60a0      	str	r0, [r4, #8]
 8003750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003754:	f7ff fcba 	bl	80030cc <memset>
 8003758:	4620      	mov	r0, r4
 800375a:	bd70      	pop	{r4, r5, r6, pc}

0800375c <__sfp_lock_acquire>:
 800375c:	4801      	ldr	r0, [pc, #4]	; (8003764 <__sfp_lock_acquire+0x8>)
 800375e:	f000 b8b3 	b.w	80038c8 <__retarget_lock_acquire_recursive>
 8003762:	bf00      	nop
 8003764:	2000011d 	.word	0x2000011d

08003768 <__sfp_lock_release>:
 8003768:	4801      	ldr	r0, [pc, #4]	; (8003770 <__sfp_lock_release+0x8>)
 800376a:	f000 b8ae 	b.w	80038ca <__retarget_lock_release_recursive>
 800376e:	bf00      	nop
 8003770:	2000011d 	.word	0x2000011d

08003774 <__sinit_lock_acquire>:
 8003774:	4801      	ldr	r0, [pc, #4]	; (800377c <__sinit_lock_acquire+0x8>)
 8003776:	f000 b8a7 	b.w	80038c8 <__retarget_lock_acquire_recursive>
 800377a:	bf00      	nop
 800377c:	2000011e 	.word	0x2000011e

08003780 <__sinit_lock_release>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sinit_lock_release+0x8>)
 8003782:	f000 b8a2 	b.w	80038ca <__retarget_lock_release_recursive>
 8003786:	bf00      	nop
 8003788:	2000011e 	.word	0x2000011e

0800378c <__sinit>:
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	f7ff fff0 	bl	8003774 <__sinit_lock_acquire>
 8003794:	69a3      	ldr	r3, [r4, #24]
 8003796:	b11b      	cbz	r3, 80037a0 <__sinit+0x14>
 8003798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800379c:	f7ff bff0 	b.w	8003780 <__sinit_lock_release>
 80037a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037a4:	6523      	str	r3, [r4, #80]	; 0x50
 80037a6:	4b13      	ldr	r3, [pc, #76]	; (80037f4 <__sinit+0x68>)
 80037a8:	4a13      	ldr	r2, [pc, #76]	; (80037f8 <__sinit+0x6c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80037ae:	42a3      	cmp	r3, r4
 80037b0:	bf08      	it	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	4620      	mov	r0, r4
 80037b6:	bf08      	it	eq
 80037b8:	61a3      	streq	r3, [r4, #24]
 80037ba:	f000 f81f 	bl	80037fc <__sfp>
 80037be:	6060      	str	r0, [r4, #4]
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 f81b 	bl	80037fc <__sfp>
 80037c6:	60a0      	str	r0, [r4, #8]
 80037c8:	4620      	mov	r0, r4
 80037ca:	f000 f817 	bl	80037fc <__sfp>
 80037ce:	2200      	movs	r2, #0
 80037d0:	2104      	movs	r1, #4
 80037d2:	60e0      	str	r0, [r4, #12]
 80037d4:	6860      	ldr	r0, [r4, #4]
 80037d6:	f7ff ff81 	bl	80036dc <std>
 80037da:	2201      	movs	r2, #1
 80037dc:	2109      	movs	r1, #9
 80037de:	68a0      	ldr	r0, [r4, #8]
 80037e0:	f7ff ff7c 	bl	80036dc <std>
 80037e4:	2202      	movs	r2, #2
 80037e6:	2112      	movs	r1, #18
 80037e8:	68e0      	ldr	r0, [r4, #12]
 80037ea:	f7ff ff77 	bl	80036dc <std>
 80037ee:	2301      	movs	r3, #1
 80037f0:	61a3      	str	r3, [r4, #24]
 80037f2:	e7d1      	b.n	8003798 <__sinit+0xc>
 80037f4:	08007168 	.word	0x08007168
 80037f8:	08003725 	.word	0x08003725

080037fc <__sfp>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	4607      	mov	r7, r0
 8003800:	f7ff ffac 	bl	800375c <__sfp_lock_acquire>
 8003804:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <__sfp+0x84>)
 8003806:	681e      	ldr	r6, [r3, #0]
 8003808:	69b3      	ldr	r3, [r6, #24]
 800380a:	b913      	cbnz	r3, 8003812 <__sfp+0x16>
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff ffbd 	bl	800378c <__sinit>
 8003812:	3648      	adds	r6, #72	; 0x48
 8003814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003818:	3b01      	subs	r3, #1
 800381a:	d503      	bpl.n	8003824 <__sfp+0x28>
 800381c:	6833      	ldr	r3, [r6, #0]
 800381e:	b30b      	cbz	r3, 8003864 <__sfp+0x68>
 8003820:	6836      	ldr	r6, [r6, #0]
 8003822:	e7f7      	b.n	8003814 <__sfp+0x18>
 8003824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003828:	b9d5      	cbnz	r5, 8003860 <__sfp+0x64>
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <__sfp+0x88>)
 800382c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003830:	60e3      	str	r3, [r4, #12]
 8003832:	6665      	str	r5, [r4, #100]	; 0x64
 8003834:	f000 f847 	bl	80038c6 <__retarget_lock_init_recursive>
 8003838:	f7ff ff96 	bl	8003768 <__sfp_lock_release>
 800383c:	2208      	movs	r2, #8
 800383e:	4629      	mov	r1, r5
 8003840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003848:	6025      	str	r5, [r4, #0]
 800384a:	61a5      	str	r5, [r4, #24]
 800384c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003850:	f7ff fc3c 	bl	80030cc <memset>
 8003854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800385c:	4620      	mov	r0, r4
 800385e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003860:	3468      	adds	r4, #104	; 0x68
 8003862:	e7d9      	b.n	8003818 <__sfp+0x1c>
 8003864:	2104      	movs	r1, #4
 8003866:	4638      	mov	r0, r7
 8003868:	f7ff ff62 	bl	8003730 <__sfmoreglue>
 800386c:	4604      	mov	r4, r0
 800386e:	6030      	str	r0, [r6, #0]
 8003870:	2800      	cmp	r0, #0
 8003872:	d1d5      	bne.n	8003820 <__sfp+0x24>
 8003874:	f7ff ff78 	bl	8003768 <__sfp_lock_release>
 8003878:	230c      	movs	r3, #12
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	e7ee      	b.n	800385c <__sfp+0x60>
 800387e:	bf00      	nop
 8003880:	08007168 	.word	0x08007168
 8003884:	ffff0001 	.word	0xffff0001

08003888 <_fwalk_reent>:
 8003888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800388c:	4606      	mov	r6, r0
 800388e:	4688      	mov	r8, r1
 8003890:	2700      	movs	r7, #0
 8003892:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389a:	f1b9 0901 	subs.w	r9, r9, #1
 800389e:	d505      	bpl.n	80038ac <_fwalk_reent+0x24>
 80038a0:	6824      	ldr	r4, [r4, #0]
 80038a2:	2c00      	cmp	r4, #0
 80038a4:	d1f7      	bne.n	8003896 <_fwalk_reent+0xe>
 80038a6:	4638      	mov	r0, r7
 80038a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ac:	89ab      	ldrh	r3, [r5, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d907      	bls.n	80038c2 <_fwalk_reent+0x3a>
 80038b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b6:	3301      	adds	r3, #1
 80038b8:	d003      	beq.n	80038c2 <_fwalk_reent+0x3a>
 80038ba:	4629      	mov	r1, r5
 80038bc:	4630      	mov	r0, r6
 80038be:	47c0      	blx	r8
 80038c0:	4307      	orrs	r7, r0
 80038c2:	3568      	adds	r5, #104	; 0x68
 80038c4:	e7e9      	b.n	800389a <_fwalk_reent+0x12>

080038c6 <__retarget_lock_init_recursive>:
 80038c6:	4770      	bx	lr

080038c8 <__retarget_lock_acquire_recursive>:
 80038c8:	4770      	bx	lr

080038ca <__retarget_lock_release_recursive>:
 80038ca:	4770      	bx	lr

080038cc <__swhatbuf_r>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	460e      	mov	r6, r1
 80038d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d4:	4614      	mov	r4, r2
 80038d6:	2900      	cmp	r1, #0
 80038d8:	461d      	mov	r5, r3
 80038da:	b096      	sub	sp, #88	; 0x58
 80038dc:	da08      	bge.n	80038f0 <__swhatbuf_r+0x24>
 80038de:	2200      	movs	r2, #0
 80038e0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80038e4:	602a      	str	r2, [r5, #0]
 80038e6:	061a      	lsls	r2, r3, #24
 80038e8:	d410      	bmi.n	800390c <__swhatbuf_r+0x40>
 80038ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ee:	e00e      	b.n	800390e <__swhatbuf_r+0x42>
 80038f0:	466a      	mov	r2, sp
 80038f2:	f000 fbb5 	bl	8004060 <_fstat_r>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	dbf1      	blt.n	80038de <__swhatbuf_r+0x12>
 80038fa:	9a01      	ldr	r2, [sp, #4]
 80038fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003904:	425a      	negs	r2, r3
 8003906:	415a      	adcs	r2, r3
 8003908:	602a      	str	r2, [r5, #0]
 800390a:	e7ee      	b.n	80038ea <__swhatbuf_r+0x1e>
 800390c:	2340      	movs	r3, #64	; 0x40
 800390e:	2000      	movs	r0, #0
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	b016      	add	sp, #88	; 0x58
 8003914:	bd70      	pop	{r4, r5, r6, pc}
	...

08003918 <__smakebuf_r>:
 8003918:	898b      	ldrh	r3, [r1, #12]
 800391a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800391c:	079d      	lsls	r5, r3, #30
 800391e:	4606      	mov	r6, r0
 8003920:	460c      	mov	r4, r1
 8003922:	d507      	bpl.n	8003934 <__smakebuf_r+0x1c>
 8003924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	6123      	str	r3, [r4, #16]
 800392c:	2301      	movs	r3, #1
 800392e:	6163      	str	r3, [r4, #20]
 8003930:	b002      	add	sp, #8
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	466a      	mov	r2, sp
 8003936:	ab01      	add	r3, sp, #4
 8003938:	f7ff ffc8 	bl	80038cc <__swhatbuf_r>
 800393c:	9900      	ldr	r1, [sp, #0]
 800393e:	4605      	mov	r5, r0
 8003940:	4630      	mov	r0, r6
 8003942:	f7ff fc33 	bl	80031ac <_malloc_r>
 8003946:	b948      	cbnz	r0, 800395c <__smakebuf_r+0x44>
 8003948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800394c:	059a      	lsls	r2, r3, #22
 800394e:	d4ef      	bmi.n	8003930 <__smakebuf_r+0x18>
 8003950:	f023 0303 	bic.w	r3, r3, #3
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	81a3      	strh	r3, [r4, #12]
 800395a:	e7e3      	b.n	8003924 <__smakebuf_r+0xc>
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <__smakebuf_r+0x7c>)
 800395e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003960:	89a3      	ldrh	r3, [r4, #12]
 8003962:	6020      	str	r0, [r4, #0]
 8003964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003968:	81a3      	strh	r3, [r4, #12]
 800396a:	9b00      	ldr	r3, [sp, #0]
 800396c:	6120      	str	r0, [r4, #16]
 800396e:	6163      	str	r3, [r4, #20]
 8003970:	9b01      	ldr	r3, [sp, #4]
 8003972:	b15b      	cbz	r3, 800398c <__smakebuf_r+0x74>
 8003974:	4630      	mov	r0, r6
 8003976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800397a:	f000 fb83 	bl	8004084 <_isatty_r>
 800397e:	b128      	cbz	r0, 800398c <__smakebuf_r+0x74>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	89a0      	ldrh	r0, [r4, #12]
 800398e:	4305      	orrs	r5, r0
 8003990:	81a5      	strh	r5, [r4, #12]
 8003992:	e7cd      	b.n	8003930 <__smakebuf_r+0x18>
 8003994:	08003725 	.word	0x08003725

08003998 <__malloc_lock>:
 8003998:	4801      	ldr	r0, [pc, #4]	; (80039a0 <__malloc_lock+0x8>)
 800399a:	f7ff bf95 	b.w	80038c8 <__retarget_lock_acquire_recursive>
 800399e:	bf00      	nop
 80039a0:	2000011c 	.word	0x2000011c

080039a4 <__malloc_unlock>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__malloc_unlock+0x8>)
 80039a6:	f7ff bf90 	b.w	80038ca <__retarget_lock_release_recursive>
 80039aa:	bf00      	nop
 80039ac:	2000011c 	.word	0x2000011c

080039b0 <__ssputs_r>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	688e      	ldr	r6, [r1, #8]
 80039b6:	4682      	mov	sl, r0
 80039b8:	429e      	cmp	r6, r3
 80039ba:	460c      	mov	r4, r1
 80039bc:	4690      	mov	r8, r2
 80039be:	461f      	mov	r7, r3
 80039c0:	d838      	bhi.n	8003a34 <__ssputs_r+0x84>
 80039c2:	898a      	ldrh	r2, [r1, #12]
 80039c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039c8:	d032      	beq.n	8003a30 <__ssputs_r+0x80>
 80039ca:	6825      	ldr	r5, [r4, #0]
 80039cc:	6909      	ldr	r1, [r1, #16]
 80039ce:	3301      	adds	r3, #1
 80039d0:	eba5 0901 	sub.w	r9, r5, r1
 80039d4:	6965      	ldr	r5, [r4, #20]
 80039d6:	444b      	add	r3, r9
 80039d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039e0:	106d      	asrs	r5, r5, #1
 80039e2:	429d      	cmp	r5, r3
 80039e4:	bf38      	it	cc
 80039e6:	461d      	movcc	r5, r3
 80039e8:	0553      	lsls	r3, r2, #21
 80039ea:	d531      	bpl.n	8003a50 <__ssputs_r+0xa0>
 80039ec:	4629      	mov	r1, r5
 80039ee:	f7ff fbdd 	bl	80031ac <_malloc_r>
 80039f2:	4606      	mov	r6, r0
 80039f4:	b950      	cbnz	r0, 8003a0c <__ssputs_r+0x5c>
 80039f6:	230c      	movs	r3, #12
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	f8ca 3000 	str.w	r3, [sl]
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a0c:	464a      	mov	r2, r9
 8003a0e:	6921      	ldr	r1, [r4, #16]
 8003a10:	f000 fb68 	bl	80040e4 <memcpy>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	6126      	str	r6, [r4, #16]
 8003a22:	444e      	add	r6, r9
 8003a24:	6026      	str	r6, [r4, #0]
 8003a26:	463e      	mov	r6, r7
 8003a28:	6165      	str	r5, [r4, #20]
 8003a2a:	eba5 0509 	sub.w	r5, r5, r9
 8003a2e:	60a5      	str	r5, [r4, #8]
 8003a30:	42be      	cmp	r6, r7
 8003a32:	d900      	bls.n	8003a36 <__ssputs_r+0x86>
 8003a34:	463e      	mov	r6, r7
 8003a36:	4632      	mov	r2, r6
 8003a38:	4641      	mov	r1, r8
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	f000 fb60 	bl	8004100 <memmove>
 8003a40:	68a3      	ldr	r3, [r4, #8]
 8003a42:	2000      	movs	r0, #0
 8003a44:	1b9b      	subs	r3, r3, r6
 8003a46:	60a3      	str	r3, [r4, #8]
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	4433      	add	r3, r6
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	e7db      	b.n	8003a08 <__ssputs_r+0x58>
 8003a50:	462a      	mov	r2, r5
 8003a52:	f000 fb6f 	bl	8004134 <_realloc_r>
 8003a56:	4606      	mov	r6, r0
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d1e1      	bne.n	8003a20 <__ssputs_r+0x70>
 8003a5c:	4650      	mov	r0, sl
 8003a5e:	6921      	ldr	r1, [r4, #16]
 8003a60:	f7ff fb3c 	bl	80030dc <_free_r>
 8003a64:	e7c7      	b.n	80039f6 <__ssputs_r+0x46>
	...

08003a68 <_svfiprintf_r>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	4698      	mov	r8, r3
 8003a6e:	898b      	ldrh	r3, [r1, #12]
 8003a70:	4607      	mov	r7, r0
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	460d      	mov	r5, r1
 8003a76:	4614      	mov	r4, r2
 8003a78:	b09d      	sub	sp, #116	; 0x74
 8003a7a:	d50e      	bpl.n	8003a9a <_svfiprintf_r+0x32>
 8003a7c:	690b      	ldr	r3, [r1, #16]
 8003a7e:	b963      	cbnz	r3, 8003a9a <_svfiprintf_r+0x32>
 8003a80:	2140      	movs	r1, #64	; 0x40
 8003a82:	f7ff fb93 	bl	80031ac <_malloc_r>
 8003a86:	6028      	str	r0, [r5, #0]
 8003a88:	6128      	str	r0, [r5, #16]
 8003a8a:	b920      	cbnz	r0, 8003a96 <_svfiprintf_r+0x2e>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	e0d1      	b.n	8003c3a <_svfiprintf_r+0x1d2>
 8003a96:	2340      	movs	r3, #64	; 0x40
 8003a98:	616b      	str	r3, [r5, #20]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aa4:	2330      	movs	r3, #48	; 0x30
 8003aa6:	f04f 0901 	mov.w	r9, #1
 8003aaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c54 <_svfiprintf_r+0x1ec>
 8003ab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	469a      	mov	sl, r3
 8003aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003abe:	b10a      	cbz	r2, 8003ac4 <_svfiprintf_r+0x5c>
 8003ac0:	2a25      	cmp	r2, #37	; 0x25
 8003ac2:	d1f9      	bne.n	8003ab8 <_svfiprintf_r+0x50>
 8003ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac8:	d00b      	beq.n	8003ae2 <_svfiprintf_r+0x7a>
 8003aca:	465b      	mov	r3, fp
 8003acc:	4622      	mov	r2, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff ff6d 	bl	80039b0 <__ssputs_r>
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	f000 80aa 	beq.w	8003c30 <_svfiprintf_r+0x1c8>
 8003adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ade:	445a      	add	r2, fp
 8003ae0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80a2 	beq.w	8003c30 <_svfiprintf_r+0x1c8>
 8003aec:	2300      	movs	r3, #0
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295
 8003af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003af6:	f10a 0a01 	add.w	sl, sl, #1
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b02:	931a      	str	r3, [sp, #104]	; 0x68
 8003b04:	4654      	mov	r4, sl
 8003b06:	2205      	movs	r2, #5
 8003b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0c:	4851      	ldr	r0, [pc, #324]	; (8003c54 <_svfiprintf_r+0x1ec>)
 8003b0e:	f000 fadb 	bl	80040c8 <memchr>
 8003b12:	9a04      	ldr	r2, [sp, #16]
 8003b14:	b9d8      	cbnz	r0, 8003b4e <_svfiprintf_r+0xe6>
 8003b16:	06d0      	lsls	r0, r2, #27
 8003b18:	bf44      	itt	mi
 8003b1a:	2320      	movmi	r3, #32
 8003b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b20:	0711      	lsls	r1, r2, #28
 8003b22:	bf44      	itt	mi
 8003b24:	232b      	movmi	r3, #43	; 0x2b
 8003b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b30:	d015      	beq.n	8003b5e <_svfiprintf_r+0xf6>
 8003b32:	4654      	mov	r4, sl
 8003b34:	2000      	movs	r0, #0
 8003b36:	f04f 0c0a 	mov.w	ip, #10
 8003b3a:	9a07      	ldr	r2, [sp, #28]
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b42:	3b30      	subs	r3, #48	; 0x30
 8003b44:	2b09      	cmp	r3, #9
 8003b46:	d94e      	bls.n	8003be6 <_svfiprintf_r+0x17e>
 8003b48:	b1b0      	cbz	r0, 8003b78 <_svfiprintf_r+0x110>
 8003b4a:	9207      	str	r2, [sp, #28]
 8003b4c:	e014      	b.n	8003b78 <_svfiprintf_r+0x110>
 8003b4e:	eba0 0308 	sub.w	r3, r0, r8
 8003b52:	fa09 f303 	lsl.w	r3, r9, r3
 8003b56:	4313      	orrs	r3, r2
 8003b58:	46a2      	mov	sl, r4
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	e7d2      	b.n	8003b04 <_svfiprintf_r+0x9c>
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	9103      	str	r1, [sp, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bfbb      	ittet	lt
 8003b6a:	425b      	neglt	r3, r3
 8003b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b70:	9307      	strge	r3, [sp, #28]
 8003b72:	9307      	strlt	r3, [sp, #28]
 8003b74:	bfb8      	it	lt
 8003b76:	9204      	strlt	r2, [sp, #16]
 8003b78:	7823      	ldrb	r3, [r4, #0]
 8003b7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b7c:	d10c      	bne.n	8003b98 <_svfiprintf_r+0x130>
 8003b7e:	7863      	ldrb	r3, [r4, #1]
 8003b80:	2b2a      	cmp	r3, #42	; 0x2a
 8003b82:	d135      	bne.n	8003bf0 <_svfiprintf_r+0x188>
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	3402      	adds	r4, #2
 8003b88:	1d1a      	adds	r2, r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	9203      	str	r2, [sp, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	bfb8      	it	lt
 8003b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c58 <_svfiprintf_r+0x1f0>
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4650      	mov	r0, sl
 8003ba0:	7821      	ldrb	r1, [r4, #0]
 8003ba2:	f000 fa91 	bl	80040c8 <memchr>
 8003ba6:	b140      	cbz	r0, 8003bba <_svfiprintf_r+0x152>
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	eba0 000a 	sub.w	r0, r0, sl
 8003bae:	fa03 f000 	lsl.w	r0, r3, r0
 8003bb2:	9b04      	ldr	r3, [sp, #16]
 8003bb4:	3401      	adds	r4, #1
 8003bb6:	4303      	orrs	r3, r0
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbe:	2206      	movs	r2, #6
 8003bc0:	4826      	ldr	r0, [pc, #152]	; (8003c5c <_svfiprintf_r+0x1f4>)
 8003bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bc6:	f000 fa7f 	bl	80040c8 <memchr>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d038      	beq.n	8003c40 <_svfiprintf_r+0x1d8>
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <_svfiprintf_r+0x1f8>)
 8003bd0:	bb1b      	cbnz	r3, 8003c1a <_svfiprintf_r+0x1b2>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	3308      	adds	r3, #8
 8003bdc:	9303      	str	r3, [sp, #12]
 8003bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be0:	4433      	add	r3, r6
 8003be2:	9309      	str	r3, [sp, #36]	; 0x24
 8003be4:	e767      	b.n	8003ab6 <_svfiprintf_r+0x4e>
 8003be6:	460c      	mov	r4, r1
 8003be8:	2001      	movs	r0, #1
 8003bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bee:	e7a5      	b.n	8003b3c <_svfiprintf_r+0xd4>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f04f 0c0a 	mov.w	ip, #10
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	3401      	adds	r4, #1
 8003bfa:	9305      	str	r3, [sp, #20]
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c02:	3a30      	subs	r2, #48	; 0x30
 8003c04:	2a09      	cmp	r2, #9
 8003c06:	d903      	bls.n	8003c10 <_svfiprintf_r+0x1a8>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0c5      	beq.n	8003b98 <_svfiprintf_r+0x130>
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	e7c3      	b.n	8003b98 <_svfiprintf_r+0x130>
 8003c10:	4604      	mov	r4, r0
 8003c12:	2301      	movs	r3, #1
 8003c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c18:	e7f0      	b.n	8003bfc <_svfiprintf_r+0x194>
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4638      	mov	r0, r7
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_svfiprintf_r+0x1fc>)
 8003c24:	a904      	add	r1, sp, #16
 8003c26:	f3af 8000 	nop.w
 8003c2a:	1c42      	adds	r2, r0, #1
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	d1d6      	bne.n	8003bde <_svfiprintf_r+0x176>
 8003c30:	89ab      	ldrh	r3, [r5, #12]
 8003c32:	065b      	lsls	r3, r3, #25
 8003c34:	f53f af2c 	bmi.w	8003a90 <_svfiprintf_r+0x28>
 8003c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c3a:	b01d      	add	sp, #116	; 0x74
 8003c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c40:	ab03      	add	r3, sp, #12
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	462a      	mov	r2, r5
 8003c46:	4638      	mov	r0, r7
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <_svfiprintf_r+0x1fc>)
 8003c4a:	a904      	add	r1, sp, #16
 8003c4c:	f000 f87c 	bl	8003d48 <_printf_i>
 8003c50:	e7eb      	b.n	8003c2a <_svfiprintf_r+0x1c2>
 8003c52:	bf00      	nop
 8003c54:	080071cc 	.word	0x080071cc
 8003c58:	080071d2 	.word	0x080071d2
 8003c5c:	080071d6 	.word	0x080071d6
 8003c60:	00000000 	.word	0x00000000
 8003c64:	080039b1 	.word	0x080039b1

08003c68 <_printf_common>:
 8003c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c6c:	4616      	mov	r6, r2
 8003c6e:	4699      	mov	r9, r3
 8003c70:	688a      	ldr	r2, [r1, #8]
 8003c72:	690b      	ldr	r3, [r1, #16]
 8003c74:	4607      	mov	r7, r0
 8003c76:	4293      	cmp	r3, r2
 8003c78:	bfb8      	it	lt
 8003c7a:	4613      	movlt	r3, r2
 8003c7c:	6033      	str	r3, [r6, #0]
 8003c7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c82:	460c      	mov	r4, r1
 8003c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c88:	b10a      	cbz	r2, 8003c8e <_printf_common+0x26>
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	6033      	str	r3, [r6, #0]
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	0699      	lsls	r1, r3, #26
 8003c92:	bf42      	ittt	mi
 8003c94:	6833      	ldrmi	r3, [r6, #0]
 8003c96:	3302      	addmi	r3, #2
 8003c98:	6033      	strmi	r3, [r6, #0]
 8003c9a:	6825      	ldr	r5, [r4, #0]
 8003c9c:	f015 0506 	ands.w	r5, r5, #6
 8003ca0:	d106      	bne.n	8003cb0 <_printf_common+0x48>
 8003ca2:	f104 0a19 	add.w	sl, r4, #25
 8003ca6:	68e3      	ldr	r3, [r4, #12]
 8003ca8:	6832      	ldr	r2, [r6, #0]
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	42ab      	cmp	r3, r5
 8003cae:	dc28      	bgt.n	8003d02 <_printf_common+0x9a>
 8003cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cb4:	1e13      	subs	r3, r2, #0
 8003cb6:	6822      	ldr	r2, [r4, #0]
 8003cb8:	bf18      	it	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	0692      	lsls	r2, r2, #26
 8003cbe:	d42d      	bmi.n	8003d1c <_printf_common+0xb4>
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cc8:	47c0      	blx	r8
 8003cca:	3001      	adds	r0, #1
 8003ccc:	d020      	beq.n	8003d10 <_printf_common+0xa8>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	68e5      	ldr	r5, [r4, #12]
 8003cd2:	f003 0306 	and.w	r3, r3, #6
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf18      	it	ne
 8003cda:	2500      	movne	r5, #0
 8003cdc:	6832      	ldr	r2, [r6, #0]
 8003cde:	f04f 0600 	mov.w	r6, #0
 8003ce2:	68a3      	ldr	r3, [r4, #8]
 8003ce4:	bf08      	it	eq
 8003ce6:	1aad      	subeq	r5, r5, r2
 8003ce8:	6922      	ldr	r2, [r4, #16]
 8003cea:	bf08      	it	eq
 8003cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	bfc4      	itt	gt
 8003cf4:	1a9b      	subgt	r3, r3, r2
 8003cf6:	18ed      	addgt	r5, r5, r3
 8003cf8:	341a      	adds	r4, #26
 8003cfa:	42b5      	cmp	r5, r6
 8003cfc:	d11a      	bne.n	8003d34 <_printf_common+0xcc>
 8003cfe:	2000      	movs	r0, #0
 8003d00:	e008      	b.n	8003d14 <_printf_common+0xac>
 8003d02:	2301      	movs	r3, #1
 8003d04:	4652      	mov	r2, sl
 8003d06:	4649      	mov	r1, r9
 8003d08:	4638      	mov	r0, r7
 8003d0a:	47c0      	blx	r8
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d103      	bne.n	8003d18 <_printf_common+0xb0>
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d18:	3501      	adds	r5, #1
 8003d1a:	e7c4      	b.n	8003ca6 <_printf_common+0x3e>
 8003d1c:	2030      	movs	r0, #48	; 0x30
 8003d1e:	18e1      	adds	r1, r4, r3
 8003d20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d2a:	4422      	add	r2, r4
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d32:	e7c5      	b.n	8003cc0 <_printf_common+0x58>
 8003d34:	2301      	movs	r3, #1
 8003d36:	4622      	mov	r2, r4
 8003d38:	4649      	mov	r1, r9
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c0      	blx	r8
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d0e6      	beq.n	8003d10 <_printf_common+0xa8>
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7d9      	b.n	8003cfa <_printf_common+0x92>
	...

08003d48 <_printf_i>:
 8003d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d4c:	7e0f      	ldrb	r7, [r1, #24]
 8003d4e:	4691      	mov	r9, r2
 8003d50:	2f78      	cmp	r7, #120	; 0x78
 8003d52:	4680      	mov	r8, r0
 8003d54:	460c      	mov	r4, r1
 8003d56:	469a      	mov	sl, r3
 8003d58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d5e:	d807      	bhi.n	8003d70 <_printf_i+0x28>
 8003d60:	2f62      	cmp	r7, #98	; 0x62
 8003d62:	d80a      	bhi.n	8003d7a <_printf_i+0x32>
 8003d64:	2f00      	cmp	r7, #0
 8003d66:	f000 80d9 	beq.w	8003f1c <_printf_i+0x1d4>
 8003d6a:	2f58      	cmp	r7, #88	; 0x58
 8003d6c:	f000 80a4 	beq.w	8003eb8 <_printf_i+0x170>
 8003d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d78:	e03a      	b.n	8003df0 <_printf_i+0xa8>
 8003d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d7e:	2b15      	cmp	r3, #21
 8003d80:	d8f6      	bhi.n	8003d70 <_printf_i+0x28>
 8003d82:	a101      	add	r1, pc, #4	; (adr r1, 8003d88 <_printf_i+0x40>)
 8003d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d88:	08003de1 	.word	0x08003de1
 8003d8c:	08003df5 	.word	0x08003df5
 8003d90:	08003d71 	.word	0x08003d71
 8003d94:	08003d71 	.word	0x08003d71
 8003d98:	08003d71 	.word	0x08003d71
 8003d9c:	08003d71 	.word	0x08003d71
 8003da0:	08003df5 	.word	0x08003df5
 8003da4:	08003d71 	.word	0x08003d71
 8003da8:	08003d71 	.word	0x08003d71
 8003dac:	08003d71 	.word	0x08003d71
 8003db0:	08003d71 	.word	0x08003d71
 8003db4:	08003f03 	.word	0x08003f03
 8003db8:	08003e25 	.word	0x08003e25
 8003dbc:	08003ee5 	.word	0x08003ee5
 8003dc0:	08003d71 	.word	0x08003d71
 8003dc4:	08003d71 	.word	0x08003d71
 8003dc8:	08003f25 	.word	0x08003f25
 8003dcc:	08003d71 	.word	0x08003d71
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003d71 	.word	0x08003d71
 8003dd8:	08003d71 	.word	0x08003d71
 8003ddc:	08003eed 	.word	0x08003eed
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	1d1a      	adds	r2, r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	602a      	str	r2, [r5, #0]
 8003de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0a4      	b.n	8003f3e <_printf_i+0x1f6>
 8003df4:	6820      	ldr	r0, [r4, #0]
 8003df6:	6829      	ldr	r1, [r5, #0]
 8003df8:	0606      	lsls	r6, r0, #24
 8003dfa:	f101 0304 	add.w	r3, r1, #4
 8003dfe:	d50a      	bpl.n	8003e16 <_printf_i+0xce>
 8003e00:	680e      	ldr	r6, [r1, #0]
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	2e00      	cmp	r6, #0
 8003e06:	da03      	bge.n	8003e10 <_printf_i+0xc8>
 8003e08:	232d      	movs	r3, #45	; 0x2d
 8003e0a:	4276      	negs	r6, r6
 8003e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e10:	230a      	movs	r3, #10
 8003e12:	485e      	ldr	r0, [pc, #376]	; (8003f8c <_printf_i+0x244>)
 8003e14:	e019      	b.n	8003e4a <_printf_i+0x102>
 8003e16:	680e      	ldr	r6, [r1, #0]
 8003e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	bf18      	it	ne
 8003e20:	b236      	sxthne	r6, r6
 8003e22:	e7ef      	b.n	8003e04 <_printf_i+0xbc>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	6820      	ldr	r0, [r4, #0]
 8003e28:	1d19      	adds	r1, r3, #4
 8003e2a:	6029      	str	r1, [r5, #0]
 8003e2c:	0601      	lsls	r1, r0, #24
 8003e2e:	d501      	bpl.n	8003e34 <_printf_i+0xec>
 8003e30:	681e      	ldr	r6, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <_printf_i+0xf2>
 8003e34:	0646      	lsls	r6, r0, #25
 8003e36:	d5fb      	bpl.n	8003e30 <_printf_i+0xe8>
 8003e38:	881e      	ldrh	r6, [r3, #0]
 8003e3a:	2f6f      	cmp	r7, #111	; 0x6f
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2308      	moveq	r3, #8
 8003e40:	230a      	movne	r3, #10
 8003e42:	4852      	ldr	r0, [pc, #328]	; (8003f8c <_printf_i+0x244>)
 8003e44:	2100      	movs	r1, #0
 8003e46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e4a:	6865      	ldr	r5, [r4, #4]
 8003e4c:	2d00      	cmp	r5, #0
 8003e4e:	bfa8      	it	ge
 8003e50:	6821      	ldrge	r1, [r4, #0]
 8003e52:	60a5      	str	r5, [r4, #8]
 8003e54:	bfa4      	itt	ge
 8003e56:	f021 0104 	bicge.w	r1, r1, #4
 8003e5a:	6021      	strge	r1, [r4, #0]
 8003e5c:	b90e      	cbnz	r6, 8003e62 <_printf_i+0x11a>
 8003e5e:	2d00      	cmp	r5, #0
 8003e60:	d04d      	beq.n	8003efe <_printf_i+0x1b6>
 8003e62:	4615      	mov	r5, r2
 8003e64:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e68:	fb03 6711 	mls	r7, r3, r1, r6
 8003e6c:	5dc7      	ldrb	r7, [r0, r7]
 8003e6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e72:	4637      	mov	r7, r6
 8003e74:	42bb      	cmp	r3, r7
 8003e76:	460e      	mov	r6, r1
 8003e78:	d9f4      	bls.n	8003e64 <_printf_i+0x11c>
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d10b      	bne.n	8003e96 <_printf_i+0x14e>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	07de      	lsls	r6, r3, #31
 8003e82:	d508      	bpl.n	8003e96 <_printf_i+0x14e>
 8003e84:	6923      	ldr	r3, [r4, #16]
 8003e86:	6861      	ldr	r1, [r4, #4]
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	bfde      	ittt	le
 8003e8c:	2330      	movle	r3, #48	; 0x30
 8003e8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e96:	1b52      	subs	r2, r2, r5
 8003e98:	6122      	str	r2, [r4, #16]
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	f8cd a000 	str.w	sl, [sp]
 8003ea4:	aa03      	add	r2, sp, #12
 8003ea6:	f7ff fedf 	bl	8003c68 <_printf_common>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d14c      	bne.n	8003f48 <_printf_i+0x200>
 8003eae:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb2:	b004      	add	sp, #16
 8003eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb8:	4834      	ldr	r0, [pc, #208]	; (8003f8c <_printf_i+0x244>)
 8003eba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ebe:	6829      	ldr	r1, [r5, #0]
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ec6:	6029      	str	r1, [r5, #0]
 8003ec8:	061d      	lsls	r5, r3, #24
 8003eca:	d514      	bpl.n	8003ef6 <_printf_i+0x1ae>
 8003ecc:	07df      	lsls	r7, r3, #31
 8003ece:	bf44      	itt	mi
 8003ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ed4:	6023      	strmi	r3, [r4, #0]
 8003ed6:	b91e      	cbnz	r6, 8003ee0 <_printf_i+0x198>
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f023 0320 	bic.w	r3, r3, #32
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	e7af      	b.n	8003e44 <_printf_i+0xfc>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f043 0320 	orr.w	r3, r3, #32
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	2378      	movs	r3, #120	; 0x78
 8003eee:	4828      	ldr	r0, [pc, #160]	; (8003f90 <_printf_i+0x248>)
 8003ef0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ef4:	e7e3      	b.n	8003ebe <_printf_i+0x176>
 8003ef6:	0659      	lsls	r1, r3, #25
 8003ef8:	bf48      	it	mi
 8003efa:	b2b6      	uxthmi	r6, r6
 8003efc:	e7e6      	b.n	8003ecc <_printf_i+0x184>
 8003efe:	4615      	mov	r5, r2
 8003f00:	e7bb      	b.n	8003e7a <_printf_i+0x132>
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	6826      	ldr	r6, [r4, #0]
 8003f06:	1d18      	adds	r0, r3, #4
 8003f08:	6961      	ldr	r1, [r4, #20]
 8003f0a:	6028      	str	r0, [r5, #0]
 8003f0c:	0635      	lsls	r5, r6, #24
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	d501      	bpl.n	8003f16 <_printf_i+0x1ce>
 8003f12:	6019      	str	r1, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <_printf_i+0x1d4>
 8003f16:	0670      	lsls	r0, r6, #25
 8003f18:	d5fb      	bpl.n	8003f12 <_printf_i+0x1ca>
 8003f1a:	8019      	strh	r1, [r3, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4615      	mov	r5, r2
 8003f20:	6123      	str	r3, [r4, #16]
 8003f22:	e7ba      	b.n	8003e9a <_printf_i+0x152>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	2100      	movs	r1, #0
 8003f28:	1d1a      	adds	r2, r3, #4
 8003f2a:	602a      	str	r2, [r5, #0]
 8003f2c:	681d      	ldr	r5, [r3, #0]
 8003f2e:	6862      	ldr	r2, [r4, #4]
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 f8c9 	bl	80040c8 <memchr>
 8003f36:	b108      	cbz	r0, 8003f3c <_printf_i+0x1f4>
 8003f38:	1b40      	subs	r0, r0, r5
 8003f3a:	6060      	str	r0, [r4, #4]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	6123      	str	r3, [r4, #16]
 8003f40:	2300      	movs	r3, #0
 8003f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f46:	e7a8      	b.n	8003e9a <_printf_i+0x152>
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	47d0      	blx	sl
 8003f52:	3001      	adds	r0, #1
 8003f54:	d0ab      	beq.n	8003eae <_printf_i+0x166>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	079b      	lsls	r3, r3, #30
 8003f5a:	d413      	bmi.n	8003f84 <_printf_i+0x23c>
 8003f5c:	68e0      	ldr	r0, [r4, #12]
 8003f5e:	9b03      	ldr	r3, [sp, #12]
 8003f60:	4298      	cmp	r0, r3
 8003f62:	bfb8      	it	lt
 8003f64:	4618      	movlt	r0, r3
 8003f66:	e7a4      	b.n	8003eb2 <_printf_i+0x16a>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	4640      	mov	r0, r8
 8003f70:	47d0      	blx	sl
 8003f72:	3001      	adds	r0, #1
 8003f74:	d09b      	beq.n	8003eae <_printf_i+0x166>
 8003f76:	3501      	adds	r5, #1
 8003f78:	68e3      	ldr	r3, [r4, #12]
 8003f7a:	9903      	ldr	r1, [sp, #12]
 8003f7c:	1a5b      	subs	r3, r3, r1
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	dcf2      	bgt.n	8003f68 <_printf_i+0x220>
 8003f82:	e7eb      	b.n	8003f5c <_printf_i+0x214>
 8003f84:	2500      	movs	r5, #0
 8003f86:	f104 0619 	add.w	r6, r4, #25
 8003f8a:	e7f5      	b.n	8003f78 <_printf_i+0x230>
 8003f8c:	080071dd 	.word	0x080071dd
 8003f90:	080071ee 	.word	0x080071ee

08003f94 <__sread>:
 8003f94:	b510      	push	{r4, lr}
 8003f96:	460c      	mov	r4, r1
 8003f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9c:	f000 f8fa 	bl	8004194 <_read_r>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	bfab      	itete	ge
 8003fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fa8:	181b      	addge	r3, r3, r0
 8003faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fae:	bfac      	ite	ge
 8003fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fb2:	81a3      	strhlt	r3, [r4, #12]
 8003fb4:	bd10      	pop	{r4, pc}

08003fb6 <__swrite>:
 8003fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fba:	461f      	mov	r7, r3
 8003fbc:	898b      	ldrh	r3, [r1, #12]
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	05db      	lsls	r3, r3, #23
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	d505      	bpl.n	8003fd4 <__swrite+0x1e>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd0:	f000 f868 	bl	80040a4 <_lseek_r>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	4628      	mov	r0, r5
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fea:	f000 b817 	b.w	800401c <_write_r>

08003fee <__sseek>:
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff6:	f000 f855 	bl	80040a4 <_lseek_r>
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	bf15      	itete	ne
 8004000:	6560      	strne	r0, [r4, #84]	; 0x54
 8004002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800400a:	81a3      	strheq	r3, [r4, #12]
 800400c:	bf18      	it	ne
 800400e:	81a3      	strhne	r3, [r4, #12]
 8004010:	bd10      	pop	{r4, pc}

08004012 <__sclose>:
 8004012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004016:	f000 b813 	b.w	8004040 <_close_r>
	...

0800401c <_write_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	4611      	mov	r1, r2
 8004024:	2200      	movs	r2, #0
 8004026:	4d05      	ldr	r5, [pc, #20]	; (800403c <_write_r+0x20>)
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	f7fd fd9a 	bl	8001b64 <_write>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_write_r+0x1e>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_write_r+0x1e>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	20000120 	.word	0x20000120

08004040 <_close_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	2300      	movs	r3, #0
 8004044:	4d05      	ldr	r5, [pc, #20]	; (800405c <_close_r+0x1c>)
 8004046:	4604      	mov	r4, r0
 8004048:	4608      	mov	r0, r1
 800404a:	602b      	str	r3, [r5, #0]
 800404c:	f7fd fda6 	bl	8001b9c <_close>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_close_r+0x1a>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_close_r+0x1a>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	20000120 	.word	0x20000120

08004060 <_fstat_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	2300      	movs	r3, #0
 8004064:	4d06      	ldr	r5, [pc, #24]	; (8004080 <_fstat_r+0x20>)
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	4611      	mov	r1, r2
 800406c:	602b      	str	r3, [r5, #0]
 800406e:	f7fd fda0 	bl	8001bb2 <_fstat>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	d102      	bne.n	800407c <_fstat_r+0x1c>
 8004076:	682b      	ldr	r3, [r5, #0]
 8004078:	b103      	cbz	r3, 800407c <_fstat_r+0x1c>
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	bd38      	pop	{r3, r4, r5, pc}
 800407e:	bf00      	nop
 8004080:	20000120 	.word	0x20000120

08004084 <_isatty_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	2300      	movs	r3, #0
 8004088:	4d05      	ldr	r5, [pc, #20]	; (80040a0 <_isatty_r+0x1c>)
 800408a:	4604      	mov	r4, r0
 800408c:	4608      	mov	r0, r1
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	f7fd fd9e 	bl	8001bd0 <_isatty>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_isatty_r+0x1a>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_isatty_r+0x1a>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	20000120 	.word	0x20000120

080040a4 <_lseek_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	4d05      	ldr	r5, [pc, #20]	; (80040c4 <_lseek_r+0x20>)
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f7fd fd96 	bl	8001be4 <_lseek>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d102      	bne.n	80040c2 <_lseek_r+0x1e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	b103      	cbz	r3, 80040c2 <_lseek_r+0x1e>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	bd38      	pop	{r3, r4, r5, pc}
 80040c4:	20000120 	.word	0x20000120

080040c8 <memchr>:
 80040c8:	4603      	mov	r3, r0
 80040ca:	b510      	push	{r4, lr}
 80040cc:	b2c9      	uxtb	r1, r1
 80040ce:	4402      	add	r2, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	d101      	bne.n	80040da <memchr+0x12>
 80040d6:	2000      	movs	r0, #0
 80040d8:	e003      	b.n	80040e2 <memchr+0x1a>
 80040da:	7804      	ldrb	r4, [r0, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	428c      	cmp	r4, r1
 80040e0:	d1f6      	bne.n	80040d0 <memchr+0x8>
 80040e2:	bd10      	pop	{r4, pc}

080040e4 <memcpy>:
 80040e4:	440a      	add	r2, r1
 80040e6:	4291      	cmp	r1, r2
 80040e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040ec:	d100      	bne.n	80040f0 <memcpy+0xc>
 80040ee:	4770      	bx	lr
 80040f0:	b510      	push	{r4, lr}
 80040f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f6:	4291      	cmp	r1, r2
 80040f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040fc:	d1f9      	bne.n	80040f2 <memcpy+0xe>
 80040fe:	bd10      	pop	{r4, pc}

08004100 <memmove>:
 8004100:	4288      	cmp	r0, r1
 8004102:	b510      	push	{r4, lr}
 8004104:	eb01 0402 	add.w	r4, r1, r2
 8004108:	d902      	bls.n	8004110 <memmove+0x10>
 800410a:	4284      	cmp	r4, r0
 800410c:	4623      	mov	r3, r4
 800410e:	d807      	bhi.n	8004120 <memmove+0x20>
 8004110:	1e43      	subs	r3, r0, #1
 8004112:	42a1      	cmp	r1, r4
 8004114:	d008      	beq.n	8004128 <memmove+0x28>
 8004116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800411a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800411e:	e7f8      	b.n	8004112 <memmove+0x12>
 8004120:	4601      	mov	r1, r0
 8004122:	4402      	add	r2, r0
 8004124:	428a      	cmp	r2, r1
 8004126:	d100      	bne.n	800412a <memmove+0x2a>
 8004128:	bd10      	pop	{r4, pc}
 800412a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800412e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004132:	e7f7      	b.n	8004124 <memmove+0x24>

08004134 <_realloc_r>:
 8004134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004138:	4680      	mov	r8, r0
 800413a:	4614      	mov	r4, r2
 800413c:	460e      	mov	r6, r1
 800413e:	b921      	cbnz	r1, 800414a <_realloc_r+0x16>
 8004140:	4611      	mov	r1, r2
 8004142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004146:	f7ff b831 	b.w	80031ac <_malloc_r>
 800414a:	b92a      	cbnz	r2, 8004158 <_realloc_r+0x24>
 800414c:	f7fe ffc6 	bl	80030dc <_free_r>
 8004150:	4625      	mov	r5, r4
 8004152:	4628      	mov	r0, r5
 8004154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004158:	f000 f82e 	bl	80041b8 <_malloc_usable_size_r>
 800415c:	4284      	cmp	r4, r0
 800415e:	4607      	mov	r7, r0
 8004160:	d802      	bhi.n	8004168 <_realloc_r+0x34>
 8004162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004166:	d812      	bhi.n	800418e <_realloc_r+0x5a>
 8004168:	4621      	mov	r1, r4
 800416a:	4640      	mov	r0, r8
 800416c:	f7ff f81e 	bl	80031ac <_malloc_r>
 8004170:	4605      	mov	r5, r0
 8004172:	2800      	cmp	r0, #0
 8004174:	d0ed      	beq.n	8004152 <_realloc_r+0x1e>
 8004176:	42bc      	cmp	r4, r7
 8004178:	4622      	mov	r2, r4
 800417a:	4631      	mov	r1, r6
 800417c:	bf28      	it	cs
 800417e:	463a      	movcs	r2, r7
 8004180:	f7ff ffb0 	bl	80040e4 <memcpy>
 8004184:	4631      	mov	r1, r6
 8004186:	4640      	mov	r0, r8
 8004188:	f7fe ffa8 	bl	80030dc <_free_r>
 800418c:	e7e1      	b.n	8004152 <_realloc_r+0x1e>
 800418e:	4635      	mov	r5, r6
 8004190:	e7df      	b.n	8004152 <_realloc_r+0x1e>
	...

08004194 <_read_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	2200      	movs	r2, #0
 800419e:	4d05      	ldr	r5, [pc, #20]	; (80041b4 <_read_r+0x20>)
 80041a0:	602a      	str	r2, [r5, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f7fd fcc1 	bl	8001b2a <_read>
 80041a8:	1c43      	adds	r3, r0, #1
 80041aa:	d102      	bne.n	80041b2 <_read_r+0x1e>
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	b103      	cbz	r3, 80041b2 <_read_r+0x1e>
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	bd38      	pop	{r3, r4, r5, pc}
 80041b4:	20000120 	.word	0x20000120

080041b8 <_malloc_usable_size_r>:
 80041b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041bc:	1f18      	subs	r0, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfbc      	itt	lt
 80041c2:	580b      	ldrlt	r3, [r1, r0]
 80041c4:	18c0      	addlt	r0, r0, r3
 80041c6:	4770      	bx	lr

080041c8 <_init>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	bf00      	nop
 80041cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ce:	bc08      	pop	{r3}
 80041d0:	469e      	mov	lr, r3
 80041d2:	4770      	bx	lr

080041d4 <_fini>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr
